@mainClass "aoUrnToRam::Test::Main" 
@mainOperation "main"
package aoUrnToRam::Test;

require kermeta
require "platform:/resource/aoUrnToRam/test/tdd/iwToRam/BuildTestCase.kmt"
require "platform:/resource/aoUrnToRam/test/tdd/iwToRam/LinkTestCase.kmt"

require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/InOutExpressionTestCase.kmt"
require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/BuildTestCase.kmt"
require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/LinkTestCase.kmt"
require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/HandleInputProcessingNodesTestCase.kmt"
require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/LinkStepsTestCase.kmt"
require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/LinkSteps_StubInBindingTestCase.kmt"
require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/LinkSteps_StubAnotherConcernTestCase.kmt"
require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/LinkSteps_StubOutBindingTestCase.kmt"

require "platform:/resource/aoUrnToRam/src/AoUrnToRamTransformation.kmt"

using kermeta::standard
using kermeta::kunit
using aoUrnToRam
using kermeta::language::structure
using kermeta::exceptions

using intermediateWorkflow

class Main inherits TestCase
{
    operation main() : Void is do
    	launchTddTests() 
		launchIntegrationTests()
	end
	
	operation specificTest_NoKUnitToAllowDebugging() : Void is do
/*		var test:LinkSteps_StubOutBindingTestCase init LinkSteps_StubOutBindingTestCase.new
		test.setUp
		test.testLinkStep_StubOutBinding_Unexplored*/
    end
	

	property readonly aoUrnToIwTestSuite : OrderedSet<Class>
	getter is do
		var testClasses : OrderedSet<Class> init OrderedSet<Class>.new
		
		testClasses.add(InOutExpressionTestCase)
		testClasses.add(AoUrnToIwBuildTestCase)
		testClasses.add(AoUrnToIwLinkTestCase)
		testClasses.add(HandleInputProcessingNodesTestCase)
		testClasses.add(LinkStepsTestCase)
		testClasses.add(LinkSteps_StubInBindingTestCase)
		testClasses.add(LinkSteps_StubAnotherConcernTestCase)
		testClasses.add(LinkSteps_StubOutBindingTestCase)

		result := testClasses
	end
	
	property readonly iwToRamTestSuite : OrderedSet<Class>
	getter is do
		var testClasses : OrderedSet<Class> init OrderedSet<Class>.new
		
		testClasses.add(IwToRamBuildTestCase)
		testClasses.add(IwToRamLinkTestCase)
		
		result := testClasses
	end
    
    operation launchTddTests() : Void is do 
    	var testClasses : OrderedSet<Class> init OrderedSet<Class>.new
    	testClasses.addAll(aoUrnToIwTestSuite)
    	testClasses.addAll(iwToRamTestSuite)
		runTestClasses(testClasses)
    end

    operation launchAoUrnToIwTddTests() : Void is do 
		runTestClasses(aoUrnToIwTestSuite)
    end

    operation launchIwToRamTddTests() : Void is do
    	runTestClasses(iwToRamTestSuite) 
    end
	
	operation launchSpecificTest() : Void is do
		
		var pass:Boolean init false
		do
			specificTest_NoKUnitToAllowDebugging
			pass:=true
			rescue (failure : AssertionFailedError)
				stdio.writeln("Failure")
				stdio.writeln(failure.message)
			rescue (error : Exception)
				stdio.writeln("Error")
				stdio.writeln(error.toString)
		end
		writePassFail(pass)
    end
    
    operation runTestClasses(testClasses:OrderedSet<Class>) is do
    	var testSuite:TestSuite init TestSuite.new
    	testClasses.each{testClass|
    		testSuite.addAllTestCasesFrom(testClass)
    	}
		runTest(testSuite)
    end
    
    operation runTest(test:Test) is do
		var testRunner : TestRunner init TestRunner.new
		testRunner.runTest(test)
		testRunner.printTestResult
		
		var pass:Boolean init testRunner.log.failures.size==0 and
		   					  testRunner.log.errors.size==0
		writePassFail(pass)
    end
    
	operation writePassFail(pass:Boolean) is do
		stdio.writeln("----")
		stdio.writeln(if pass then "PASS" else "FAIL" end)
		stdio.writeln("----")
	end
    
    operation launchIntegrationTests() : Void is do
		stdio.writeln("Start")
		AoUrnToRamTransformation.new.transform(
			"platform:/resource/aoUrnToRam/test/integration/model/stub.jucm",
			"platform:/resource/aoUrnToRam/test/integration/model/RamWorkspace",
			"platform:/resource/aoUrnToRam/test/integration/model/SimpleWorkflow_Actual.xmi"
		)
		stdio.writeln("End")
	end
}