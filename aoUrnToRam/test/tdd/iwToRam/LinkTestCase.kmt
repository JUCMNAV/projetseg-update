package aoUrnToRam::Test;

require kermeta
require "platform:/resource/aoUrnToRam/test/tdd/iwToRam/IwTestFactory.kmt"
require "platform:/resource/aoUrnToRam/src/iwToRam/Build.kmt"
require "platform:/resource/aoUrnToRam/src/iwToRam/Link.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow
using ramstructural

class IwToRamLinkTestCase inherits TestCase
{
	attribute factory:IwTestFactory

	method setUp() is do
		factory:=IwTestFactory.new
	end

	operation testLinkMapping_None() is do
		var actual:IwWorkflow init factory.createWorkflow()

		actual.build()
		actual.link()
		
		assert(actual.ramReactiveWorkflowInstantiation.mappings.size==0)
	end

	operation testLinkMapping_ManySameSourceModelElement() is do
		var actual:IwWorkflow init factory.createWorkflow()
		3.times{i|actual.nodes.add(factory.createIwInput())} 

		actual.build()
		actual.link()
		
		assert(actual.ramReactiveWorkflowInstantiation.mappings.size==1)
		var inputDataMapping:Mapping init actual.ramReactiveWorkflowInstantiation.mappings.one
		
		//stle: dry between test and impl 
		assertStringEqual("|InputData",inputDataMapping.sourceModelElement)
		assert(inputDataMapping.maps.size==3)

		actual.nodes.each{iwNode|
						assert(inputDataMapping.maps.exists{map|
															map.oid==iwNode.asType(IwInput).ramInputData.oid}
						)
		}
	end
	
	operation testLinkMapping_ManyDifferentSourceModelElement() is do
		var actual:IwWorkflow init factory.createWorkflow()
		var iwInput:IwInput init factory.createIwInput()
		var iwOutput:IwOutput init factory.createIwOutput()
		actual.nodes.add(iwInput)
		actual.nodes.add(iwOutput)
		
		actual.build()
		actual.link()
		
		assert(actual.ramReactiveWorkflowInstantiation.mappings.size==3)
		
		//stle: dry between test and impl 
		var inputDataMapping:Mapping init actual.ramReactiveWorkflowInstantiation.mappings.select{mapping|mapping.sourceModelElement=="|InputData"}.one
		assert(inputDataMapping.maps.size==1)
		assert(inputDataMapping.maps.one.oid==iwInput.ramInputData.oid)
		
		var customizableSequenceMapping:Mapping init actual.ramReactiveWorkflowInstantiation.mappings.select{mapping|mapping.sourceModelElement=="CustomizableSequence"}.one
		assert(customizableSequenceMapping.maps.size==1)
		assert(customizableSequenceMapping.maps.one.oid==iwOutput.ramCustomizableSequence.oid)

		var outputDataMapping:Mapping init actual.ramReactiveWorkflowInstantiation.mappings.select{mapping|mapping.sourceModelElement=="|OutputData"}.one
		assert(outputDataMapping.maps.size==1)
		assert(outputDataMapping.maps.one.oid==iwOutput.ramOutputData.oid)
	end
	

	operation testLinkWorkflow() is do
		var actual:IwWorkflow init factory.createWorkflow()
		actual.build()
		actual.link()
		
		assert(actual.ramStructuralView.instantiations.size==1)
	end

	operation testLinkNoNodeFromWorkflow() is do
		var actual:IwWorkflow init factory.createWorkflow()
		
		actual.build()
		actual.link()
		
		assert(actual.ramStructuralView.classes.size==0)
	end

	operation testLinkOneNodeFromWorkflow() is do
		var actual:IwWorkflow init factory.createWorkflow()
		actual.nodes.add(factory.createIwInput())
		
		actual.build()
		actual.link()
		
		assert(actual.ramStructuralView.classes.size==1)
	end


	operation testLinkManyNodeFromWorkflow() is do
		var actual:IwWorkflow init factory.createWorkflow()
		actual.nodes.add(factory.createIwInput())
		2.times{i|actual.nodes.add(factory.createIwProcessingNode())}
		actual.nodes.add(factory.createIwOutput())
		
		actual.build()
		actual.link()
		
		//stle: assert link as well
		//stle: One kind of assert per test
		assert(actual.ramStructuralView.classes.size==1+1+1+2)
	end

	operation testLinkIwModel_nWorkflows() is do
		//stle: need parametrizable tests
		var params:Integer[0..*] init OrderedSet<Integer>.new
		params.add(0)
		params.add(1)
		params.add(3)
		
		params.each{param|parametrizableTestLinkIwModel_nWorkflows(param)}
	end

	
	operation parametrizableTestLinkIwModel_nWorkflows(numOfWorkflows:Integer) is do
		var actual:IwModel init factory.createIwModelWithWorkflows(numOfWorkflows)
		actual.build
		actual.link
		
		assert(actual.ramAspects.size==numOfWorkflows)
	end

	
	
		//stle: dry
	//stle: more verbrose on assertion
	operation assertIsNonVoidInstanceOf(expected:kermeta::language::structure::Class, actual:Object) is do
		assertWithMsg(actual.isVoid==false,"IsVoid-> expected:false actual:true")
		assertWithMsg(actual.isInstanceOf(expected),"IsInstanceOf-> expected:\""+expected.toString()+"\"actual:\""+actual.getMetaClass().toString()+"\"")
	end

	
	operation assertStringEqual(expected:String, actual:String) is do
		assertWithMsg(expected==actual,"StringEqual-> expected:\""+expected+"\"actual:\""+actual+"\"")
	end
	
}