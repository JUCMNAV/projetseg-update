package aoUrnToRam::Test;

require kermeta
require "platform:/resource/aoUrnToRam/test/tdd/iwToRam/IwTestFactory.kmt"
require "platform:/resource/aoUrnToRam/src/iwToRam/Build.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow
using ramstructural


class IwToRamBuildTestCase inherits TestCase
{
	attribute factory:IwTestFactory

	method setUp() is do
		factory:=IwTestFactory.new
	end
	
	operation testBuildInput() is do
		var actual:IwInput init factory.createIwInput()
		actual.build()
		
		assert(actual.ramClasses.size==1)
		assert(actual.ramMappings.size==1)
		assertStringEqual("a"+"Input",actual.ramInput.name)
		assertStringEqual("|InputData",actual.ramInputMapping.sourceModelElement)
	end
	
	operation testBuildOut() is do
		var actual:IwOutput init factory.createIwOutput()
		actual.build()
		
		assert(actual.ramClasses.size==2)
		var ramOutputData:Class init actual.ramClasses.at(0)
		assertIsNonVoidInstanceOf(Class,ramOutputData)
		assertStringEqual("a"+"Output",ramOutputData.name)
		
		var ramCustomizableSequence:Class init actual.ramClasses.at(1)
		assertIsNonVoidInstanceOf(Class,ramCustomizableSequence)
		assertStringEqual("a",ramCustomizableSequence.name)
	end

	operation testBuildProcessingNode() is do
		var actual:IwProcessingNode init factory.createIwProcessingNode()
		actual.build()

		var ramCustomizableSequence:Class init actual.ramClasses.at(0)
		assertIsNonVoidInstanceOf(Class,ramCustomizableSequence)
		assertStringEqual("a",ramCustomizableSequence.name)
	end
	
	operation testBuildWorkflow() is do
		var actual:IwWorkflow init factory.createWorkflow()
		actual.name:="a"
		actual.build()
		
		assertIsNonVoidInstanceOf(Aspect,actual.ramAspect)
		//stle: aspect is name of workflow for now, wait until steps get implemented
		assertStringEqual("a",actual.ramAspect.name)
		assertIsNonVoidInstanceOf(ClassDiagram,actual.ramAspect.structuralView)
		assertIsNonVoidInstanceOf(AspectInterface,actual.ramAspect.interface)
		
		assertIsNonVoidInstanceOf(Instantiation,actual.ramReactiveWorkflowInstantiation)
		assertStringEqual("ReactiveWorkflow",actual.ramReactiveWorkflowInstantiation.externalAspect)
	end
	
	//stle: dry
	//stle: more verbrose on assertion
	operation assertIsNonVoidInstanceOf(expected:kermeta::language::structure::Class, actual:Object) is do
		assertWithMsg(actual.isVoid==false,"IsVoid-> expected:false actual:true")
		assertWithMsg(actual.isInstanceOf(expected),"IsInstanceOf-> expected:\""+expected.toString()+"\"actual:\""+actual.getMetaClass().toString()+"\"")
	end

	
	operation assertStringEqual(expected:String, actual:String) is do
		assertWithMsg(expected==actual,"StringEqual-> expected:\""+expected+"\"actual:\""+actual+"\"")
	end
}