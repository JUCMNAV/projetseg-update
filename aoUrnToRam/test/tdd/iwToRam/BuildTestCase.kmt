package aoUrnToRam::Test;

require kermeta
require "platform:/resource/aoUrnToRam/test/tdd/iwToRam/IwTestFactory.kmt"
require "platform:/resource/aoUrnToRam/src/iwToRam/Build.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow
using ramstructural


class IwToRamBuildTestCase inherits TestCase
{
	attribute factory:IwTestFactory

	method setUp() is do
		factory:=IwTestFactory.new
	end
	
	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildInput() is do
		var actual:IwInput init factory.createIwInput()
		
		actual.build()
		
		assert(actual.ramClasses_PerSourceModelElement.size==1)
		assertClassProperlyBuilt(actual.name+actual.INPUT_SUFFIX,actual.ramInputData)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildOut() is do
		var actual:IwOutput init factory.createIwOutput()
		
		actual.build()
		
		assert(actual.ramClasses_PerSourceModelElement.size==2)
		assertClassProperlyBuilt(actual.name+actual.OUTPUT_SUFFIX,actual.ramOutputData)
		assertClassProperlyBuilt(actual.name,actual.ramCustomizableNode)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildCustomizableNode() is do
		var actual:IwCustomizableNode init factory.createIwCustomizableNode()
		
		actual.build()

		assert(actual.ramClasses_PerSourceModelElement.size==1)
		assertClassProperlyBuilt(actual.name,actual.ramCustomizableNode)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildWorkflow() is do
		var actual:IwStep init factory.createIwStep()

		actual.build
		
		assertIsNonVoidInstanceOf(Aspect,actual.ramAspect)
		//stle: aspect is name of workflow for now, wait until steps get implemented
		assertStringEqual(actual.name,actual.ramAspect.name)
		
		assertIsNonVoidInstanceOf(ClassDiagram,actual.ramAspect.structuralView)
		assertIsNonVoidInstanceOf(AspectInterface,actual.ramAspect.interface)
		assertIsNonVoidInstanceOf(Instantiation,actual.ramReactiveWorkflowInstantiation)
		//stle:dry with iut
		assertStringEqual("ReactiveWorkflow",actual.ramReactiveWorkflowInstantiation.externalAspect)
	end

	@feature "FeaNamingofRAMConcern"
	operation testBuildConcern() is do
		//stle: again an ugly workaround to avoid dependency chain (complex to setup)
		var concern:IwConcern init factory.createIwConcern()
		var actual:IwStep init factory.createIwStep() 
	
		actual.build
		actual.buildConcern(concern)
		
		assertStringEqual(Path.new.combine(concern.name,actual.name),actual.ramAspect.workspacePath)
	end
	
	
	operation assertClassProperlyBuilt(expectedName:String, ramClass:Class) is do
		assertIsNonVoidInstanceOf(Class,ramClass)
		assertStringEqual(expectedName,ramClass.name)
	end
	
	//stle: dry
	//stle: more verbrose on assertion
	operation assertIsNonVoidInstanceOf(expected:kermeta::language::structure::Class, actual:Object) is do
		assertWithMsg(actual.isVoid==false,"IsVoid-> expected:false actual:true")
		assertWithMsg(actual.isInstanceOf(expected),"IsInstanceOf-> expected:\""+expected.toString()+"\"actual:\""+actual.getMetaClass().toString()+"\"")
	end

	
	operation assertStringEqual(expected:String, actual:String) is do
		assertWithMsg(expected==actual,"StringEqual-> expected:\""+expected+"\"actual:\""+actual+"\"")
	end
}