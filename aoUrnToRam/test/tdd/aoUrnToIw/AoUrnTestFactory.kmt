package aoUrnToRam::Test;

require kermeta
require "http:///oneurn.ecore"

using kermeta::standard
using kermeta::utils
using kermeta::exceptions
using oneurn::urn
using oneurn::ucm::map
using oneurn::urncore

class AoUrnTestFactory
{
	reference components_PerName: Hashtable<String, Component>

	operation createSystemComponentRef():ComponentRef is do
		result:=createComponentRef("system",ComponentKind.Object)
	end
	
	operation createComponentRef(name:String,kind:ComponentKind):ComponentRef is do
		result:=ComponentRef.new
		result.contDef:=getComponents(name,kind)
	end

	operation getComponents(name:String,kind:ComponentKind):Component is do
		if(components_PerName.isVoid) then
			components_PerName:=Hashtable<String, Component>.new
		end
		
		if(components_PerName.containsKey(name)==false) then
			var component:Component init Component.new
			component.name:=name
			component.kind:=kind
			components_PerName.put(name,component)
		end
		result:=components_PerName.getValue(name)
		if(result.kind!=kind) then
			//stle: proper exception
			raise Exception.new
		end
	end

	operation createEndPoint(name:String,ramExpression:String):EndPoint is do
		var endPoint:EndPoint init EndPoint.new
		endPoint.name:=optionalString(name)
		addRamMetadata(endPoint,ramExpression)
		result:=endPoint
	end
	
	operation createOrFork(name:String,ramExpression:String):OrFork is do
		var orFork:OrFork init OrFork.new
		orFork.name:=optionalString(name)
		addRamMetadata(orFork,ramExpression)
		result:=orFork
	end

	operation createOrJoin(ramExpression:String):OrJoin is do
		var orJoin:OrJoin init OrJoin.new
		addRamMetadata(orJoin,ramExpression)
		result:=orJoin
	end

	operation createStartPoint(ramExpression:String):StartPoint is do
		var startPoint:StartPoint init StartPoint.new
		addRamMetadata(startPoint,ramExpression)
		result:=startPoint
	end

	operation createRespRef(name:String,ramExpression:String):RespRef is do
		result:=createRespRefGeneric(name,ramExpression,true)
	end
	
	operation createRespRefGeneric(name:String,ramExpression:String,insideSystem:Boolean):RespRef is do
		var respRef:RespRef init RespRef.new
		respRef.respDef:=createResponsibility(name,ramExpression)
		if(insideSystem) then 
			respRef.contRef:=createSystemComponentRef
		end
		result:=respRef
	end

	operation createResponsibility(name:String,ramExpression:String):Responsibility is do
		var responsibility:Responsibility init Responsibility.new
		responsibility.name:=optionalString(name)
		addRamMetadata(responsibility,ramExpression)
		result:=responsibility
	end
	
	operation addRamMetadata(element:URNmodelElement, ramExpression:String) is do
		if(ramExpression.isVoid==false) then
			var ramMetadata:Metadata init Metadata.new
			ramMetadata.name:="ram"
			ramMetadata.~value:=ramExpression
			element.metadata.add(ramMetadata)
		end
	end
	
	operation createUcmMap(name:String):UCMmap is do
		var ucmMap:UCMmap init UCMmap.new
		ucmMap.name:=optionalString(name)
		result:=ucmMap 
	end

	operation createUrnSpec():URNspec is do
		var urnSpec:URNspec init URNspec.new
		urnSpec.urndef:=URNdefinition.new
		result:=urnSpec
	end

	operation createUrnSpecWithUcmMaps(numOfUcmMaps:Integer):URNspec is do
		var urnSpec:URNspec init createUrnSpec
		numOfUcmMaps.times{i|
			urnSpec.urndef.specDiagrams.add(createUcmMap(void))
		}
		result:=urnSpec
	end

	operation createNodeConnection(source:IURNNode,target:IURNNode):NodeConnection is do
		var connection:NodeConnection init NodeConnection.new
		connection.source:=source
		connection.target:=target 
		result:=connection
	end

	operation createConditionalNodeConnection(source:IURNNode,target:IURNNode, conditionLabel:String):NodeConnection is do
		var connection:NodeConnection init createNodeConnection(source,target)
		var condition:Condition init Condition.new
		condition.label:=conditionLabel
		connection.condition:=condition
		result:=connection
	end
	
	
	//rethink about that, will still need to update factory method signature if numOfOptional param changes
	operation optionalString(val:String):String is do
		result:=if val.isVoid then "NotSet" else val end
	end
}