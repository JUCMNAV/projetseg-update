package aoUrnToRam::Test;

require kermeta
//stle: factory is common to IwToIw and IwToRam
require "platform:/resource/aoUrnToRam/test/tdd/iwToRam/IwTestFactory.kmt"
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/HandleInputProcessingNodes.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow

using kermeta::language::structure

class HandleInputProcessingNodesTestCase inherits TestCase
{
	attribute factory:IwTestFactory

	method setUp() is do
		factory:=IwTestFactory.new
	end

	@feature "FeaHandleTwoInputsInARow"
	operation testhandleInputProcessingNodes_Input_EndPoint() is do
		parametrizableTesthandleInputProcessingNodes(factory.createIwEndPoint)
	end

	@feature "FeaHandleTwoInputsInARow"
	operation testhandleInputProcessingNodes_Input_Input() is do
		parametrizableTesthandleInputProcessingNodes(factory.createIwInput)
	end
	
	@feature "FeaHandleInputBeforeDecisionPoint"
	operation testhandleInputProcessingNodes_Input_OrFork() is do
		parametrizableTesthandleInputProcessingNodes(factory.createIwOrFork)
	end
	
	operation parametrizableTesthandleInputProcessingNodes(nonProcessingNode:IwNode) is do
		var workflow:IwWorkflow init factory.createIwWorkflow
		var input:IwInput init factory.createIwInput
		input.workflow:=workflow
		factory.createIwNodeConnection(input,nonProcessingNode)

		input.handleInputProcessingNodes		
	
		var inputProcessing:IwCustomizableNode init input.succs.one.target.asType(IwCustomizableNode)
		//stle: dry between iut and test
		assertObjectEqual("Process"+input.name,input.iwInputProcessingNode.name)
		assertObjectEqual(workflow,input.iwInputProcessingNode.workflow)
		assertSingleNodeConnection(input,input.iwInputProcessingNode)
		assertSingleNodeConnection(input.iwInputProcessingNode,nonProcessingNode)
	end 
	
	@feature "FeaHandleTwoInputsInARow"
	operation testhandleInputProcessingNodes_Input_Processing() is do
		var input:IwInput init factory.createIwInput
		var processingNode:IwCustomizableNode init factory.createIwCustomizableNode
		factory.createIwNodeConnection(input,processingNode)

		input.handleInputProcessingNodes		
	
		assert(input.iwInputProcessingNode.isVoid)
		assertSingleNodeConnection(input,processingNode)
	end
		
	 	

	//stle:dry with LinkTestCase
	operation assertSingleNodeConnection(source:IwNode, target:IwNode) is do
		assertObjectEqual(1,source.succs.size)
		assertExistsNodeConnection(source,target) 
	end
	
	operation assertExistsNodeConnection(source:IwNode, target:IwNode) is do
		assert(source.succs.exists{succ|succ.target==target}) 
	end	

	//stle: dry
	//stle: more verbrose on assertion
	operation assertIsNonVoidInstanceOf(expected:kermeta::language::structure::Class, actual:Object) is do
		assertWithMsg(actual.isVoid==false,"IsVoid-> expected:false actual:true")
		assertWithMsg(actual.isInstanceOf(expected),"IsInstanceOf-> expected:\""+expected.toString()+"\"actual:\""+actual.getMetaClass().toString()+"\"")
	end

	
	operation assertStringEqual(expected:String, actual:String) is do
		assertWithMsg(expected==actual,"StringEqual-> expected:\""+expected+"\"actual:\""+actual+"\"")
	end
	
	operation assertObjectEqual(expected:Object, actual:Object) is do
	//stle: check for void and type
		assertWithMsg(expected==actual,"ObjectEqual-> expected:\""+expected.toString+"\" actual:\""+actual.toString+"\"")
	end
	
	
}