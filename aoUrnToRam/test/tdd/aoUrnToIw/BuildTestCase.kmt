package aoUrnToRam::Test;

require kermeta
require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/AoUrnTestFactory.kmt"
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/Build.kmt"

using kermeta::standard
using kermeta::kunit
using oneurn::urn
using oneurn::ucm::map
using oneurn::urncore
using intermediateWorkflow

using kermeta::language::structure

class AoUrnToIwBuildTestCase inherits TestCase
{
	attribute factory:AoUrnTestFactory

	method setUp() is do
		factory:=AoUrnTestFactory.new
	end

	@feature "FeaHandleUntaggedResponsibilityInActor"
	operation testBuildRespRef_NotInComponent() is do	
		var actual:RespRef init factory.createRespRefGeneric("theRespName",void,false)
		
		actual.build
		assert(actual.iwNodes_ReadOnly.size==1)
	end
	
	operation testBuildRespRef_InNonActorComponent() is do	
		var actual:RespRef init factory.createRespRefGeneric("theRespName",void,false)
		actual.contRef:=factory.createComponentRef("theNonActor",ComponentKind.Object)
		
		actual.build
		assert(actual.iwNodes_ReadOnly.size==1)
	end
	

	@feature "FeaHandleUntaggedResponsibilityInActor"
	operation testBuildRespRef_InActorComponent() is do	
		var actual:RespRef init factory.createRespRefGeneric("theRespName",void,true)
		actual.contRef:=factory.createComponentRef("theActor",ComponentKind.Actor)
		
		actual.build
		assert(actual.iwNodes_ReadOnly.size==0)
	end
	

	@feature "FeaTransformEmptyPointResponsibilityEndPoint"
	operation testBuildPathNode_NoInOut() is do
		var actual:EmptyPoint init factory.createEmptyPoint(void)
		actual.build
	
		assert(actual.iwNodes_ReadOnly.size==0)
	end

	@feature "FeaTransformEmptyPointResponsibilityEndPoint"
	operation testBuildPathNode_In() is do
		var actual:EmptyPoint init factory.createEmptyPoint("in theInputName")
		actual.build
	
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes_ReadOnly.one)
		assertStringEqual("theInputName",actual.iwNodes_ReadOnly.one.name)
	end

	@feature "FeaTransformEmptyPointResponsibilityEndPoint"
	operation testBuildPathNode_Out() is do
		var actual:EmptyPoint init factory.createEmptyPoint("out theOutputName")
		actual.build
	
		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes_ReadOnly.one)
		assertStringEqual("theOutputName",actual.iwNodes_ReadOnly.one.name)
	end

	@feature "FeaTransformEmptyPointResponsibilityEndPoint"
	operation testBuildPathNode_InOut() is do
		var actual:EmptyPoint init factory.createEmptyPoint("out theOutputName in theInputName")
		actual.build
	
		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes_ReadOnly.at(0))
		assertStringEqual("theOutputName",actual.iwNodes_ReadOnly.at(0).name)
		
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes_ReadOnly.at(1))
		assertStringEqual("theInputName",actual.iwNodes_ReadOnly.at(1).name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildRespRef_NoInOut() is do
		var actual:RespRef init factory.createRespRef("theRespName",void)
		actual.build
	
		assertIsNonVoidInstanceOf(IwCustomizableNode, actual.iwNodes_ReadOnly.one)
		assertStringEqual("theRespName",actual.iwNodes_ReadOnly.one.name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildEndPoint_NoInOut() is do
		var actual:EndPoint init factory.createEndPoint("theEndPoint",void)
		actual.build
	
		assertIsNonVoidInstanceOf(IwEndPoint, actual.iwNodes_ReadOnly.one)
		assertStringEqual("theEndPoint",actual.iwNodes_ReadOnly.one.name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildEndPoint_InOut() is do
		var actual:EndPoint init factory.createEndPoint("theEndPoint","out theOutputName in theInputName")
		actual.build
	
		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes_ReadOnly.at(0))
		assertStringEqual("theOutputName",actual.iwNodes_ReadOnly.at(0).name)
		
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes_ReadOnly.at(1))
		assertStringEqual("theInputName",actual.iwNodes_ReadOnly.at(1).name)
		
		assertIsNonVoidInstanceOf(IwEndPoint, actual.iwNodes_ReadOnly.at(2))
		assertStringEqual("theEndPoint",actual.iwNodes_ReadOnly.at(2).name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildUcmMap() is do
		var ucmMap:UCMmap init factory.createUcmMap("theUcmMapName")
		ucmMap.build()
	
		assertIsNonVoidInstanceOf(IwWorkflow, ucmMap.iwWorkflow)
		assertStringEqual("theUcmMapName",ucmMap.iwWorkflow.name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildUnrSpec() is do
		var urnSpec:URNspec init factory.createUrnSpec
		urnSpec.build()
	
		assertIsNonVoidInstanceOf(IwModel, urnSpec.iwModel)
	end

	@feature "FeaTransformOrFork"
	operation testBuildOrFork_NoInOut() is do
		var actual:OrFork init factory.createOrFork("theOrFork",void)
		actual.build
	
		assertIsNonVoidInstanceOf(IwOrFork, actual.iwNodes_ReadOnly.one)
		assertStringEqual("theOrFork",actual.iwNodes_ReadOnly.one.name)
	end

	@feature "FeaTransformOrFork"
	operation testBuildOrFork_InOut() is do
		var actual:OrFork init factory.createOrFork("theOrFork","out theOutputName in theInputName")
		actual.build

		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes_ReadOnly.at(0))
		assertStringEqual("theOutputName",actual.iwNodes_ReadOnly.at(0).name)
		
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes_ReadOnly.at(1))
		assertStringEqual("theInputName",actual.iwNodes_ReadOnly.at(1).name)
		
		assertIsNonVoidInstanceOf(IwOrFork, actual.iwNodes_ReadOnly.at(2))
		assertStringEqual("theOrFork",actual.iwNodes_ReadOnly.at(2).name)
	end


	@feature "FeaTransformOrJoin"
	operation testBuildOrJoin_NoInOut() is do
		var actual:OrJoin init factory.createOrJoin(void)
		actual.build
	
		assert(0==actual.iwNodes_ReadOnly.size)
	end

	@feature "FeaTransformOrJoin"
	operation testBuildOrJoin_InOut() is do
		var actual:OrJoin init factory.createOrJoin("out theOutputName in theInputName")
		actual.build

		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes_ReadOnly.at(0))
		assertStringEqual("theOutputName",actual.iwNodes_ReadOnly.at(0).name)
		
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes_ReadOnly.at(1))
		assertStringEqual("theInputName",actual.iwNodes_ReadOnly.at(1).name)
	end
	

	@feature "FeaNamingofRAMConcern"
	operation testBuildConcern() is do
		var concern:Concern init factory.createConcern("theConcern")
	
		assertIsNonVoidInstanceOf(IwConcern, concern.iwConcern)
		assertStringEqual("theConcern",concern.iwConcern.name)
	end

	@feature "FeaNamingofRAMConcern"
	operation testBuildWithoutConcern() is do
		var urnSpec:URNspec init factory.createUrnSpec
	
		assertIsNonVoidInstanceOf(IwConcern, urnSpec.iwWithoutConcern)
		assertStringEqual("WithoutConcern",urnSpec.iwWithoutConcern.name)
	end

	
	operation testBuildStub_NoInOut() is do
		//stle: add liskov test for in/out metadata
		var actual:Stub init factory.createStub()
		actual.build
	
		assertIsNonVoidInstanceOf(IwStub, actual.iwNodes_ReadOnly.one)
		assertStringEqual("theStub",actual.iwNodes_ReadOnly.one.name)
		assert(actual.iwStub==actual.iwNodes_ReadOnly.one)
	end

	operation testBuildStub_InOut() is do
		var actual:Stub init factory.createStub()
		factory.addRamMetadata(actual,"out theOutputName in theInputName")
		actual.build

		//Ignore ram expression on stubs
		assertIsNonVoidInstanceOf(IwStub, actual.iwNodes_ReadOnly.at(0))
	end
	
	operation testBuildBinding() is do
		var actual:PluginBinding init factory.createPluginBinding()

		actual.build
	
		assert(actual.iwPluginBinding.isVoid==false)
	end

	operation testBuildStartPoint_GlobalNotBound() is do
		var actual:StartPoint init factory.createStartPoint("theStartPoint",void)

		actual.build

		assert(actual.iwStartPoint.startPointType==StartPointType.global)	
	end
	
	operation testBuildStartPoint_LocalNotBound() is do
		var actual:StartPoint init factory.createStartPoint("theStartPoint",void)
		actual.local:=true

		actual.build

		assert(actual.iwStartPoint.startPointType==StartPointType.local)	
	end

	operation testBuildStartPoint_LocalBound() is do
		var actual:StartPoint init factory.createStartPoint("theStartPoint",void)
		var inBinding:InBinding init factory.createInBinding
		inBinding.startPoint:=actual
		actual.local:=true
		
		actual.build

		assert(actual.iwStartPoint.startPointType==StartPointType.bound)	
	end

	operation testBuildStartPoint_GlobalBound() is do
		var actual:StartPoint init factory.createStartPoint("theStartPoint",void)
		var inBinding:InBinding init factory.createInBinding
		inBinding.startPoint:=actual
		
		actual.build

		assert(actual.iwStartPoint.startPointType==StartPointType.bound)	
	end

	
	operation testBuildStartPoint_NoInOut() is do
		var actual:StartPoint init factory.createStartPoint("theStartPoint",void)
		actual.build
	
		assertIsNonVoidInstanceOf(IwStartPoint, actual.iwEntryNode)
		assertStringEqual("theStartPoint",actual.iwEntryNode.name)
	end

	@feature "FeaTransformStartPointResponsibilityStartPoint"
	operation testBuildStartPoint_InOut() is do
		var actual:StartPoint init factory.createStartPoint("theStartPoint","out theOutputName in theInputName")
		actual.build

		assertIsNonVoidInstanceOf(IwStartPoint, actual.iwNodes_ReadOnly.at(0))
		assertStringEqual("theStartPoint",actual.iwNodes_ReadOnly.at(0).name)
	
		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes_ReadOnly.at(1))
		assertStringEqual("theOutputName",actual.iwNodes_ReadOnly.at(1).name)
		
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes_ReadOnly.at(2))
		assertStringEqual("theInputName",actual.iwNodes_ReadOnly.at(2).name)
	end
	
	
	operation testBuildInBinding() is do
		var actual:InBinding init factory.createInBinding()

		actual.build
	
		assert(actual.iwInBinding.isVoid==false)
	end
	
	operation testBuildOutBinding() is do
		var actual:OutBinding init factory.createOutBinding()

		actual.build
	
		assert(actual.iwOutBinding.isVoid==false)
	end	

	operation testBuildNodeConnection_WithoutCondition() is do
		var actual:NodeConnection init factory.createNodeConnection()

		//build on demand
	
		assert(actual.iwNodeConnection.isVoid==false)
	end
	
	operation testBuildNodeConnection_WithCondition() is do
		var actual:NodeConnection init factory.createNodeConnection()
		actual.condition:=factory.createCondition("theCondition")

		//build on demand
	
		assert(actual.iwNodeConnection.conditionName=="theCondition")
	end	

	operation testURNmodelElement_NameOrPrefixId_Void() is do	
		var actual:Stub init factory.createStub
		actual.name:=void
		actual.id:="7"
		
		assertStringEqual("Stub_7",actual.nameOrPrefixId("Stub"))
	end
	
	operation testURNmodelElement_NameOrPrefixId_Empty() is do	
		var actual:Stub init factory.createStub
		actual.name:=""
		actual.id:="7"
		
		assertStringEqual("Stub_7",actual.nameOrPrefixId("Stub"))
	end
	
	operation testURNmodelElement_NameOrPrefixId_Name() is do	
		var actual:Stub init factory.createStub
		
		assertStringEqual("theStub",actual.nameOrPrefixId("theStub"))
	end
		
	
	//stle: later, test that container call components. Mayber always test two levels. i.e Root/UcmMap,UcmMap/Node,etc...
	//believe it requires stubs (mock not available)
	
	
	//stle: dry
	//stle: more verbrose on assertion
	operation assertIsNonVoidInstanceOf(expected:kermeta::language::structure::Class, actual:Object) is do
		assertWithMsg(actual.isVoid==false,"IsVoid-> expected:false actual:true")
		assertWithMsg(actual.isInstanceOf(expected),"IsInstanceOf-> expected:\""+expected.toString()+"\"actual:\""+actual.getMetaClass().toString()+"\"")
	end

	
	operation assertStringEqual(expected:String, actual:String) is do
		assertWithMsg(expected==actual,"StringEqual-> expected:\""+expected+"\"actual:\""+actual+"\"")
	end
	
}