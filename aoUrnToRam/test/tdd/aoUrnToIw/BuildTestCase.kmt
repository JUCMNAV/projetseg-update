package aoUrnToRam::Test;

require kermeta
require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/AoUrnTestFactory.kmt"
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/Build.kmt"

using kermeta::standard
using kermeta::kunit
using oneurn::urn
using oneurn::ucm::map
using oneurn::urncore
using intermediateWorkflow

using kermeta::language::structure

class AoUrnToIwBuildTestCase inherits TestCase
{
	attribute factory:AoUrnTestFactory

	method setUp() is do
		factory:=AoUrnTestFactory.new
	end

	@feature "FeaHandleUntaggedResponsibilityInActor"
	operation testBuildRespRef_NotInComponent() is do	
		var actual:RespRef init factory.createRespRefGeneric("theRespName",void,false)
		
		actual.build
		assert(actual.iwNodes.size==0)
	end

	@feature "FeaHandleUntaggedResponsibilityInActor"
	operation testBuildRespRef_InActorComponent() is do	
		var actual:RespRef init factory.createRespRefGeneric("theRespName",void,false)
		actual.contRef:=factory.createComponentRef("theActor",ComponentKind.Actor)
		
		actual.build
		assert(actual.iwNodes.size==0)
	end
	

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildPathNode_NoInOut() is do
		var actual:StartPoint init factory.createStartPoint(void)
		actual.build
	
		assert(actual.iwNodes.size==0)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildPathNode_In() is do
		var actual:StartPoint init factory.createStartPoint("in theInputName")
		actual.build
	
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes.one)
		assertStringEqual("theInputName",actual.iwNodes.one.name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildPathNode_Out() is do
		var actual:StartPoint init factory.createStartPoint("out theOutputName")
		actual.build
	
		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes.one)
		assertStringEqual("theOutputName",actual.iwNodes.one.name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildPathNode_InOut() is do
		var actual:StartPoint init factory.createStartPoint("out theOutputName in theInputName")
		actual.build
	
		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes.at(0))
		assertStringEqual("theOutputName",actual.iwNodes.at(0).name)
		
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes.at(1))
		assertStringEqual("theInputName",actual.iwNodes.at(1).name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildRespRef_NoInOut() is do
		var actual:RespRef init factory.createRespRef("theRespName",void)
		actual.build
	
		assertIsNonVoidInstanceOf(IwProcessingNode, actual.iwNodes.one)
		assertStringEqual("theRespName",actual.iwNodes.one.name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildEndPoint_NoInOut() is do
		var actual:EndPoint init factory.createEndPoint("theEndPoint",void)
		actual.build
	
		assertIsNonVoidInstanceOf(IwEndPoint, actual.iwNodes.one)
		assertStringEqual("theEndPoint",actual.iwNodes.one.name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildEndPoint_InOut() is do
		var actual:EndPoint init factory.createEndPoint("theEndPoint","out theOutputName in theInputName")
		actual.build
	
		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes.at(0))
		assertStringEqual("theOutputName",actual.iwNodes.at(0).name)
		
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes.at(1))
		assertStringEqual("theInputName",actual.iwNodes.at(1).name)
		
		assertIsNonVoidInstanceOf(IwEndPoint, actual.iwNodes.at(2))
		assertStringEqual("theEndPoint",actual.iwNodes.at(2).name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildUcmMap() is do
		var ucmMap:UCMmap init factory.createUcmMap("theUcmMapName")
		ucmMap.build()
	
		assertIsNonVoidInstanceOf(IwWorkflow, ucmMap.iwWorkflow)
		assertStringEqual("theUcmMapName",ucmMap.iwWorkflow.name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuildUnrSpec() is do
		var urnSpec:URNspec init factory.createUrnSpec
		urnSpec.build()
	
		assertIsNonVoidInstanceOf(IwModel, urnSpec.iwModel)
	end

	@feature "FeaTransformOrFork"
	operation testBuildOrFork_NoInOut() is do
		var actual:OrFork init factory.createOrFork("theOrFork",void)
		actual.build
	
		assertIsNonVoidInstanceOf(IwOrFork, actual.iwNodes.one)
		assertStringEqual("theOrFork",actual.iwNodes.one.name)
	end

	@feature "FeaTransformOrFork"
	operation testBuildOrFork_InOut() is do
		var actual:OrFork init factory.createOrFork("theOrFork","out theOutputName in theInputName")
		actual.build

		assertIsNonVoidInstanceOf(IwOrFork, actual.iwNodes.at(0))
		assertStringEqual("theOrFork",actual.iwNodes.at(0).name)
	
		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes.at(1))
		assertStringEqual("theOutputName",actual.iwNodes.at(1).name)
		
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes.at(2))
		assertStringEqual("theInputName",actual.iwNodes.at(2).name)
	end


	@feature "FeaTransformOrJoin"
	operation testBuildOrJoin_NoInOut() is do
		var actual:OrJoin init factory.createOrJoin(void)
		actual.build
	
		assert(0==actual.iwNodes.size)
	end

	@feature "FeaTransformOrJoin"
	operation testBuildOrJoin_InOut() is do
		var actual:OrJoin init factory.createOrJoin("out theOutputName in theInputName")
		actual.build

		assertIsNonVoidInstanceOf(IwOutput, actual.iwNodes.at(0))
		assertStringEqual("theOutputName",actual.iwNodes.at(0).name)
		
		assertIsNonVoidInstanceOf(IwInput, actual.iwNodes.at(1))
		assertStringEqual("theInputName",actual.iwNodes.at(1).name)
	end
	
	
	operation testBuildConcern() is do
		var concern:Concern init factory.createConcern("theConcern")
	
		assertIsNonVoidInstanceOf(IwConcern, concern.iwConcern)
		assertStringEqual("theConcern",concern.iwConcern.name)
	end
	
	operation testBuildWithoutConcern() is do
		var urnSpec:URNspec init factory.createUrnSpec
	
		assertIsNonVoidInstanceOf(IwConcern, urnSpec.iwWithoutConcern)
		assertStringEqual("WithoutConcern",urnSpec.iwWithoutConcern.name)
	end
	
	
	//stle: later, test that container call components. Mayber always test two levels. i.e Root/UcmMap,UcmMap/Node,etc...
	
	
	//stle: dry
	//stle: more verbrose on assertion
	operation assertIsNonVoidInstanceOf(expected:kermeta::language::structure::Class, actual:Object) is do
		assertWithMsg(actual.isVoid==false,"IsVoid-> expected:false actual:true")
		assertWithMsg(actual.isInstanceOf(expected),"IsInstanceOf-> expected:\""+expected.toString()+"\"actual:\""+actual.getMetaClass().toString()+"\"")
	end

	
	operation assertStringEqual(expected:String, actual:String) is do
		assertWithMsg(expected==actual,"StringEqual-> expected:\""+expected+"\"actual:\""+actual+"\"")
	end
	
}