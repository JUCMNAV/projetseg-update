package aoUrnToRam::Test;

require kermeta
require "platform:/resource/aoUrnToRam/metamodel/RAMStructural.ecore"
require "platform:/resource/aoUrnToRam/src/iwToRam/Build.kmt"
require "platform:/resource/aoUrnToRam/src/iwToRam/Link.kmt"

using kermeta::standard
using kermeta::kunit
using iw
using ramstructural

class IwToRamBuildTestCase inherits TestCase
{
	operation createWorkflow():IwWorkflow is do
		result:=IwWorkflow.new
	end

	operation createIwInput():IwInput is do
		var res:IwInput init IwInput.new
		res.name:="a"
		result:=res
	end
	
	operation createIwProcessingNode():IwProcessingNode is do
		var res:IwProcessingNode init IwProcessingNode.new
		res.name:="a"
		result:=res
	end
	
	operation createIwOutput():IwOutput is do
		var res:IwOutput init IwOutput.new
		res.name:="a"
		result:=res
	end

	operation testBuildInput() is do
		var actual:IwInput init createIwInput()
		actual.build()
		
		assert(actual.ramClasses.size==1)
		assert(actual.ramMappings.size==1)
		assertStringEqual("a"+"Input",actual.ramInput.name)
		assertStringEqual("|InputData",actual.ramInputMapping.sourceModelElement)
	end
	
	operation testBuildOut() is do
		var actual:IwOutput init createIwOutput()
		actual.build()
		
		assert(actual.ramClasses.size==2)
		var ramOutputData:Class init actual.ramClasses.at(0)
		assertIsNonVoidInstanceOf(Class,ramOutputData)
		assertStringEqual("a"+"Output",ramOutputData.name)
		
		var ramCustomizableSequence:Class init actual.ramClasses.at(1)
		assertIsNonVoidInstanceOf(Class,ramCustomizableSequence)
		assertStringEqual("a",ramCustomizableSequence.name)
	end

	operation testBuildProcessingNode() is do
		var actual:IwProcessingNode init createIwProcessingNode()
		actual.build()

		var ramCustomizableSequence:Class init actual.ramClasses.at(0)
		assertIsNonVoidInstanceOf(Class,ramCustomizableSequence)
		assertStringEqual("a",ramCustomizableSequence.name)
	end
	
	operation testBuildWorkflow() is do
		var actual:IwWorkflow init createWorkflow()
		actual.name:="a"
		actual.build()
		
		assertIsNonVoidInstanceOf(Aspect,actual.ramAspect)
		//stle: aspect is name of workflow for now, wait until steps get implemented
		assertStringEqual("a",actual.ramAspect.name)
		assertIsNonVoidInstanceOf(ClassDiagram,actual.ramAspect.structuralView)
		assertIsNonVoidInstanceOf(AspectInterface,actual.ramAspect.interface)
		
		assertIsNonVoidInstanceOf(Instantiation,actual.ramReactiveWorkflowInstantiation)
		assertStringEqual("ReactiveWorkflow",actual.ramReactiveWorkflowInstantiation.externalAspect)
	end

	operation testLinkWorkflow() is do
		var actual:IwWorkflow init createWorkflow()
		actual.build()
		actual.link()
		
		assert(actual.ramStructuralView.instantiations.size==1)
	end


	operation testLinkInputFromWorkflow() is do
		var actual:IwWorkflow init createWorkflow()
		
		var iwInput:IwInput init createIwInput()
		actual.nodes.add(iwInput)
		actual.build()
		actual.link()
		
		assert(actual.ramStructuralView.classes.size==1)
		assert(actual.ramReactiveWorkflowInstantiation.mappings.size==1)
		
		//stle: wrong implementation of mapping, |InputData can map to multiple ramInputClass
		
		//stle why passed before?, test both direction of asso?
		//stle: remove one
		assert(actual.ramReactiveWorkflowInstantiation.mappings.one().maps.exists{mappableElement|
			mappableElement==iwInput.ramInput})
		
	end

//stle: should we remove this test?	
	operation testLinkManyNodeFromWorkflow() is do
		var actual:IwWorkflow init createWorkflow()
		actual.nodes.add(createIwInput())
		2.times{i|actual.nodes.add(createIwProcessingNode())}
		actual.nodes.add(createIwOutput())
		
		actual.build()
		actual.link()
		
		assert(actual.ramStructuralView.classes.size==1+1+1+2)
	end

	
	//stle: more verbrose on assertion
	operation assertIsNonVoidInstanceOf(expected:kermeta::language::structure::Class, actual:Object) is do
		assertWithMsg(actual.isVoid==false,"IsVoid-> expected:false actual:true")
		assertWithMsg(actual.isInstanceOf(expected),"IsInstanceOf-> expected:\""+expected.toString()+"\"actual:\""+actual.getMetaClass().toString()+"\"")
	end

	
	operation assertStringEqual(expected:String, actual:String) is do
		assertWithMsg(expected==actual,"StringEqual-> expected:\""+expected+"\"actual:\""+actual+"\"")
	end
}