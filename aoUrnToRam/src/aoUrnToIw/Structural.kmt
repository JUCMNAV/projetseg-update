package oneurn;

require kermeta
require "http:///oneurn.ecore"
require "http:///intermediateWorkflow.ecore"

using kermeta::standard
using oneurn::urncore
using intermediateWorkflow

package urn{
	aspect class URNspec{
		reference iwModel: IwModel
		
		property readonly ucmMaps : seq UCMmap[0..*]
		getter is do
			//stle: DRY
			result:= urndef.specDiagrams.select{specDiagram|specDiagram.isInstanceOf(UCMmap)}
							            .collect{specDiagram|specDiagram.asType(UCMmap)}
		end
	}
}


package ucm{
package map{

	aspect class UCMmap{
		reference iwWorkflow: IwWorkflow
		
		property readonly pathNodes : seq PathNode[0..*]
		getter is do
			//stle: DRY
			//stle: refactor for reuse
			result:=nodes.select{node|node.isInstanceOf(PathNode)}
				 .collect{node|node.asType(PathNode)}
		end

		property readonly startPoints : seq StartPoint[0..*]
		getter is do
			//stle: DRY
			//stle: refactor for reuse
			result:=nodes.select{node|node.isInstanceOf(StartPoint)}
				 .collect{node|node.asType(StartPoint)}
		end
	}
	
	aspect class PathNode {
		reference iwNodes: IwNode[0..2]
		reference iwSuccs: IwNodeConnection[0..*]
	
		property readonly inOutExpression : InOutExpression
		getter is do
			var ramMetadata:Metadata init getRamMetadata()
			var inOutExpression:InOutExpression init InOutExpression.new
			inOutExpression.construct(if ramMetadata.isVoid then "" else ramMetadata.~value end)
			result:=inOutExpression
		end
		
		operation getRamMetadata():Metadata is do
			result:= metadata.select{n|n.name.toLowerCase()=="ram"}.one()
		end
		
		//stle: add caching
		property readonly succIwNode : IwNode
		getter is do
			if(succ.size==0) then
				result:=void
			else
				var target:PathNode init succ.one.target.asType(PathNode)
				if(target.iwNodes.size==0)then
					result:=target.succIwNode
				else
					result:=target.iwNodes.first
				end
			end
		end
	}
	
	aspect class RespRef {
		property readonly isSystemComponentRef : Boolean 
		getter is do
			result:=false
			var component:Component
			if(contRef.isVoid==false) then
				component?=contRef.contDef
				if(component.isVoid==false) then
					result:=component.kind==ComponentKind.Object and component.name.toLowerCase=="system"
				end
			end			
		end	
	
		method getRamMetadata():Metadata is do
			result:= respDef.metadata.select{n|n.name.toLowerCase()=="ram"}.one()
		end
	}
	
	aspect class StartPoint {
		reference iwStartNode:IwNode
	}
	
	
	class InOutExpression
	{
		attribute out:String
		attribute in:String
		attribute outKeyword:String
		attribute inKeyword:String
		
		property readonly hasOut : Boolean 
		getter is do
			result := not out.isVoid
		end
			
		property readonly hasIn : Boolean 
		getter is do
			result := not in.isVoid
		end	
	
		operation construct(expression:String) is do
			outKeyword:="out "
			inKeyword:="in "
		
		//stle: need validation: RegEx would be better
			if(expression.toLowerCase().indexOf(outKeyword)==0) then
				expression:=expression.substring(outKeyword.size(), expression.size())		
				var index:Integer init expression.indexOf(" ")	
						
				if(index==-1) then
					out:=expression
					expression:=""			
				else
					out:=expression.substring(0, index)
					expression:=expression.substring(index+1, expression.size())				
				end
			end	
			if(expression.toLowerCase().indexOf(inKeyword)==0) then
				in:=expression.substring(inKeyword.size(), expression.size())
			end
			
		end
	} 
}	
}