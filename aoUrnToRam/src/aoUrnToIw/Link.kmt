package oneurn;

require "platform:/resource/aoUrnToRam/src/aoUrnToIw/Structural.kmt"

using kermeta::standard
using oneurn::urncore
using intermediateWorkflow

package urn{

	aspect class URNspec{
		operation link() is do
			linkChildren
		end
		
		operation linkChildren() is do
			ucmMaps.each{ucmMap|ucmMap.link(self)}
		end

		operation getIwConcern(concern:Concern):IwConcern is do
			if(concern.isVoid) then
				result:=iwWithoutConcern
			else
				result:=concern.iwConcern
			end
		end
		
		operation addIwWorflowRefact(concern:Concern,iwWorkflow:IwWorkflow) is do
			var iwConcern:IwConcern init getIwConcern(concern)

			if(iwModel.concerns.contains(iwConcern)==false)then
				iwModel.concerns.add(iwConcern)
			end
			iwConcern.workflows.add(iwWorkflow)
		end
	}
}	

package ucm{
package map{

	aspect class UCMmap{
		operation link(urnSpec:URNspec) is do
			urnSpec.addIwWorflowRefact(concern,iwWorkflow)
			linkChildren
		end
		
		operation linkChildren() is do
			pathNodes.each{pathNode|pathNode.link}
			
			addNodes
			addNodeConnections
			addStartNodes
		end

		operation addNodes() is do
			pathNodes.each{pathNode|
				iwWorkflow.nodes.addAll(pathNode.iwNodes)
			}
		end
		
		operation addNodeConnections() is do
			pathNodes.each{pathNode|
				iwWorkflow.nodeConnections.addAll(pathNode.iwSuccs) //stle: namming is not intuitive
			}
		end
		
		operation addStartNodes() is do
			iwWorkflow.startNodes.addAll(
				startPoints.collect{startPoint|startPoint.iwStartNode}
			)	
		end
	}
	
	aspect class PathNode {
		operation link() is do
			linkInternal
			linkSuccs
		end

		operation linkInternal() is do
			var numOfInternalLinks:Integer init iwNodes.size-1 //-1 because last internal node has no outcoming internal link
			numOfInternalLinks.times{i|
				linkTwoNodes(iwNodes.at(i),iwNodes.at(i+1),void)
			}
		end
		
		operation linkSuccs() is do
			if(iwNodes.isEmpty==false) then
				var source:IwNode init iwNodes.last
		
				succ.each{theSucc|
					var nodeConnection:NodeConnection init theSucc.asType(NodeConnection)
					linkTwoNodes(source,nodeConnection.IwSingleTarget,nodeConnection.IwConditionName)
				}
			end
		end
		
		//IwNodeConnection is an association class;thus, it is built in the linking process
		operation linkTwoNodes(source:IwNode, target:IwNode, conditionName:String) is do
			var connection:IwNodeConnection init IwNodeConnection.new
			connection.source:=source
			connection.target:=target
			connection.conditionName:=conditionName
			iwSuccs.add(connection)
		end
	}
	
	aspect class StartPoint {
		method link() is do
			super()
			if(iwNodes.empty) then
				iwStartNode:=succ.one.asType(NodeConnection).IwSingleTarget
			else
				iwStartNode:=iwNodes.first
			end
		end
	}
}
}

