package oneurn;

require "platform:/resource/aoUrnToRam/src/aoUrnToIw/Structural.kmt"

using kermeta::standard
using oneurn::urncore
using intermediateWorkflow

package urn{

	aspect class URNspec{
		operation link() is do
			ucmMaps.each{ucmMap|
				ucmMap.link
			}
			
			addWorkflows
		end
		
		operation addWorkflows() is do
			ucmMaps.each{ucmMap|
				iwModel.workflows.add(ucmMap.iwWorkflow)
			}
		end
	}
}	

package ucm{
package map{

	aspect class UCMmap{
		operation link() is do
			pathNodes.each{pathNode|pathNode.link}
			
			addNodes
			addNodeConnections
			addStartNodes
		end
		
		operation addNodes() is do
			pathNodes.each{pathNode|
				iwWorkflow.nodes.addAll(pathNode.iwNodes)
			}
		end
		
		operation addNodeConnections() is do
			pathNodes.each{pathNode|
				iwWorkflow.nodeConnections.addAll(pathNode.iwSuccs) //stle: namming is not intuitive
			}
		end
		
		operation addStartNodes() is do
			iwWorkflow.startNodes.addAll(
				startPoints.collect{startPoint|startPoint.iwStartNode}
			)	
		end
	}
	
	aspect class PathNode {
		operation link() is do
			linkInternal
			linkSuccs
		end

		operation linkInternal() is do
			var numOfInternalLinks:Integer init iwNodes.size-1 //-1 because last internal node has no outcoming internal link
			numOfInternalLinks.times{i|
				linkTwoNodes(iwNodes.at(i),iwNodes.at(i+1))
			}
		end
		
		operation linkSuccs() is do
			if(iwNodes.size>0 and succIwNode.isVoid==false) then
				linkTwoNodes(iwNodes.last,succIwNode)
			end
		end
		
		operation linkTwoNodes(source:IwNode, target:IwNode) is do
			var connection:IwNodeConnection init IwNodeConnection.new
			connection.source:=source
			connection.target:=target
			iwSuccs.add(connection)
		end
	}
	
	aspect class StartPoint {
		method link() is do
			super()
			if(iwNodes.size>0) then
				iwStartNode:=iwNodes.first
			else
				iwStartNode:=succIwNode
			end
		end
	}
}
}

