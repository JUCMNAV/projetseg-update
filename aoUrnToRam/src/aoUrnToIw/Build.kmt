package oneurn;

require "platform:/resource/aoUrnToRam/src/aoUrnToIw/Structural.kmt"

using kermeta::standard
using oneurn::urncore
using intermediateWorkflow

package urn{
	aspect class URNspec{
		operation build() is do
			ucmMaps.each{ucmMap|ucmMap.build}
			iwModel:=IwModel.new
		end
	}
}

package ucm{
package map{

	aspect class UCMmap{
		operation build() is do
			pathNodes.each{pathNode|pathNode.build}
			pathNodes.each{pathNode|pathNode.buildNodeConnections}

			iwWorkflow:=IwWorkflow.new
			iwWorkflow.name:=nameOrPrefixId("Workflow")
		end
	}
	
	aspect class PathNode {
		operation build() is do
			buildIwOutputNode
			buildIwInputNode
			uncacheIwNodes
		end
	
		operation buildIwOutputNode() is do
			if(inOutExpression.hasOut) then
				iwOutput:=IwOutput.new
				iwOutput.name:=inOutExpression.out
			end
		end
		
		operation buildIwInputNode() is do
			if(inOutExpression.hasIn) then
				iwInput:=IwInput.new
				iwInput.name:=inOutExpression.in
			end
		end

		//stle:test later
		operation buildNodeConnections() is do
			//stle: ordering in build is undesirable
			if(iwNodes_ReadOnly.isEmpty==false) then
				succ.each{nodeConnection|nodeConnection.asType(NodeConnection).build}
			end
		end
	}
	
	aspect class RespRef {
		method build() is do
			super
			if(inOutExpression.hasOut==false and inOutExpression.hasIn==false) then
				if(isSystemComponentRef) then
					iwCustomizableNode:=IwCustomizableNode.new
					if(respDef.name.isVoid or respDef.name=="") then
						iwCustomizableNode.name:=nameOrPrefixId("CustomizableNode")
					else
						iwCustomizableNode.name:=respDef.name
					end 
					
				end
			end 
		end
	}
	
	aspect class StartPoint {
		method build() is do
			super
			iwStartPoint:=IwStartPoint.new
			iwStartPoint.name:=nameOrPrefixId("StartPoint")
			
			if(inBindings.size>0) then
				iwStartPoint.startPointType:="bound"
			else
				if(local==true) then
					iwStartPoint.startPointType:="local"
				else
					iwStartPoint.startPointType:="global"
				end
			end
		end
	}
	aspect class EndPoint {
		method build() is do
			super
			iwEndPoint:=IwEndPoint.new
			iwEndPoint.name:=nameOrPrefixId("EndPoint")
		end
	}
	
	aspect class OrFork {
		method build() is do
			super
			iwOrFork:=IwOrFork.new
			iwOrFork.name:=nameOrPrefixId("OrFork")
		end
	}
	
	aspect class Stub {
		method build() is do
			bindings.each{pluginBinding|pluginBinding.build}

			//Ignore ram expression on stubs
			//Stubs can have many in-paths and out-paths; thus, no obvious place to insert the outNode/inNode
			//Moreover, it complicates the plugin bindings since inBinding and outBinding has reference
			//to the NodeConnection. Inserting outNode/inNod on stubs will prevent these NodeConnection from
			//being directly connected to the stub  
			buildIwStub
		end
	
		operation buildIwStub() is do
			iwStub:=IwStub.new
			iwStub.name:=nameOrPrefixId("Stub")
		end
	}

	aspect class PluginBinding {
		operation build() is do
			iwPluginBinding:=IwPluginBinding.new
			in.each{inBinding|inBinding.build}
			out.each{outBinding|outBinding.build}
		end
	}
	
	aspect class InBinding {
		operation build() is do
			iwInBinding:=IwInBinding.new
		end
	}

	aspect class OutBinding {
		operation build() is do
			iwOutBinding:=IwOutBinding.new
		end
	}
	
	aspect class NodeConnection{
		operation build() is do
			iwNodeConnection:=IwNodeConnection.new
			iwNodeConnection.conditionName:=conditionLabel
		end
	}
		
	
}
}

