package oneurn;

require "platform:/resource/aoUrnToRam/src/aoUrnToIw/Structural.kmt"

using kermeta::standard
using oneurn::urncore
using intermediateWorkflow

package urn{
	aspect class URNspec{
		operation build() is do
			ucmMaps.each{ucmMap|ucmMap.build}
			iwModel:=IwModel.new
		end
	}
}

package ucm{
package map{

	aspect class UCMmap{
		operation build() is do
			pathNodes.each{pathNode|pathNode.build}

			iwWorkflow:=IwWorkflow.new
			iwWorkflow.name:=name
		end
	}
	
	aspect class PathNode {
		operation build() is do	
			if(inOutExpression.hasOut) then
				addIwOutputNode
			end 
			if(inOutExpression.hasIn) then
				addIwInputNode
			end
		end
	
		operation addIwInputNode() is do
			var iwInputNode:IwInput init IwInput.new
			iwInputNode.name:=inOutExpression.in
			iwNodes.add(iwInputNode)
		end
		
		operation addIwOutputNode() is do
			var iwOutputNode:IwOutput init IwOutput.new
			iwOutputNode.name:=inOutExpression.out
			iwNodes.add(iwOutputNode)
		end
	}
	
	
	aspect class RespRef {
		method build() is do
			super()
			if(inOutExpression.hasOut==false and inOutExpression.hasIn==false) then
				if(isSystemComponentRef) then
					addIwCustomizableNode
				end
			end 
		end
		
		operation addIwCustomizableNode() is do
			var IwCustomizableNode:IwCustomizableNode init IwCustomizableNode.new
			IwCustomizableNode.name:=respDef.name
			iwNodes.add(IwCustomizableNode)
		end
	}
	
	aspect class EndPoint {
		method build() is do
			super()
			addIwEndPoint
		end

		operation addIwEndPoint() is do
			var iwEndpoint:IwEndPoint init IwEndPoint.new
			iwEndpoint.name:=name
			iwNodes.add(iwEndpoint)
		end
	}
	
	aspect class OrFork {
		method build() is do
			addIwOrFork
			super()
		end

		//stle: dry
		operation addIwOrFork() is do
			var iwOrFork:IwOrFork init IwOrFork.new
			iwOrFork.name:=name
			iwNodes.add(iwOrFork)
		end
	}
	
}
}

