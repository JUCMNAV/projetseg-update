package aoUrnToRam;

require kermeta
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/Transformation.kmt"
require "platform:/resource/aoUrnToRam/src/iwToRam/Transformation.kmt"
require "platform:/resource/aoUrnToRam/src/iwToStepView/IwModel.kmt"

require "platform:/resource/aoUrnToRam/metamodel/testos.ecore"
using testos

using kermeta::persistence
using kermeta::standard
using kermeta::io
using oneurn::urn
using intermediateWorkflow
using ramstructural



class AoUrnToRamTransformation
{
	//stle:temp
	operation howToRemove() is do
		var repository:ModelRepository init ModelRepository.new
		
		var a:A init A.new
		var b:B init B.new
		b.a:=a
		var c:C init C.new
		c.a:=a
		c.b:=b
		
		kermeta::kunit::Assert.new.assert(b.c==c)
		kermeta::kunit::Assert.new.assert(c.b==b)
		
		var c2:C init C.new
		c2.a:=a
		c2.b:=b
		
		kermeta::kunit::Assert.new.assert(c.b.isVoid)
		kermeta::kunit::Assert.new.assert(b.c==c2)
		kermeta::kunit::Assert.new.assert(c2.b==b)

		
		
		
		repository.save(a,"platform:/resource/aoUrnToRam/test/integration/model/testos.xmi","platform:/resource/aoUrnToRam/metamodel/testos.ecore")
	end

	operation transform(source:String,destination:String, optional_intermediate:String) is do
		//stle: temp hardcoded
		var tempDestinationPath:String init "C:\\Users\\S\\Files\\A2011\\Project\\Source\\aoUrnToRam\\test\\integration\\model\\RamWorkspace\\"
		
		registerMetamodels
		
		extern aoUrnToRam::javaExternalCall::File.removeDirectory(tempDestinationPath)
		
		var repository:ModelRepository init ModelRepository.new
			
		var urnSpec:URNspec 
		urnSpec?=repository.load(source)
		
		var iwModel:IwModel init urnSpec.toIw
		
		if(optional_intermediate.isVoid==false)then
			repository.save(iwModel,optional_intermediate,"platform:/resource/aoUrnToRam/metamodel/intermediateWorkflow.ecore")
		end
		
		iwModel.toRam.each{ramAspect|
			repository.save(ramAspect,Path.new.combine(destination,ramAspect.workspacePath)+".xmi","platform:/resource/aoUrnToRam/metamodel/RAMStructural.ecore")
		}
		
		iwModel.toStepView.each{stepView|StepViewToPng(stepView,tempDestinationPath)}
	end

	operation StepViewToPng(stepView:StepView,destination:String) is do
		//stle: temp: hardcode paths
		var dotFilePath:String init "\"C:\\Users\\S\\Files\\A2011\\Project\\Source\\aoUrnToRam\\thridParty\\Graphviz2.26.3\\bin\\dot.exe\""
		var windowsWorkspacePath:String init stepView.workspacePath.replace("/","\\") 

//stle: remove that and provide a proper api	
		stdio.writeln("---")
		stdio.writeln(stepView.dot)
		 
	    extern aoUrnToRam::javaExternalCall::CommandLine.exe(dotFilePath+" -Tpng -o\""+destination+windowsWorkspacePath+".png\"",stepView.dot)
	end
	
	
	operation registerMetamodels() is do
		var repository : EMFRepository init EMFRepository.new
		repository.registerEcoreFile("platform:/resource/aoUrnToRam/metamodel/oneurn.ecore")
		repository.registerEcoreFile("platform:/resource/aoUrnToRam/metamodel/intermediateWorkflow.ecore")
	end
}

class ModelRepository
{
    operation load(uri : String) : Object is do
     	var repository : EMFRepository init EMFRepository.new 
    	var resource : Resource init repository.getResource(uri)
    	resource.load
    	result:=resource.one
    end

    operation save(model: Object, modelUri : String, metamodelUri: String) is do
    	fileDoesNotExistWorkAround(modelUri)
    
		var repository : EMFRepository init EMFRepository.new
    	var resource : Resource init repository.createResource(modelUri,metamodelUri)
    	resource.add(model)
    	resource.save()
    end
    
    operation fileDoesNotExistWorkAround(modelUri:String) is do
		FileIO.new.writeTextFile(modelUri, "")
    end
}




