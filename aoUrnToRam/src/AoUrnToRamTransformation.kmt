package aoUrnToRam;

require kermeta
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/Transformation.kmt"
require "platform:/resource/aoUrnToRam/src/iwToRam/Transformation.kmt"

using kermeta::persistence
using kermeta::standard
using oneurn::urn
using intermediateWorkflow
using ramstructural

class AoUrnToRamTransformation
{
	operation transform(source:String,destination:String, optional_intermediate:String) is do
		var repository:ModelRepository init ModelRepository.new
	
		var urnSpec:URNspec 
		urnSpec?=repository.load(source)
		
		var iwModel:IwModel init urnSpec.toIw
		if(optional_intermediate.isVoid==false)then
			repository.save(iwModel,optional_intermediate,"http:///intermediateWorkflow.ecore")
		end
		
		var ramAspect:Aspect init iwModel.toRam
		repository.save(ramAspect,destination,"platform:/resource/aoUrnToRam/metamodel/RAMStructural.ecore")
	end
}

class ModelRepository
{
     operation load(uri : String) : Object is do
     	var repository : EMFRepository init EMFRepository.new 
    	var resource : Resource init repository.getResource(uri)
    	resource.load
    	result:=resource.one
    end

    operation save(model: Object, modelUri : String, metamodelUri: String) is do
		var repository : EMFRepository init EMFRepository.new
    	var resource : Resource init repository.createResource(modelUri,metamodelUri)
    	resource.add(model)
    	resource.save()
    end
}




