package aoUrnToRam;

require kermeta
require "http:///iw.ecore"
require "platform:/resource/aoUrnToRam/src/iwToRam/Transformation.kmt"
require "platform:/resource/aoUrnToRam/metamodel/RAMStructural.ecore"

using kermeta::persistence
using kermeta::standard
using iw
using ramstructural

class AoUrnToRamTransformation
{
	operation transform(source:String,destination:String, outputIntermediateWorkflow:Boolean) is do
//		var repository:ModelRepository<IwModel> init ModelRepository<IwModel>.new
		var model : IwModel init ModelRepository<IwModel>.new.load(source)

//		var repository2:ModelRepository<Aspect> init ModelRepository<Aspect>.new
		ModelRepository<Aspect>.new.save(model.toRam(),destination,"platform:/resource/aoUrnToRam/metamodel/RAMStructural.ecore")
	end
}

//stle: try to use multiple inheritance. Then, package so, it can be reused
class ModelRepository<T>
{
     operation load(uri : String) : T is do
     	var repository : EMFRepository
     	repository := EMFRepository.new
    	var resource : Resource init repository.getResource(uri)
    	resource.load
    	result ?= resource.one
    end

    operation save(model: T, modelUri : String, metamodelUri: String) is do
    	var repository : EMFRepository
    	repository := EMFRepository.new
    	var resource : Resource init repository.createResource(modelUri,metamodelUri)
    	resource.add(model)
    	resource.save()
    end
}




