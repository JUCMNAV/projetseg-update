package intermediateWorkflow;

require kermeta
require "platform:/resource/aoUrnToRam/metamodel/intermediateWorkflow.ecore"
require "platform:/resource/aoUrnToRam/src/iwToStepView/StepView.kmt"

using kermeta::standard

aspect class IwNode {
	operation appendVertex(stepView:StepView) is do
		stepView.appendLine("")
		stepView.append("        ")  appendId(stepView) stepView.appendLine("[")
		appendLineStyle(stepView)
		stepView.appendLine("            label=")
		stepView.appendLine("            <<table border=\"0\" cellborder=\"0\" cellpadding=\"0\" cellspacing=\"0\">")
		stepView.appendLine("                <tr>")
		stepView.append("                    <td cellpadding=\"3\">") stepView.append(getImageName) stepView.appendLine("</td>")
		stepView.append("                    <td>") stepView.append(name) stepView.appendLine("</td>")
		stepView.appendLine("                </tr>")
		stepView.appendLine("            </table>>")
		stepView.appendLine("        ]")
	end
	
	operation appendVertex_OtherStep(stepView:StepView) is do
		stepView.appendLine("")
		stepView.append("        ")  
		appendId(stepView) 
		stepView.append("[label=")
		stepView.append(dotEscape(step.name+"/"+name)) 
		stepView.appendLine(",style=dotted]")
	end
	
	operation appendEdges(stepView:StepView) is do
		succs.each{nodeConnection|
			stepView.append("        ") appendSourcePort(stepView,nodeConnection) stepView.append("->") nodeConnection.target.appendTargetPort(stepView,nodeConnection)
			if(nodeConnection.conditionName.isVoid==false) then
				stepView.append("[label=\"") stepView.append(nodeConnection.conditionName) stepView.append("\"]")
			end
			stepView.appendLine("")
		}
	end
	
	operation appendFirstVerticesFromNextStep(stepView:StepView) is do
		succs.each{nodeConnection|
			if(nodeConnection.target.step!=step) then
				nodeConnection.target.appendVertex_OtherStep(stepView)
			end
		}
	end

	operation appendId(stepView:StepView) is do
		stepView.append(name)
	end
	
	//virtual
	operation appendBindings(stepView:StepView) is do
		//default: do nothing
	end
	
	//virtual
	operation appendSourcePort(stepView:StepView,nodeConnection:IwNodeConnection) is do
		appendId(stepView)
	end
	
	//virtual
	operation appendTargetPort(stepView:StepView,nodeConnection:IwNodeConnection) is do
		appendId(stepView)
	end
	
	//virtual
	operation getImageName():String is do
		result:=""
	end
	
	//virtual
	operation appendLineStyle(stepView:StepView) is do
		//default: do nothing		
	end
	
	//virtual
	operation appendPluginFromDifferentConcern(stepView:StepView) is do
		//default: do nothing		
	end
	
	operation appendLineStyleIsFilled(stepView:StepView) is do
		stepView.appendLine("            style=filled,")		
	end
	
	//stle: must be applied everywhere, except in html-like label where html escaping must be applied
	operation dotEscape(toEscape:String):String is do
		result:=toEscape.replace("\\","\\\\")
		result:=result.replace("\"","\\\"")
		result:="\""+result+"\""
	end
}

aspect class IwInput
{
	method getImageName():String is do
		result:="I"
	end
}

aspect class IwStartPoint{
	method appendVertex(stepView:StepView) is do
		//do not display StartPoint
	end
	
	method appendEdges(stepView:StepView) is do
		//do not display StartPoint
	end
	
	method appendFirstVerticesFromNextStep(stepView:StepView) is do
		//do not display StartPoint
	end
	
	method appendBindings(stepView:StepView) is do
		var isBindingsToStubFromOtherConcerPlaceholderAlreadyAppended:Boolean init false //stle: refact this hack
		inBindings.each{inBinding|
			if(inBinding.isInboundStubInSameConcern) then
				inBinding.appendBinding(stepView)
			else
				if(isBindingsToStubFromOtherConcerPlaceholderAlreadyAppended==false) then
					inBinding.appendBindingToStubsFromOtherConcernsPlaceholder(stepView)
					isBindingsToStubFromOtherConcerPlaceholderAlreadyAppended:=true
				end
			end
		}
	end
}

aspect class IwCustomizableNode
{
	method appendLineStyle(stepView:StepView) is do
		appendLineStyleIsFilled(stepView)		
	end
	
	method getImageName():String is do
		result:="X"
	end
}

aspect class IwOutput
{
	method getImageName():String is do
		result:="O"
	end
}

aspect class IwEndPoint
{
	method getImageName():String is do
		result:="E"
	end
	
	method appendBindings(stepView:StepView) is do
		var isBindingsToStubFromOtherConcerPlaceholderAlreadyAppended:Boolean init false //stle: refact this hack
		outBindings.each{outBinding|
			if(outBinding.isOutboundStubInSameConcern) then
				outBinding.appendBinding(stepView)
			else
				if(isBindingsToStubFromOtherConcerPlaceholderAlreadyAppended==false) then
					outBinding.appendBindingToStubsFromOtherConcernsPlaceholder(stepView)
					isBindingsToStubFromOtherConcerPlaceholderAlreadyAppended:=true
				end
			end
		}
	end
}

aspect class IwOrFork
{
	method appendLineStyle(stepView:StepView) is do
		appendLineStyleIsFilled(stepView)		
	end

	method getImageName():String is do
		result:="Or"
	end
}

aspect class IwStub {
	method getImageName():String is do
		result:="S"
	end
	
	method appendVertex(stepView:StepView) is do
		stepView.appendLine("")
		stepView.append("    ") appendId(stepView) stepView.appendLine("[")
		stepView.appendLine("        shape=plaintext,")
		stepView.appendLine("        label=")
		stepView.appendLine("        <<table border=\"0\" cellborder=\"1\" cellpadding=\"0\" cellspacing=\"0\" >")
		stepView.appendLine("            <tr><td>")
		stepView.appendLine("                <table border=\"0\" cellborder=\"1\" cellpadding=\"0\" cellspacing=\"0\" >")
		stepView.appendLine("                    <tr>")
		stepView.appendLine("                        <td port=\"in1\" height=\"10\"></td>")
		stepView.appendLine("                    </tr>")
		stepView.appendLine("                </table>")
		stepView.appendLine("            </td></tr>")
		stepView.appendLine("            <tr><td>")
		stepView.appendLine("                <table border=\"1\" cellborder=\"0\" cellpadding=\"0\" cellspacing=\"0\" >")
		stepView.appendLine("                    <tr>")
		stepView.append("                        <td>") stepView.append(getImageName) stepView.appendLine("</td>")
		stepView.append("                        <td>") stepView.append(name) stepView.appendLine("</td>")
		stepView.appendLine("                    </tr>")
		stepView.appendLine("                </table>")
		stepView.appendLine("            </td></tr>")
		stepView.appendLine("            <tr><td>")
		stepView.appendLine("                <table border=\"0\" cellborder=\"1\" cellpadding=\"0\" cellspacing=\"0\" >")
		stepView.appendLine("                    <tr>")
		succs.size.times{i|
			stepView.append("                        <td port=\"out") stepView.append((i+1).toString) stepView.appendLine("\" height=\"10\"></td>")
		}
		stepView.appendLine("                    </tr>")
		stepView.appendLine("                </table>")
		stepView.appendLine("            </td></tr>")
		stepView.appendLine("        </table>>")
		stepView.appendLine("    ]")
		stepView.appendLine("    ")
	end
	
	method appendSourcePort(stepView:StepView,nodeConnection:IwNodeConnection) is do
		appendId(stepView) stepView.append(":out1")
	end
	
	method appendTargetPort(stepView:StepView,nodeConnection:IwNodeConnection) is do
		appendId(stepView) stepView.append(":in1")
	end
	
	method appendPluginFromDifferentConcern(stepView:StepView) is do
		if(workflow.concern!=pluginWorkflow.concern) then
			pluginWorkflow.appendWorkflowPre_DifferentConcern(stepView)
			staticPluginBinding.inBindings.each{inBinding|inBinding.pluginStartPoint.succs.one.target.appendVertex_OtherStep(stepView)}
			staticPluginBinding.outBindings.each{outBinding|outBinding.pluginEndPoint.appendVertex_OtherStep(stepView)}
			pluginWorkflow.appendWorkflowPost_DifferentConcern(stepView)
			
			staticPluginBinding.inBindings.each{inBinding|inBinding.appendBinding(stepView)}
			staticPluginBinding.outBindings.each{outBinding|outBinding.appendBinding(stepView)}
		end
	end
	
	//stle:dry
	property readonly staticPluginBinding : IwPluginBinding
	getter is do
		//stle:Single again
		result:=pluginBindings.one
	end
	
	property readonly pluginWorkflow : IwWorkflow
	getter is do
		//The existence of a pluginBinding implies the existance of at least one pluginStartPoint
		result:=staticPluginBinding.inBindings.one.pluginStartPoint.workflow
	end
}

aspect class IwInBinding{
	operation appendBinding(stepView:StepView) is do
		stepView.append("    ")
		pluginBinding.stub.appendTargetPort(stepView,stubEntry)
		stepView.append("->")
		//stle: single again
		pluginStartPoint.succs.one.target.appendTargetPort(stepView,pluginStartPoint.succs.one)
		stepView.appendLine("[style=dotted,arrowhead=onormal]")
	end

	//stle:dry
	operation appendBindingToStubsFromOtherConcernsPlaceholder(stepView:StepView) is do
		stepView.append("    ")
		stepView.appendStubsFromOtherConcernsPlaceholder
		stepView.append("->")
		//stle: single again
		pluginStartPoint.succs.one.target.appendTargetPort(stepView,pluginStartPoint.succs.one)
		stepView.appendLine("[style=dotted,arrowhead=onormal]")
	end
	
	//stle: dry with linkStep
	property readonly isInboundStubInSameConcern : Boolean
	getter is do
		result:=pluginStartPoint.workflow.concern==pluginBinding.stub.workflow.concern
	end
}

aspect class IwOutBinding{
	operation appendBinding(stepView:StepView) is do
		stepView.append("    ")
		pluginEndPoint.appendSourcePort(stepView,void)
		stepView.append("->")
		pluginBinding.stub.appendSourcePort(stepView,stubExit)
		stepView.appendLine("[style=dotted,arrowhead=onormal]")
	end

	//stle:dry	
	operation appendBindingToStubsFromOtherConcernsPlaceholder(stepView:StepView) is do
		stepView.append("    ")
		pluginEndPoint.appendSourcePort(stepView,void)
		stepView.append("->")
		stepView.appendStubsFromOtherConcernsPlaceholder
		stepView.appendLine("[style=dotted,arrowhead=onormal]")
	end
	
	//stle: dry with linkStep
	property readonly isOutboundStubInSameConcern : Boolean
	getter is do
		result:=pluginEndPoint.workflow.concern==pluginBinding.stub.workflow.concern
	end
}
