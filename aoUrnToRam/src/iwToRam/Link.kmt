package intermediateWorkflow;

require kermeta
require "platform:/resource/aoUrnToRam/src/iwToRam/Structural.kmt"

using kermeta::standard
using kermeta::utils
using ramstructural

aspect class IwModel {
	operation link() is do
		workflows.each{workflow|
			workflow.link
		}
		
		addAspects
	end
	
	operation addAspects() is do
		workflows.select{workflow|workflow.ramAspect.structuralView.classes.size>0}
				 .each{workflow|ramAspects.add(workflow.ramAspect)}
	end
}

aspect class IwWorkflow {
	operation link() is do
		addClasses
		addInstantiations
		linkNodeConnections
	end

	operation linkNodeConnections() is do
		nodeConnections.each{nodeConnection|nodeConnection.link(self)}
	end

	
	operation addClasses() is do
		nodes.each{node|
			node.ramClasses_PerSourceModelElement.values.each{ramClass|
				ramStructuralView.classes.add(ramClass)
			}
		}
	end
	
	operation addInstantiations() is do
		ramStructuralView.instantiations.add(ramReactiveWorkflowInstantiation)
		addReactiveWorkflowMappings
	end
	
	operation addReactiveWorkflowMappings() is do
		var mappings: Hashtable<String, Mapping> init Hashtable<String, Mapping>.new 
		
		nodes.each{node|
			node.ramClasses_PerSourceModelElement.keys.each{sourceModelElement|
				var ramClass:Class init node.ramClasses_PerSourceModelElement.getValue(sourceModelElement) 
				getMapping(mappings,sourceModelElement).maps.add(ramClass)
			}
		}
	end
	
	operation getMapping(mappings: Hashtable<String, Mapping>,sourceModelElement:String):Mapping is do
		if(mappings.containsKey(sourceModelElement)==false) then
			var mapping:Mapping init Mapping.new
			mapping.sourceModelElement:=sourceModelElement
			mappings.put(sourceModelElement,mapping)
			ramReactiveWorkflowInstantiation.mappings.add(mapping)
		end
		result:=mappings.getValue(sourceModelElement)
	end
	
	
	
	
	operation addRamClass(ramClass:Class) is do
		ramStructuralView.classes.add(ramClass)
	end
	
	operation mapRamClass(sourceModelElement:String,ramClass:Class) is do
		//stle:single again
		var mapping:Mapping init ramReactiveWorkflowInstantiation.mappings.select
								{mapping|mapping.sourceModelElement==sourceModelElement}.one  
		if(mapping.isVoid) then
			mapping:=Mapping.new
			mapping.sourceModelElement:=sourceModelElement
			ramReactiveWorkflowInstantiation.mappings.add(mapping)
		end
		mapping.maps.add(ramClass)
	end
}

aspect class IwNodeConnection {
	operation link(workflow:IwWorkflow) is do
		if(ramCondition.isVoid==false) then
			workflow.addRamClass(ramCondition)
			workflow.mapRamClass("Condition",ramCondition)
		end
	end
}

