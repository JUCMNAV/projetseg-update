package intermediateWorkflow;

require kermeta
require "platform:/resource/aoUrnToRam/metamodel/intermediateWorkflow.ecore"
require "platform:/resource/aoUrnToRam/metamodel/RamStructuralExtension.kmt"

using kermeta::standard
using kermeta::utils
using ramstructural

aspect class IwModel {
	reference ramAspects:Aspect[0..*]
}

aspect class IwStep {
	reference ramAspect:Aspect
	reference ramReactiveWorkflowInstantiation:Instantiation
	
	property readonly ramStructuralView : ClassDiagram
	getter is do
		result := ramAspect.structuralView
	end
}

aspect class IwNode {
	reference ramClasses_PerSourceModelElement: Hashtable<String, Class>

	property INPUT_SUFFIX : String getter is do result := "Input" end
	property OUTPUT_SUFFIX : String getter is do result := "Output" end

	property INPUT_DATA : String getter is do result := "|InputData" end
	property CUSTOMIZABLE_NODE : String getter is do result := "|CustomizableNode" end
	property OUTPUT_DATA : String getter is do result := "OutputData" end
}

aspect class IwInput{
	property ramInputData : Class
	getter is do
		result := ramClasses_PerSourceModelElement.getValue(INPUT_DATA)
	end
}

aspect class IwCustomizableNode{
	property ramCustomizableNode : Class
	getter is do
		result := ramClasses_PerSourceModelElement.getValue(CUSTOMIZABLE_NODE)
	end
}

aspect class IwOutput{
	property ramCustomizableNode : Class
	getter is do
		result := ramClasses_PerSourceModelElement.getValue(CUSTOMIZABLE_NODE)
	end

	property ramOutputData : Class
	getter is do
		result := ramClasses_PerSourceModelElement.getValue(OUTPUT_DATA)
	end
}

aspect class IwOrFork {
	reference ramConditions : set Class[2..*]
}