package intermediateWorkflow;

require kermeta
require "platform:/resource/aoUrnToRam/src/iwToRam/Structural.kmt"

using kermeta::standard
using ramstructural

aspect class IwModel {
	operation build() is do
		workflows.each{workflow|
			workflow.build
		}
	end
}

aspect class IwWorkflow {
	operation build() is do
		nodes.each{
			node|node.build()
		}
	
		ramAspect:=Aspect.new
		ramAspect.name:=self.name
		ramAspect.structuralView:=ClassDiagram.new
		ramAspect.interface:=AspectInterface.new
		
		ramReactiveWorkflowInstantiation:=Instantiation.new
		ramReactiveWorkflowInstantiation.externalAspect:="ReactiveWorkflow"
	end
}

aspect class IwNode {
	operation build() is abstract
	
	operation addClass(name:String):Class is do
		var ramClass:Class init Class.new
		ramClass.name:=name
		ramClasses.add(ramClass)
		result:=ramClass
	end
	
	operation addMapping(sourceModelElement:String):Mapping is do
		var ramMapping:Mapping init Mapping.new
		ramMapping.sourceModelElement:=sourceModelElement
		ramMappings.add(ramMapping)
		result:=ramMapping
	end
}

aspect class IwInput {
	method build() is do
		ramInput:=addClass(self.name+"Input")
		ramInputMapping:=addMapping("|InputData")
	end
}

aspect class IwOutput {
	method build() is do
		addClass(self.name+"Output")
		addClass(self.name)
	end
}

aspect class IwProcessingNode {
	method build() is do
		addClass(self.name)
	end
}


