package intermediateWorkflow;

require kermeta
require "platform:/resource/aoUrnToRam/src/iwToRam/Structural.kmt"

using kermeta::standard
using kermeta::utils
using ramstructural

aspect class IwModel {
	operation build() is do
		workflows.each{workflow|
			workflow.build
		}
	end
}

aspect class IwWorkflow {
	operation build() is do
		nodes.each{
			node|node.build()
		}
		
		nodeConnections.each{nodeConnection|
			nodeConnection.build
		}
		
	
		ramAspect:=Aspect.new
		ramAspect.name:=self.name
		ramAspect.structuralView:=ClassDiagram.new
		ramAspect.interface:=AspectInterface.new
		
		ramReactiveWorkflowInstantiation:=Instantiation.new
		ramReactiveWorkflowInstantiation.externalAspect:="ReactiveWorkflow"
	end
}

aspect class IwNode {
	operation build() is do
		ramClasses_PerSourceModelElement:=Hashtable<String, Class>.new
	end
	
	operation addClass(sourceModelElement:String, name:String) is do
		var ramClass:Class init Class.new
		ramClass.name:=name
		ramClasses_PerSourceModelElement.put(sourceModelElement,ramClass)
	end
}

aspect class IwInput {
	method build() is do
		super()
		addClass(INPUT_DATA,self.name+INPUT_SUFFIX)
	end
}

aspect class IwOutput {
	method build() is do
		super()
		addClass(OUTPUT_DATA,self.name+OUTPUT_SUFFIX)
		addClass(CUSTOMIZABLE_NODE,self.name)
	end
}

aspect class IwProcessingNode {
	method build() is do
		super()
		addClass(CUSTOMIZABLE_NODE,self.name)
	end
}

aspect class IwNodeConnection {
	operation build() is do
		if(conditionName.isVoid==false) then
			//stle: will need factory at some point
			ramCondition:=Class.new
			ramCondition.name:=source.name+"_"+conditionName
		end
	end
}

