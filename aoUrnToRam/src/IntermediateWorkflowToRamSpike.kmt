package aoUrnToRam;

require kermeta
require "http:///intermediateWorkflow.ecore"
require "platform:/resource/aoUrnToRam/metamodel/RAMStructural.ecore"

using kermeta::persistence
using kermeta::standard
using intermediateWorkflow
using ramstructural


class IntermediateWorkflowToRamSpike
{
	operation convert(source:String,destination:String) is do
		var model : Model
		model := loadintermediateWorkflowModel(source)

		var workflow:Workflow init model.workflows.one()
		
		//For each step
		var ramAspect: Aspect init Aspect.new
	    ramAspect.name:="SpikeStep"
	    ramAspect.structuralView:=ClassDiagram.new
	    
		var reactiveWorkflowInstantiation :Instantiation init Instantiation.new
	    reactiveWorkflowInstantiation.externalAspect:="ReactiveWorkflow"
	    ramAspect.structuralView.instantiations.add(reactiveWorkflowInstantiation)
		
		workflow.nodes.each{
				node|
				if (node.isInstanceOf(Input) ) then
					var input:Input init node.asType(Input)

					var ramInput:Class init Class.new
					ramInput.name:=input.inputName
					ramAspect.structuralView.classes.add(ramInput)
					
					var inputMapping :Mapping init Mapping.new
				    inputMapping.sourceModelElement:="|InputData"
				    inputMapping.maps.add(ramInput)
				    reactiveWorkflowInstantiation.mappings.add(inputMapping)
				else 
					var customizableSequence:CustomizableSequence init node.asType(CustomizableSequence)

					if(not (customizableSequence.outputName.isVoid() or customizableSequence.outputName=="")) then
						var ramOutput:Class init Class.new
						ramOutput.name:=customizableSequence.outputName
						ramAspect.structuralView.classes.add(ramOutput)
					end
					
					var ramCustomizableSequence:Class init Class.new
					ramCustomizableSequence.name:=customizableSequence.name
					ramAspect.structuralView.classes.add(ramCustomizableSequence)
				end
	    }
	    
		saveAspectStructural(ramAspect,destination)
		
	end

     operation loadintermediateWorkflowModel(uri : String) : Model is do
     	var repository : EMFRepository
     	repository := EMFRepository.new
    	var resource : Resource init repository.getResource(uri)
    	resource.load
    	result ?= resource.one
    end

    operation saveAspectStructural(ramAspect: Aspect, uri : String) is do
    	var repository : EMFRepository
    	repository := EMFRepository.new
    	var resource : Resource init repository.createResource(
	       uri,
	       "platform:/resource/aoUrnToRam/metamodel/RAMStructural.ecore")
    	resource.add(ramAspect)
    	resource.save()
    end
    
	
}




