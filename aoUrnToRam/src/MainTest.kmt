@mainClass "aoUrnToRam::Test::Main" 
@mainOperation "main"
package aoUrnToRam::Test;

require kermeta
require "UrnToIntermediateWorkflowSpike.kmt"

using kermeta::standard
using kermeta::kunit
using aoUrnToRam

class Main
{
    operation main() : Void is do 
	    var testRunner : TestRunner init TestRunner.new
		testRunner.run(InOutExpressionTestCase)
		testRunner.printTestResult
		
		var pass:Boolean init testRunner.log.failures.size==0 and
		   					  testRunner.log.errors.size==0
		stdio.writeln("----")
		stdio.writeln(if pass then "PASS" else "FAIL" end)
		stdio.writeln("----")
    end 
}

class InOutExpressionTestCase inherits TestCase
{
    attribute inOutExpression:InOutExpression 
     
	method setUp() is do
		inOutExpression:=InOutExpression.new
	end

	operation testIn() is do
		inOutExpression.construct("in myInput")	
		assert(inOutExpression.hasOut==false)
		assert(inOutExpression.hasIn==true)
		assert(inOutExpression.in=="myInput")
	end

	operation testOut() is do
		inOutExpression.construct("out myOutput")
		assert(inOutExpression.hasOut==true)
		assert(inOutExpression.out=="myOutput")
		assert(inOutExpression.hasIn==false)	
	end
	
	operation testBoth() is do
		inOutExpression.construct("out myOutput in myInput")
		
		assert(inOutExpression.hasOut==true)
		assert(inOutExpression.out=="myOutput")
		assert(inOutExpression.hasIn==true)
		assert(inOutExpression.in=="myInput")
	end
}