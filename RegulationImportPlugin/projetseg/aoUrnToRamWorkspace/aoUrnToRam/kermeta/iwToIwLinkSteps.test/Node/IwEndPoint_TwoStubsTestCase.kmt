package aoUrnToRam::test;

require kermeta
require "platform:/lookup/aoUrnToRam/kermeta/iwToIwLinkSteps.test/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow

class IwToIwLinkSteps_IwEndPoint_TwoStubsTestCase inherits TestCase,IwToIwLinkSteps_TestHelper
{
	reference concern:IwConcern
	reference workflow:IwWorkflow
	reference stubWorkflow:IwWorkflow
	reference currentStep:IwStep
	
	reference sut:IwEndPoint
	reference stub1:IwStub
	reference stub1ExitNode:IwNode
	reference stub2:IwStub
	reference stub2ExitNode:IwNode
	
	method setUp() is do
		concern:= createIwConcern
		workflow:=createIwWorkflow.withConcern(concern)
		stubWorkflow:=createIwWorkflow.withConcern(concern)
		currentStep:=createIwStep.withConcern(concern)

		sut:=createIwEndPoint.withWorkflow(workflow)

		stub1:=createIwStaticStub.withWorkflow(stubWorkflow)
		stub1ExitNode:=createIwCustomizableNode.withWorkflow(stubWorkflow)
		sut.outbindTo(stub1,stub1.connect(stub1ExitNode))
		
		stub2:=createIwStaticStub.withWorkflow(stubWorkflow)
		stub2ExitNode:=createIwCustomizableNode.withWorkflow(stubWorkflow)
		sut.outbindTo(stub2,stub2.connect(stub2ExitNode))
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_Unexplored_ShouldContinueExploration() is do
		sut.step_DeepFirstSearch(currentStep)
		
		assertEquals(currentStep,stub1ExitNode.step)
		assertEquals(currentStep,stub2ExitNode.step)
	end

	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_Explored_ShouldStopExploration() is do
		sut.step:=currentStep
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertVoid(stub1ExitNode.step)
		assertVoid(stub2ExitNode.step)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_Unexplored_ShouldAddOutboundStubsToCurrentStep() is do
		sut.step_DeepFirstSearch(currentStep)
		
		assertCollectionHasSingleElement(currentStep,stub1.outboundInSteps)
		assertCollectionHasSingleElement(currentStep,stub2.outboundInSteps)
	end
	
}