package aoUrnToRam::test;

require kermeta
require "platform:/lookup/aoUrnToRam/kermeta/iwToIwLinkSteps.test/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow

class IwToIwLinkSteps_IwStartPointTestCase inherits TestCase,IwToIwLinkSteps_TestHelper
{
	reference concern:IwConcern
	reference workflow:IwWorkflow
	reference sut:IwStartPoint
	
	method setUp() is do
		concern:= createIwConcern
		workflow:=createIwWorkflow.withConcern(concern)
		sut:=createIwStartPoint.withWorkflow(workflow)
	end

	@feature "FeaTransformStaticStub"
	operation testLinkStep_Global_ShouldAddStep() is do
		sut.startPointType:="global"
		
		sut.linkStep
	
		assertStepAdded	
	end

	@feature "FeaTransformStaticStub"
	operation testLinkStep_Local_ShouldAddStep() is do
		sut.startPointType:="local"
		
		sut.linkStep
		
		assertStepAdded
	end

	@feature "FeaNamingOfRAMStep"
	operation testLinkStep_BoundFromDifferentConcern_ShouldAddStep() is do
		sut.inbindTo(createStubFromDifferentConcern)
		
		sut.linkStep
		
		assertStepAdded
	end

	@feature "FeaTransformPointcutStub"
	operation testLinkStep_BoundFromAspectMarker_ShouldAddStep() is do
		sut.inbindTo(createAspectMarkerFromSameConcern)
		
		sut.linkStep
		
		assertStepAdded
	end

	@feature "FeaNamingOfRAMStep"
	operation testLinkStep_BoundFromSameConcernOnce_ShouldNotAddStep() is do
		sut.inbindTo(createStubFromDifferentConcern)
		sut.inbindTo(createAspectMarkerFromSameConcern)
		sut.inbindTo(createStubFromSameConcern)
		
		sut.linkStep
		
		assertEquals(0,concern.steps.size)
		assertVoid(sut.step)
	end

	operation createAspectMarkerFromSameConcern():IwStub is do
		result:=createIwAspectMarker.withWorkflow(workflow)
	end
	
	operation createStubFromSameConcern():IwStub is do
		result:=createIwStaticStub.withWorkflow(workflow)
	end

	operation createStubFromDifferentConcern():IwStub is do
		result:=createIwStaticStub.withWorkflow(createIwWorkflow.withConcern(createIwConcern))
	end
	
	operation assertStepAdded() is do
		assertNotVoid(sut.step)
		assertEquals(sut.name,sut.step.name)
		assertCollectionHasSingleElement(sut.step,concern.steps)
	end
	
	
}