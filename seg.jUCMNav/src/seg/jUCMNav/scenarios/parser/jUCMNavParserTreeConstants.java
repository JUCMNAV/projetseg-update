/* Generated By:JJTree: Do not edit this line. jUCMNavParserTreeConstants.java */

package seg.jUCMNav.scenarios.parser;

public interface jUCMNavParserTreeConstants
{
  public int JJTSTART = 0;
  public int JJTSTARTRESPONSIBILITY = 1;
  public int JJTVOID = 2;
  public int JJTASSIGNMENT = 3;
  public int JJTCOMPOUNDSTATEMENT = 4;
  public int JJTIFSTATEMENT = 5;
  public int JJTIMPLICATION = 6;
  public int JJTDISJUNCTION = 7;
  public int JJTINCLUSIVEDISJUNCTION = 8;
  public int JJTEXCLUSIVEDISJUNCTION = 9;
  public int JJTCONJUNCTION = 10;
  public int JJTCOMPARISON = 11;
  public int JJTEQUALITY = 12;
  public int JJTINEQUALITY = 13;
  public int JJTNEGATION = 14;
  public int JJTRELATIONALEXPRESSION = 15;
  public int JJTRELATIONALOPERATION = 16;
  public int JJTADDITIVEEXPRESSION = 17;
  public int JJTMULTIPLICATIVEEXPRESSION = 18;
  public int JJTGREATERTHAN = 19;
  public int JJTGREATEROREQUALTO = 20;
  public int JJTLOWERTHAN = 21;
  public int JJTLOWEROREQUALTO = 22;
  public int JJTADDITION = 23;
  public int JJTSUBSTRACTION = 24;
  public int JJTMULTIPLICATION = 25;
  public int JJTBOOLEANCONSTANT = 26;
  public int JJTINTEGERCONSTANT = 27;
  public int JJTIDENTIFIER = 28;


  public String[] jjtNodeName = {
    "Start",
    "StartResponsibility",
    "void",
    "Assignment",
    "CompoundStatement",
    "IfStatement",
    "Implication",
    "Disjunction",
    "InclusiveDisjunction",
    "ExclusiveDisjunction",
    "Conjunction",
    "Comparison",
    "Equality",
    "Inequality",
    "Negation",
    "RelationalExpression",
    "RelationalOperation",
    "AdditiveExpression",
    "MultiplicativeExpression",
    "GreaterThan",
    "GreaterOrEqualTo",
    "LowerThan",
    "LowerOrEqualTo",
    "Addition",
    "Substraction",
    "Multiplication",
    "BooleanConstant",
    "IntegerConstant",
    "Identifier",
  };
}
