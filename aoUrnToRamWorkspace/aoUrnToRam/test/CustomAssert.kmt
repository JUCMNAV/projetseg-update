package aoUrnToRam::Test;

require kermeta

using kermeta::standard
using kermeta::kunit

class CustomAssert inherits Assert
{
	//Observe that Assert contains an operation named assertEqual(without an 's' at the end)
	//1)there is a syntactical mistake in Assert.assertEqual, it should end with an 's'
	//2)KUnit does not allow running test that does not inherit direclty from TestCase.
	//  Thus, it is not possible to create a CustomTestCase that would override assertEqual.
	//3)Assert.assertEqual is not a generic method
	//4)CustomAssert.assertEquals will be used very ofter, thus it is important to keep its name as short as possible
	//For all these reason, we named this operation assertEquals even if it can possibly create confusion with assertEqual
	operation assertEquals<T>(expected:T, actual:T) is do
		assertWithMsgNextLine(expected==actual,
									   "expected: "+toFormattedString(expected)+"\n"+
									   "actual:   "+toFormattedString(actual))
	end
	
	operation assertNotEquals<T>(expected:T, actual:T) is do
		assertWithMsgNextLine(expected!=actual,"The value was not expected to be"+toFormattedString(actual)+".")
	end
	
	operation assertVoid(actual:Object) is do
		assertEquals(void,actual)
	end
	
	operation assertNotVoid(actual:Object) is do
		assertWithMsgNextLine(actual.isVoid==false,"The value was not expected to be void.")
	end
	
	operation assertCollectionHasSingleElement<T>(singleElement:T,collection:Collection<T>) is do
		assertEquals(1,collection.size)
		assertEquals(singleElement,collection.one)
	end
	
	operation assertCollectionHasTwoElements<T>(firstElement:T,secondElement:T,collection:Collection<T>) is do
		assertEquals(2,collection.size)
		assertNotEquals(firstElement,secondElement)
		assertCollectionContainsElementWithMsg(firstElement,collection,"(First element)")
		assertCollectionContainsElementWithMsg(secondElement,collection,"(Second element)")
	end
	
	operation assertCollectionContainsElement<T>(element:T,collection:Collection<T>) is do
		assertCollectionContainsElementWithMsg(element,collection,"")
	end
	
	operation assertCollectionContainsElementWithMsg<T>(element:T,collection:Collection<T>,msg:String) is do
		assertWithMsgNextLine(collection.contains(element),toFormattedString(element)+ "is not in collection."+msg)
	end
	
	operation assertWithMsgNextLine(condition:Boolean,msg:String) is do
		assertWithMsg(condition,"\n"+msg)
	end
	
	operation assertStringContains(expected:String, actual:String,isContained:Boolean) is do
		assertWithMsgNextLine(actual.contains(expected)==isContained,
									   "Expected is"+
									   if(isContained) then " not" end +
									   " contained in actual.\n" +
									   "expected: "+toFormattedString(expected)+"\n"+
									   "actual:   "+toFormattedString(actual))
	end
	
	
	operation toFormattedString(o:Object):String is do
		if(o.isVoid==false and o.isInstanceOf(String)) then
			result:="\""+o.toString+"\""
		else
			result:=o.toString
		end
	end
	
	
}