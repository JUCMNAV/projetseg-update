package aoUrnToRam::test;
require "platform:/resource/aoUrnToRam/test/tdd/aoUrnToIw/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using oneurn::urncore
using oneurn::ucm::map
using intermediateWorkflow

class AoUrnToIw_StartPointTestCase inherits TestCase,AoUrnToIw_TestHelper {
	reference sut:StartPoint
	
	method setUp() is do
		sut:=createStartPoint
	end
	
	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuild_ShouldBuildEquivalentNodeBeforeInput() is do
		pathNode_ParameterizableTestBuild_ShouldBuildEquivalentNodeBeforeInput(sut)
	end
		
	@feature "FeaTransformStaticStub"
	operation testBuild_LocalVoidNotBound_ShouldBeGlobal() is do
		sut.local:=void
		
		sut.build

		assertStartPointTypeEquals("global")	
	end
	
	@feature "FeaTransformStaticStub"
	operation testBuild_LocalFalseNotBound_ShouldBeGlobal() is do
		sut.local:=false
	
		sut.build

		assertStartPointTypeEquals("global")	
	end
	
	@feature "FeaTransformStaticStub"
	operation testBuild_LocalTrueNotBound_ShouldBeGlobal() is do
		sut.local:=true
		
		sut.build

		assertStartPointTypeEquals("local")
	end
	
	@feature "FeaTransformStaticStub"
	operation testBuild_LocalFalseBound_ShouldBeBound() is do
		sut.local:=false
		attachInBinding
	
		sut.build

		assertStartPointTypeEquals("bound")	
	end
	
	@feature "FeaTransformStaticStub"
	operation testBuild_LocalTrueBound_ShouldBeBound() is do
		sut.local:=true
		attachInBinding
	
		sut.build

		assertStartPointTypeEquals("bound")	
	end
	
	@feature "FeaTransformEmptyPointResponsibilityEndPoint"
	operation testLink_ShouldLinkIwStartPointToIwWorklow() is do
		var ucmMap:UCMmap init createUcmMap
		sut.ucmMap:=ucmMap
		connectNodes(sut,createEndPoint_UcmMap(ucmMap)) 
		ucmMap.build
		
		sut.link
		
		assertCollectionHasSingleElement(sut.iwStartPoint,ucmMap.iwWorkflow.startPoints)
	end

	@feature "FeaTransformPointcutStub"
	operation testLink_PointcutStubAsTarget_ShouldIgnoreStartPoint() is do
		var ucmMap:UCMmap init createUcmMap
		sut.ucmMap:=ucmMap
		var target:Stub init createPointcutStub
		target.aopointcut:=PointcutKind.Replacement
		target.ucmMap:=ucmMap
		connectNodes(sut,target)
		ucmMap.build
		
		sut.link
		
		assertEquals(0,ucmMap.iwWorkflow.nodes.size)
		assertEquals(0,ucmMap.iwWorkflow.startPoints.size)
		assertEquals(0,sut.iwStartPoint.succs.size)
	end
	
	operation attachInBinding() is do
		sut.inBindings.add(createInBinding)
	end
	
	operation assertStartPointTypeEquals(startPointType:String) is do
		assert(sut.iwStartPoint.startPointType==startPointType)
	end
}