package aoUrnToRam::test;

require kermeta
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"

using kermeta::standard
using kermeta::utils
using kermeta::exceptions
using oneurn::urn
using oneurn::ucm::map
using oneurn::urncore

class AoUrnTestFactory
{
	operation createUrnSpec():URNspec is do
		result:=URNspec.new
		result.name:="theUrnSpec"
		result.urndef:=createURNdefinition
	end
	
	operation createURNdefinition():URNdefinition is do
		result:=URNdefinition.new
	end
	
	operation createUcmMap():UCMmap is do
		result:=UCMmap.new
		result.name:="theUcmMap"
	end
	
	operation createUcmMap_UrnSpec(urnSpec:URNspec):UCMmap is do
		result:=createUcmMap
		urnSpec.urndef.specDiagrams.add(result)
	end
	
	operation createUcmMap_UrnSpec_Concern(urnSpec:URNspec,concern:Concern):UCMmap is do
		result:=createUcmMap_UrnSpec(urnSpec)
		result.concern:=concern
	end
	
	operation createConcern():Concern is do
		result:=Concern.new
		result.name:="theConcern"
	end
	
	operation createConcern_UrnSpec(urnSpec:URNspec):Concern is do
		result:=createConcern
		urnSpec.urndef.concerns.add(result)
	end

	operation createNodeConnection():NodeConnection is do
		result:=NodeConnection.new
	end
	
	operation connectNodes(source:IURNNode,target:IURNNode):NodeConnection is do
		result:=createNodeConnection
		result.source:=source
		result.target:=target 
	end
	
	operation connectEndPointAsTarget(pathNode:PathNode):NodeConnection is do
		var target:PathNode init createEndPoint_UcmMap(pathNode.ucmMap)
		result:=connectNodes(pathNode,target)
	end
	
	operation connectStartPointAsSource(pathNode:PathNode):NodeConnection is do
		var source:PathNode init createStartPoint_UcmMap(pathNode.ucmMap)
		result:=connectNodes(source,pathNode)
	end
	
	operation connectEmptyPointAsTarget(pathNode:PathNode):NodeConnection is do
		var target:PathNode init createEmptyPoint_UcmMap(pathNode.ucmMap)
		result:=connectNodes(pathNode,target)
	end
	
	operation connectEmptyPointAsSource(pathNode:PathNode):NodeConnection is do
		var source:PathNode init createEmptyPoint_UcmMap(pathNode.ucmMap)
		result:=connectNodes(source,pathNode)
	end

	operation createCondition():Condition is do
		result:=Condition.new
		result.label:="theCondition" 
	end

	operation attachCondition(nodeConnection:NodeConnection):Condition is do
		result:=createCondition
		nodeConnection.condition:=result
	end

/*********************************************************
Node
*********************************************************/
	operation createStartPoint():StartPoint is do
		result:=StartPoint.new
		result.name:="theStartPoint"
		result.id:="1"
	end
	
	operation createStartPoint_UcmMap(ucmMap:UCMmap):StartPoint is do
		result:=createStartPoint
		result.diagram:=ucmMap
	end
	
	operation createEndPoint():EndPoint is do
		result:=EndPoint.new
		result.name:="theEndPoint"
		result.id:="1"
	end
	
	operation createEndPoint_UcmMap(ucmMap:UCMmap):EndPoint is do
		result:=createEndPoint
		result.diagram:=ucmMap
	end
	
	operation createEmptyPoint():EmptyPoint is do
		result:=EmptyPoint.new
		result.name:="theEmptyPoint"
		result.id:="1"
	end
	
	operation createEmptyPoint_UcmMap(ucmMap:UCMmap):EmptyPoint is do
		result:=createEmptyPoint
		result.diagram:=ucmMap
	end
	
	operation createOrFork():OrFork is do
		result:=OrFork.new
		result.name:="theOrFork"
		result.id:="1"
	end
	
	operation createOrFork_UcmMap(ucmMap:UCMmap):OrFork is do
		result:=createOrFork
		result.diagram:=ucmMap
	end

	operation createOrJoin():OrJoin is do
		result:=OrJoin.new
		result.name:="theOrJoin"
		result.id:="1"
	end

	operation createAndFork():AndFork is do
		result:=AndFork.new
		result.name:="theAndFork"
		result.id:="1"
	end
	
	operation createWaitingPlace():WaitingPlace is do
		result:=WaitingPlace.new
		result.name:="theWaitingPlace"
		result.id:="1"
		result.waitType:=WaitKind.Transient
	end
	
	operation createRespRef():RespRef is do
		result:=RespRef.new
		result.respDef:=createResponsibility
		result.id:="1"
	end
/*********************************************************
Stub
*********************************************************/
	operation createStub():Stub is do
		result:=Stub.new
		result.name:="theStub"
		result.id:="1"	
	end
	
	operation createStub_UcmMap(ucmMap:UCMmap):Stub is do
		result:=createStub
		result.diagram:=ucmMap
	end

	operation createPluginBinding():PluginBinding is do
		result:=PluginBinding.new
	end
	
	operation createPluginBinding_Stub(stub:Stub):PluginBinding is do
		result:=createPluginBinding
		result.stub:=stub
	end
	
	operation createInBinding():InBinding is do
		result:=InBinding.new
	end
	
	operation createInBinding_PluginBinding(pluginBinding:PluginBinding):InBinding is do
		result:=createInBinding
		result.binding:=pluginBinding
	end
	
	operation createOutBinding():OutBinding is do
		result:=OutBinding.new
	end
	
	operation createOutBinding_PluginBinding(pluginBinding:PluginBinding):OutBinding is do
		result:=createOutBinding
		result.binding:=pluginBinding
	end
	


/*********************************************************
Misc
*********************************************************/
	property readonly DEFAULT_OUTPUT_NAME:String
	getter is do
		result:="theOutput"
	end
	
	property readonly DEFAULT_INPUT_NAME:String 
	getter is do
		result:="theInput"
	end
	

	operation attachOutputRamMetadata(element:URNmodelElement) is do
		element.metadata.add(createRamMetadata_RamExpresion("out "+DEFAULT_OUTPUT_NAME))
	end
	
	operation attachInputRamMetadata(element:URNmodelElement) is do
		element.metadata.add(createRamMetadata_RamExpresion("in "+DEFAULT_INPUT_NAME))
	end
	
	operation attachOutputInputRamMetadata(element:URNmodelElement) is do
		element.metadata.add(createRamMetadata_RamExpresion("out "+DEFAULT_OUTPUT_NAME+" in "+DEFAULT_INPUT_NAME))
	end
	
	operation createRamMetadata_RamExpresion(ramExpression:String):Metadata is do
		result:=Metadata.new
		result.name:="ram"
		result.~value:=ramExpression
	end

	operation createResponsibility():Responsibility is do
		result:=Responsibility.new
		result.name:="theResponsibility"
	end

	operation attachComponentRef(pathNode:PathNode,componentKind:ComponentKind) is do
		pathNode.contRef:=createComponentRef_ComponentKind(componentKind)
	end

	operation createComponentRef_ComponentKind(componentKind:ComponentKind):ComponentRef is do
		result:=ComponentRef.new
		result.contDef:=createComponent_ComponentKind(componentKind)
	end
	
	operation createComponent_ComponentKind(componentKind:ComponentKind):Component is do
		result:=Component.new
		result.name:="theComponent"
		result.kind:=componentKind
	end
}
