package aoUrnToRam::test;

require kermeta
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"

using kermeta::standard
using kermeta::utils
using kermeta::exceptions
using oneurn::urn
using oneurn::ucm::map
using oneurn::urncore

class AoUrnTestFactory
{
	operation createUrnSpec():URNspec is do
		result:=URNspec.new
		result.name:="theUrnSpec"
	end

	operation createUcmMap(name:String):UCMmap is do
		result:=UCMmap.new
		result.name:="theUcmMap"
	end

	operation createConcern():Concern is do
		result:=Concern.new
		result.name:="theConcern"
	end

	operation createNodeConnection():NodeConnection is do
		result:=NodeConnection.new
	end
	
	operation connectNodes(source:IURNNode,target:IURNNode):NodeConnection is do
		result:=createNodeConnection
		result.source:=source
		result.target:=target 
	end

	operation createCondition():Condition is do
		result:=Condition.new
		result.label:="theCondition" 
	end

	operation createConditionalNodeConnection():NodeConnection is do
		result:=createNodeConnection
		result.condition:=createCondition
	end

/*********************************************************
Node
*********************************************************/
	operation createStartPoint():StartPoint is do
		result:=StartPoint.new
		result.name:="theStartPoint"
		result.id:="1"
	end

	operation createEndPoint():EndPoint is do
		result:=EndPoint.new
		result.name:="theEndPoint"
		result.id:="1"
	end
	
	operation createEmptyPoint():EmptyPoint is do
		result:=EmptyPoint.new
		result.name:="theEmptyPoint"
		result.id:="1"
	end
	
	operation createOrFork():OrFork is do
		result:=OrFork.new
		result.name:="theOrFork"
		result.id:="1"
	end

	operation createOrJoin():OrJoin is do
		result:=OrJoin.new
		result.name:="theOrJoin"
		result.id:="1"
	end

	operation createRespRef():RespRef is do
		result:=RespRef.new
		result.respDef:=createResponsibility
		result.id:="1"
	end
	
	operation createRespRefInsideActor():RespRef is do
		result:=createRespRef
		result.contRef:=createActorComponentRef
	end

/*********************************************************
Stub
*********************************************************/
	operation createStub():Stub is do
		result:=Stub.new
		result.name:="theStub"
		result.id:="1"	
	end

	operation createPluginBinding():PluginBinding is do
		result:=PluginBinding.new
	end
	
	operation createInBinding():InBinding is do
		result:=InBinding.new
	end
	
	operation createOutBinding():OutBinding is do
		result:=OutBinding.new
	end


/*********************************************************
Misc
*********************************************************/
	operation attachRamMetadata(element:URNmodelElement, ramExpression:String) is do
		element.metadata.add(createRamMetadata_RamExpresion(ramExpression))
	end
	
	operation createRamMetadata_RamExpresion(ramExpression:String):Metadata is do
		result:=Metadata.new
		result.name:="ram"
		result.~value:=ramExpression
	end

	operation createResponsibility():Responsibility is do
		result:=Responsibility.new
		result.name:="theResponsibility"
	end

	operation createActorComponentRef():ComponentRef is do
		result:=ComponentRef.new
		result.contDef:=createActorComponent
	end
	
	operation createActorComponent():Component is do
		result:=Component.new
		result.name:="theActorComponent"
		result.kind:=ComponentKind.Actor
	end
}
