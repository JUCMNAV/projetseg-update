package aoUrnToRam::test;

require "platform:/resource/aoUrnToRam/test/tdd/iwToJavaInstantiator/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow
using javaInstantiator

class IwToJavaInstantiator_IwNodeConnectionTestCase inherits TestCase,IwToJavaInstantiator_TestHelper
{
	reference sut:IwNodeConnection
	reference workflowInstantiator:WorkflowInstantiator
	
	method setUp() is do
		workflowInstantiator:=createWorkflowInstantiator
	end
	

	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testAppendBuildStatement_ShouldDeclareAndInitializeWorkflowNode() is do
		var orFork:IwOrFork init createIwOrFork
		orFork.step:=createIwStep
		sut:=withCondition(connectSource(orFork))
		
		sut.jiAppendBuildStatement(workflowInstantiator)
		
		assertEquals("    private Condition _theOrFork_theCondition=createCondition(\"theCustomizableClassSubPackage.theStep.theOrFork_theCondition\");\n"
					,workflowInstantiator.content)
	end

	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testAppendLinkStatement_NodeToNode_ShouldLinkSourceToTarget() is do
		sut:=linkNodes(createIwCustomizableNode,createIwEndPoint)
		
		sut.jiAppendAddNextNodeStatements(workflowInstantiator)
		
		assertEquals("        _theCustomizableNode.addNextNode(_theEndPoint);\n"
					,workflowInstantiator.content)
	end
	
	operation testAppendLinkStatement_NodeToStub_ShouldLinkSourceToTargetInPath() is do
		sut:=linkNodes(createIwCustomizableNode,createIwStub)
		sut.stubEntryIndex:=1
		
		sut.jiAppendAddNextNodeStatements(workflowInstantiator)
		
		assertEquals("        _theCustomizableNode.addNextNode(_theStub,\"1\");\n"
					,workflowInstantiator.content)
	end
	
	operation testAppendLinkStatement_StubToNode_ShouldLinkSourceOutPathToTarget() is do
		sut:=linkNodes(createIwStub,createIwCustomizableNode)
		sut.stubExitIndex:=1
		
		sut.jiAppendAddNextNodeStatements(workflowInstantiator)
		
		assertEquals("        _theStub.addNextNode(\"1\",_theCustomizableNode);\n"
					,workflowInstantiator.content)
	end
	
	operation testAppendLinkStatement_StubToStub_ShouldLinkSourceOutPathToTargetInPath() is do
		sut:=linkNodes(createIwStub,createIwStub)
		sut.target.name:="anotherStub"
		sut.stubExitIndex:=1
		sut.stubEntryIndex:=2
		
		sut.jiAppendAddNextNodeStatements(workflowInstantiator)
		
		assertEquals("        _theStub.addNextNode(\"1\",_anotherStub,\"2\");\n"
					,workflowInstantiator.content)
	end
	
	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testAppendLinkStatement_OrForkToNode_ShouldLinkSourceToTargetWithCondition() is do
		sut:=withCondition(linkNodes(createIwOrFork,createIwEndPoint))
		
		sut.jiAppendAddNextNodeStatements(workflowInstantiator)
		
		assertEquals("        _theOrFork.addNextNode(\"theCondition\",_theEndPoint,_theOrFork_theCondition);\n"
					,workflowInstantiator.content)
	end
	
	operation testAppendLinkStatement_OrForkToStub_ShouldLinkSourceToTargetInPathWithCondition() is do
		sut:=withCondition(linkNodes(createIwOrFork,createIwStub))
		sut.stubEntryIndex:=1
		
		sut.jiAppendAddNextNodeStatements(workflowInstantiator)
		
		assertEquals("        _theOrFork.addNextNode(\"theCondition\",_theStub,\"1\",_theOrFork_theCondition);\n"
					,workflowInstantiator.content)
	end
}