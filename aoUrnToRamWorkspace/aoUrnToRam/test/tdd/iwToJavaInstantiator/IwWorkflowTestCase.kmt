package aoUrnToRam::test;

require "platform:/resource/aoUrnToRam/test/tdd/iwToJavaInstantiator/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow
using aoUrnToRam::util 
using javaInstantiator

class IwToJavaInstantiator_IwWorkflowTestCase inherits TestCase,IwToJavaInstantiator_TestHelper
{
	reference sut:IwWorkflow
	reference workflowInstantiator:WorkflowInstantiator
	
	method setUp() is do
		sut:=createIwWorkflowWithContainers
	end

	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testToWorkflowInstantiator_ShouldInitWorkspacePath() is do
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertEquals("Instantiators/theConcern/theWorkflowWorkflowInstantiator",workflowInstantiator.workspacePath)
	end

	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testToWorkflowInstantiator_ShouldInitCustomizableClassSubPackage() is do
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertEquals("theModel.Steps.theConcern",workflowInstantiator.customizableClassSubPackage)
	end
	

	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testToWorkflowInstantiator_ShouldAppendPackage() is do
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertStringStartsWith("package theModel.Instantiators.theConcern;\n\n",workflowInstantiator.content)
	end

	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testToWorkflowInstantiator_ShouldAppendImports() is do
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertStringContains( "import ram.reactiveworkflow.*;\n",workflowInstantiator.content)
		assertStringContains( "import ram.workflow.*;\n",workflowInstantiator.content)
	end

	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testToWorkflowInstantiator_ShouldAppendClass() is do
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertStringContains("\n\npublic class theWorkflowWorkflowInstantiator extends WorkflowInstantiator{",workflowInstantiator.content)
		assertStringEndsWith("}\n",workflowInstantiator.content)
	end

	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testToWorkflowInstantiator_ShouldAppendLinkMethod() is do
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertStringContains(
"
    public void link(){
    }
"
		,workflowInstantiator.content)
	end

	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testToWorkflowInstantiator_ShouldInvokeAppendLinkStatementOnNodeConnections() is do
		var step:IwStep init createIwStep
		var inBetween:IwNode init createIwOutput.withWorkflow(sut).withStep(step)
		createIwCustomizableNode.withWorkflow(sut).withStep(step).connect(inBetween)
		inBetween.connect(createIwEndPoint.withWorkflow(sut).withStep(step))
		
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertStringContainsNTime(2,".addNextNode",workflowInstantiator.content)
	end
	
	operation testToWorkflowInstantiator_ShouldAppendBindMethod() is do
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertStringContains(
"
    public void bind(){
    }
"
		,workflowInstantiator.content)
	end

	operation testToWorkflowInstantiator_TwoPlugins_ShouldAppendTwoParameters() is do
		createPlugin(sut.concern).withName("thePlugin1")
		createPlugin(sut.concern).withName("thePlugin2")
		
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertStringContains(
"
    public void bind(theModel.Instantiators.theConcern.thePlugin1WorkflowInstantiator thePlugin1,
                     theModel.Instantiators.theConcern.thePlugin2WorkflowInstantiator thePlugin2)"
		,workflowInstantiator.content)
	end
	
	operation testToWorkflowInstantiator_SamePluginTwice_ShouldAppendOneParameter() is do
		var plugin:IwWorkflow init createPlugin(sut.concern)
		var pluginStartPoint:IwStartPoint pluginStartPoint?=plugin.nodes.one 
		bindStaticStubToPluginStartPoint(
			createIwStaticStub.withWorkflow(sut),
			pluginStartPoint
		)
		
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertStringContainsNTime(1,"theModel.Instantiators.theConcern.thePluginWorkflowInstantiator ",workflowInstantiator.content)
	end

	operation testToWorkflowInstantiator_PluginFromDifferentConcern_ShouldHaveFullQualifiedNameWithDifferentConcern() is do
		createPlugin(createIwConcern.withModel(sut.model).withName("theDifferentConcern"))
		
		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertStringContains("theModel.Instantiators.theDifferentConcern.thePlugin",workflowInstantiator.content)
	end	
	
	operation testToWorkflowInstantiator_OnlyOutBoundPluginReplacementAspect_ShouldAppendParameter() is do
		var outBoundPlugin:IwWorkflow init createIwWorkflow.withConcern(sut.concern).withName("thePlugin")
		bindStaticStubToPluginEndPoint(
			createIwStaticStub.withWorkflow(sut),
			createIwEndPoint.withWorkflow(sut),
			createIwEndPoint.withWorkflow(outBoundPlugin)
		)

		workflowInstantiator:=sut.jiToWorkflowInstantiator
		
		assertStringContainsNTime(1,"theModel.Instantiators.theConcern.thePluginWorkflowInstantiator ",workflowInstantiator.content)
	end
	

	operation createPlugin(concern:IwConcern):IwWorkflow is do
		result:=createIwWorkflow.withConcern(concern).withName("thePlugin")
		bindStaticStubToPluginStartPoint(
			createIwStaticStub.withWorkflow(sut),
			createIwStartPoint.withWorkflow(result)
		)
	end
	
	//stle:node name shall start with an upper case
	//stle:instance variable and param name shall start with an lower case
	
	//stle:create workflow
	//stle:start nodes
}
