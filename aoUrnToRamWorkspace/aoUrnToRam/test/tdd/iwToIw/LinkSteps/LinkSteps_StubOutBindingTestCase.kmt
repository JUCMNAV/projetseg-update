package aoUrnToRam::Test;

require kermeta
//stle: factory is common to IwToIw and IwToRam
require "platform:/resource/aoUrnToRam/test/tdd/iw/IwTestFactory.kmt"
require "platform:/resource/aoUrnToRam/src/iwToIw/LinkSteps/_Ref.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow

using kermeta::language::structure

class LinkSteps_StubOutBindingTestCase inherits TestCase
{
	reference factory:IwTestFactory
	reference concern:IwConcern

	reference plugin:IwWorkflow
	reference pluginEndPoint:IwEndPoint

	reference workflow:IwWorkflow
	reference stub:IwStub
	reference pluginBinding:IwPluginBinding
	reference nodeAfterStub:IwCustomizableNode
	
	reference currentStep:IwStep
	
	method setUp() is do
		//concern
		factory:=IwTestFactory.new
		concern:= factory.createIwConcern

		//plugin
		plugin:=factory.createIwWorkflow
		concern.workflows.add(plugin)
		pluginEndPoint:=factory.createIwEndPoint
		plugin.nodes.add(pluginEndPoint)
    	
    	//workflow
    	workflow:=factory.createIwWorkflow
    	concern.workflows.add(workflow)
		stub:=factory.createIwStub
		workflow.nodes.add(stub)
		nodeAfterStub:=factory.createIwCustomizableNode
		workflow.nodes.add(nodeAfterStub)
		var stubExit:IwNodeConnection init factory.createIwNodeConnection(stub,nodeAfterStub)
		pluginBinding:=factory.createIwPluginBinding
		pluginBinding.stub:=stub
		factory.createIwOutBinding(stubExit,pluginEndPoint).pluginBinding:=pluginBinding

		//current step
		currentStep:=factory.createIwStep
		concern.steps.add(currentStep)
	end

	@feature "FeaTransformStaticStub"
	operation testLinkStep_StubOutBinding_Unexplored() is do
		pluginEndPoint.step_DeepFirstSearch(currentStep)

		assertObjectEqual(1,concern.steps.size)//No step added
		assertObjectEqual("theStep",currentStep.name)//No step merged
		assert(stub.step.isVoid)
		assertCollectionHasSingleElement(currentStep.outboundStubs,stub)
		assert(pluginEndPoint.step==currentStep)		
		assert(nodeAfterStub.step==currentStep)
	end

	@feature "FeaTransformStaticStub"
	operation testLinkStep_StubOutBinding_AlreadyExplored_SameStep() is do
		currentStep.outboundStubs.add(stub)
		stub.step:=currentStep
		
		pluginEndPoint.step_DeepFirstSearch(currentStep)

		assertObjectEqual(1,concern.steps.size)//No step added
		assertObjectEqual("theStep",currentStep.name)//No step merged
		assert(stub.step==currentStep)
		assertCollectionHasSingleElement(currentStep.outboundStubs,stub)
		assert(pluginEndPoint.step==currentStep)
		assert(nodeAfterStub.step==currentStep)//Continue even if stub is part of step and already in outboundStubs
	end

	@feature "FeaTransformStaticStub"
	operation testLinkStep_StubOutBinding_AlreadyExplored_SameStep_MergeNextStep() is do
		currentStep.outboundStubs.add(stub)
		var toMerge:IwStep init factory.createIwStep
		toMerge.name:="toMerge"
		concern.steps.add(toMerge)
		nodeAfterStub.step:=toMerge
		
		pluginEndPoint.step_DeepFirstSearch(currentStep)

		assertObjectEqual(1,concern.steps.size)//Two steps merged into one
		assertObjectEqual("theStep_toMerge",currentStep.name)//Step merged
		assert(pluginEndPoint.step==currentStep)
		assertCollectionHasSingleElement(currentStep.outboundStubs,stub)
		assert(stub.step.isVoid)
		assert(nodeAfterStub.step==currentStep)//Continue even if stub is part of step and merge nodeAfterStub
	end

	@feature "FeaTransformStaticStub"
	operation testLinkStep_StubOutBinding_AlreadyExplored_DifferentStep() is do
		var differentStep:IwStep init factory.createIwStep
		concern.steps.add(differentStep)
		differentStep.outboundStubs.add(stub)
		
		pluginEndPoint.step_DeepFirstSearch(currentStep)

		assertObjectEqual(2,concern.steps.size)//No step added
		assertObjectEqual("theStep",currentStep.name)//No step merged
		assert(pluginEndPoint.step==currentStep)
		assertCollectionHasSingleElement(currentStep.outboundStubs,stub)
		assertCollectionHasSingleElement(differentStep.outboundStubs,stub)
		assert(stub.step.isVoid)
		assert(nodeAfterStub.step==currentStep)//Continue even if stub is part of a different step
	end

	@feature "FeaTransformStaticStub"
	operation testLinkStep_StubOutBinding_OneEndPointManyOutBindings() is do
    	var workflow2:IwWorkflow init factory.createIwWorkflow
    	workflow2.concern:=concern
		var stub2:IwStub init factory.createIwStub
		stub2.workflow:=workflow2
		var nodeAfterStub2:IwCustomizableNode init factory.createIwCustomizableNode
		nodeAfterStub2.workflow:=workflow2
		var stubExit2:IwNodeConnection init factory.createIwNodeConnection(stub2,nodeAfterStub2)
		var pluginBinding2:IwPluginBinding init factory.createIwPluginBinding
		pluginBinding2.stub:=stub2
		factory.createIwOutBinding(stubExit2,pluginEndPoint).pluginBinding:=pluginBinding2
		
		pluginEndPoint.step_DeepFirstSearch(currentStep)

		assertObjectEqual(1,concern.steps.size)//No step added
		assertObjectEqual("theStep",currentStep.name)//No step merged
		assert(nodeAfterStub.step==currentStep)				//One
		assert(nodeAfterStub2.step==currentStep)	//Many
		
		var expectedOutboundStubs:OrderedSet<IwStub> init OrderedSet<IwStub>.new
		expectedOutboundStubs.add(stub) 
		expectedOutboundStubs.add(stub2)
		assert(expectedOutboundStubs==currentStep.outboundStubs)
	end
	
	operation assertCollectionHasSingleElement<T>(collection:Collection<T>,singleElement:T) is do
		assertObjectEqual(1,collection.size)
		assert(collection.one==singleElement)
	end
	
	//stle: dry
	//stle: more verbrose on assertion
	operation assertIsNonVoidInstanceOf(expected:kermeta::language::structure::Class, actual:Object) is do
		assertWithMsg(actual.isVoid==false,"IsVoid-> expected:false actual:true")
		assertWithMsg(actual.isInstanceOf(expected),"IsInstanceOf-> expected:\""+expected.toString()+"\"actual:\""+actual.getMetaClass().toString()+"\"")
	end

	
	operation assertStringEqual(expected:String, actual:String) is do
		assertWithMsg(expected==actual,"StringEqual-> expected:\""+expected+"\"actual:\""+actual+"\"")
	end
	
	operation assertObjectEqual(expected:Object, actual:Object) is do
	//stle: check for void and type
		assertWithMsg(expected==actual,"ObjectEqual-> expected:\""+expected.toString+"\" actual:\""+actual.toString+"\"")
	end
}