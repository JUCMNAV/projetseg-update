package aoUrnToRam::Test;

require kermeta
require "platform:/resource/aoUrnToRam/test/tdd/iwToIw/LinkSteps/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow

class LinkSteps_IwEndPoint_OneStubTestCase inherits TestCase,LinkSteps_TestHelper
{
	reference concern:IwConcern
	reference workflow:IwWorkflow
	reference stubWorkflow:IwWorkflow
	reference currentStep:IwStep
	
	reference sut:IwEndPoint
	reference stub:IwStub
	reference stubExitNode:IwCustomizableNode
	
	method setUp() is do
		concern:= createIwConcern
    	workflow:=createIwWorkflow_Concern(concern)
    	stubWorkflow:=createIwWorkflow_Concern(concern)
    	currentStep:=createIwStep_Concern(concern)
    	
    	sut:=createIwEndPoint_Workflow(workflow)

		stub:=createIwStaticStub_Workflow(stubWorkflow)
		stubExitNode:=createIwCustomizableNode_Workflow(stubWorkflow)
		bindStaticStubToPluginEndPoint(stub,stubExitNode,sut)
	end
	
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_UnexploredWithStubDifferentStep_ShouldAddOutboundStubsToCurrentStep() is do
		var differentStep:IwStep init createIwStep_Concern(concern)
		stub.step:=differentStep
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertCollectionHasSingleElement(currentStep,stub.outboundInSteps)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_UnexploredWithStubAlreadyOutbound_ShouldAddOutboundStubsToCurrentStep() is do
		var differentStep:IwStep init createIwStep_Concern(concern)
		stub.outboundInSteps.add(differentStep)
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertCollectionHasTwoElements(currentStep,differentStep,stub.outboundInSteps)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_UnexploredWithStubFromOtherConcern_ShouldStopExploration() is do
		stubWorkflow.concern:=createIwConcern //Different concern
		
		sut.step_DeepFirstSearch(currentStep)

		assertVoid(stubExitNode.step)
		assertEquals(0,stub.outboundInSteps.size)		
	end
	
}