package aoUrnToRam::test;

require kermeta
require "platform:/lookup/aoUrnToRam/test/tdd/iwToIw/LinkSteps/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow

class LinkSteps_IwInputTestCase inherits TestCase,LinkSteps_TestHelper
{
	reference concern:IwConcern
	reference workflow:IwWorkflow
	reference currentStep:IwStep
	reference sut:IwInput
	
	method setUp() is do
		concern:= createIwConcern
    	workflow:=createIwWorkflow_Concern(concern)
    	currentStep:=createIwStep_Concern(concern)
    	sut:=createIwInput_Workflow(workflow)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_StartupStep_ShouldRenameCurrentStep() is do
		currentStep.isStartupStep:=true
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertEquals(sut.name,sut.step.name)
		assertEquals(false,sut.step.isStartupStep)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_StartupStep_ShouldNotAddAnyStepsToConcern() is do
		currentStep.isStartupStep:=true
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertCollectionHasSingleElement(currentStep,concern.steps)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_ReactiveStep_ShouldCreateNewStep() is do
		sut.step_DeepFirstSearch(currentStep)
		
		assertEquals(sut.name,sut.step.name)
		assertEquals(false,sut.step.isStartupStep)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_ReactiveStep_ShouldAddNewStepToConcern() is do
		sut.step_DeepFirstSearch(currentStep)
		
		assertCollectionHasTwoElements(currentStep,sut.step,concern.steps)
	end
	
	
}