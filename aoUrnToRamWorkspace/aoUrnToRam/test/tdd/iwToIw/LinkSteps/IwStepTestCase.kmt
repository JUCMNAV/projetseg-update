package aoUrnToRam::Test;

require kermeta
require "platform:/resource/aoUrnToRam/test/tdd/iwToIw/LinkSteps/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow

class LinkSteps_IwStepTestCase inherits TestCase,LinkSteps_TestHelper
{
	reference concern:IwConcern
	reference workflow:IwWorkflow
	reference toMerge:IwStep
	reference sut:IwStep
	
	method setUp() is do
		//stle:dry
		concern:= createIwConcern
    	workflow:=createIwWorkflow
    	workflow.concern:=concern

		toMerge:=createIwStep
		toMerge.name:="ToMergeStepName"
		toMerge.concern:=concern
		sut:=createIwStep
		sut.name:="SutStepName"
		sut.concern:=concern
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testMerge_StepNameConcatenated_AlphabethicalOrder() is do
		var smallerStepName:IwStep init createIwStep
		smallerStepName.name:="a"
		sut.name:="b"
		toMerge.name:="c"
				
		sut.merge(toMerge)
		sut.merge(smallerStepName)
		
		assertEquals("a_b_c",sut.name)
	end
	
	operation testMerge_StartupStep_FF() is do
		parameterizableTestMerge_StartupStep(false,"SutStepName_ToMergeStepName",false,false)
	end
	
	operation testMerge_StartupStep_FT() is do
		parameterizableTestMerge_StartupStep(false,"SutStepName",false,true)
	end

	operation testMerge_StartupStep_TF() is do
		parameterizableTestMerge_StartupStep(false,"ToMergeStepName",true,false)
	end

	operation testMerge_StartupStep_TT() is do
		parameterizableTestMerge_StartupStep(true,"SutStepName_ToMergeStepName",true,true)
	end
	
	operation parameterizableTestMerge_StartupStep(expectedIsStartupStep:Boolean,expectedName:String,sutIsStartupStep:Boolean,toMergeIsStartupStep:Boolean) is do
		sut.isStartupStep:=sutIsStartupStep
		toMerge.isStartupStep:=toMergeIsStartupStep
	
		sut.merge(toMerge)
		
		assertEquals(expectedIsStartupStep,sut.isStartupStep)
		assertEquals(expectedName,sut.name)
	end

	@feature "FeaNamingOfRAMStep"
	operation testMerge_toMergeDeleted() is do
		linkTwoNodes(toMerge)
		toMerge.outboundStubs.add(createIwStub)
		toMerge.outboundStubs.add(createIwStub)
	
		sut.merge(toMerge)
		
		assertVoid(toMerge.concern)
		assertEquals(0,toMerge.nodes.size)
		assertEquals(0,toMerge.outboundStubs.size)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testMerge_NodeAdded() is do
		linkTwoNodes(sut)
		linkTwoNodes(toMerge)
		
		sut.merge(toMerge)
		
		assertEquals(4,sut.nodes.size)
	end
	
	operation testMerge_OutboundStub() is do
		bindTwoStub(sut)
		bindTwoStub(toMerge)
	
		sut.merge(toMerge)
		
		assertEquals(4,sut.outboundStubs.size)
	end

	operation bindTwoStub(step:IwStep) is do
		step.outboundStubs.add(createIwStub)
		step.outboundStubs.add(createIwStub)
	end
	
	operation linkTwoNodes(step:IwStep) is do
		step.nodes.add(createIwCustomizableNode)
		step.nodes.add(createIwCustomizableNode)
	end
}