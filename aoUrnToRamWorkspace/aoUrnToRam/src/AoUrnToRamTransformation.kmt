package aoUrnToRam;

require kermeta
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"
require "platform:/resource/aoUrnToRam/src/iwToIw/InsertInputProcessingNodes/_Ref.kmt"
require "platform:/resource/aoUrnToRam/src/iwToIw/LinkSteps/_Ref.kmt"
require "platform:/resource/aoUrnToRam/src/iwToRam/_Ref.kmt"
require "platform:/resource/aoUrnToRam/src/iwToStepView/_Ref.kmt"
require "platform:/resource/aoUrnToRam/src/iwToJavaInstantiator/_Ref.kmt"
require "platform:/resource/aoUrnToRam/src/iwToJavaProgram/_Ref.kmt"
require "platform:/resource/aoUrnToRam/src/ModelRepository.kmt"
require "platform:/resource/aoUrnToRam/src/textView/TextView.kmt"

using kermeta::persistence
using kermeta::standard
using kermeta::io
using oneurn::urn
using intermediateWorkflow
using ramstructural
using aoUrnToRam::util

class AoUrnToRamTransformation
{
	attribute repository:ModelRepository
	attribute dotAbsoluteFileUri:String
	attribute iwFileName:String
	attribute isIwFileOutputEnabled:Boolean
	attribute isRamStepViewAsDotOutputEnabled:Boolean
	attribute imgFolderAbsoluteFileUri:String
	
	operation initialize(dotAbsoluteFileUri:String,imgFolderAbsoluteFileUri:String):AoUrnToRamTransformation is do
		self.dotAbsoluteFileUri:=dotAbsoluteFileUri
		self.imgFolderAbsoluteFileUri:=imgFolderAbsoluteFileUri
		
		repository:= ModelRepository.new
		iwFileName:="Iw.xmi"
		isIwFileOutputEnabled:=false
		isRamStepViewAsDotOutputEnabled:=false
		result:=self 
	end

	operation transform(sourceAbsoluteFileUri:String,destinationAbsoluteFolderUri:String) is do
		//stle: useful for development but remove on release code
		registerMetamodels
		//stle: until destination merge is implemented
		extern aoUrnToRam::javaExternalCall::File.removeDirectory_DirectoryUri(destinationAbsoluteFolderUri)
		
		var urnSpec:URNspec init loadUrnSpec(sourceAbsoluteFileUri)
		
		var iwModel:IwModel init aoUrnToIw(urnSpec)
		outputIwFile(iwModel,destinationAbsoluteFolderUri)
		
		var ramWorkspaceAbsoluteFolderUri:String init Path.new.combine(destinationAbsoluteFolderUri,iwModel.name)
		outputRamStepClassDiagram(iwModel,ramWorkspaceAbsoluteFolderUri)
		outputRamStepView(iwModel,ramWorkspaceAbsoluteFolderUri)
		ouptutRamJavaInstantiator(iwModel,ramWorkspaceAbsoluteFolderUri)
		ouptutRamJavaView(iwModel,ramWorkspaceAbsoluteFolderUri)
	end
	
	operation loadUrnSpec(absoluteFileUri:String):URNspec is do
		result?=repository.load(absoluteFileUri)
		//see @UrnSpecNameWorkAround
		result.urnSpecName:=getFileNameWithoutExt(absoluteFileUri)
	end
	
	operation getFileNameWithoutExt(absoluteFileUri:String):String is do
		var fileName:String init absoluteFileUri.split("/").last
		//stle: hack, use RegExInstead
		var fileNameWithoutExt:String init fileName.substring(0,fileName.size-5)  
		result:=fileNameWithoutExt
	end
	
	operation outputIwFile(iwModel:IwModel,destinationAbsoluteFileUri:String) is do
		if(isIwFileOutputEnabled) then
			repository.save(iwModel,destinationAbsoluteFileUri+"\\"+iwFileName,"platform:/resource/aoUrnToRam/metamodel/intermediateWorkflow.ecore")
		end
	end
	
	operation outputRamStepClassDiagram(iwModel:IwModel,ramWorkspaceAbsoluteFolderUri:String) is do
		iwModel.toRam.each{ramStepClassDiagram|
			var ramStepClassDiagramAbsoluteFileUri:String init Path.new.combine(ramWorkspaceAbsoluteFolderUri,ramStepClassDiagram.workspacePath)+".xmi"
			repository.save(ramStepClassDiagram,ramStepClassDiagramAbsoluteFileUri,"platform:/resource/aoUrnToRam/metamodel/RAMStructural.ecore")
		}
	end
	
	operation outputRamStepView(iwModel:IwModel,ramWorkspaceAbsoluteFolderUri:String) is do
		var stepViews:OrderedSet<StepView> init iwModel.toStepView(absoluteFileUriToWindowsPath(imgFolderAbsoluteFileUri))
		outputRamStepViewAsDot(stepViews,ramWorkspaceAbsoluteFolderUri)
		outputRamStepViewAsImg(stepViews,ramWorkspaceAbsoluteFolderUri)
	end

	operation outputRamStepViewAsDot(stepViews:OrderedSet<StepView>,ramWorkspaceAbsoluteFolderUri:String) is do
		if(isRamStepViewAsDotOutputEnabled) then
			stepViews.each{stepView|
				var stepViewAsDotAbsoluteFileUri:String init Path.new.combine(ramWorkspaceAbsoluteFolderUri,stepView.workspacePath)+".dot" 
				FileIO.new.writeTextFile(stepViewAsDotAbsoluteFileUri,stepView.dot)
			} 
	    end
	end

	operation outputRamStepViewAsImg(stepViews:OrderedSet<StepView>,ramWorkspaceAbsoluteFolderUri:String) is do
		stepViews.each{stepView|
			var stepViewAsImgAbsoluteFileUri:String init Path.new.combine(ramWorkspaceAbsoluteFolderUri,stepView.workspacePath)+".png"
			var stepViewAsImgFilePath:String init absoluteFileUriToWindowsPath(stepViewAsImgAbsoluteFileUri)
			var dotFilePath:String init absoluteFileUriToWindowsPath(dotAbsoluteFileUri)
			
		    extern aoUrnToRam::javaExternalCall::CommandLine.exe(dotFilePath+" -Tpng -o\""+stepViewAsImgFilePath+"\"",stepView.dot)
	    }
	end
	
	operation ouptutRamJavaInstantiator(iwModel:IwModel,ramWorkspaceAbsoluteFolderUri:String) is do
		iwModel.jiToJavaInstantiator.each{workflowInstantiator|
			ouptutTextView(workflowInstantiator,ramWorkspaceAbsoluteFolderUri,".java")
		}
	end
	
	operation ouptutRamJavaView(iwModel:IwModel,ramWorkspaceAbsoluteFolderUri:String) is do
		ouptutTextView(iwModel.jpToJavaView,ramWorkspaceAbsoluteFolderUri,".java")
	end
	
	operation ouptutTextView(textView:TextView,ramWorkspaceAbsoluteFolderUri:String,extension:String) is do
		var absoluteFileUri:String init Path.new.combine(ramWorkspaceAbsoluteFolderUri,textView.workspacePath)+extension
		FileIO.new.writeTextFile(absoluteFileUri,textView.content)
	end
	
	operation aoUrnToIw(urnSpec:URNspec):IwModel is do
		result:=urnSpec.toIw
		result.insertInputProcessingNodes
		result.linkSteps
	end

	//Only Windows is supported at this point
	operation absoluteFileUriToWindowsPath(absoluteFileUri:String):String is do
		result:=absoluteFileUri.replace("file:///","")
		result:=result.replace("/","\\")
	end
	
	operation registerMetamodels() is do
		var repository : EMFRepository init EMFRepository.new
		repository.registerEcoreFile("platform:/resource/aoUrnToRam/metamodel/oneurn.ecore")
		repository.registerEcoreFile("platform:/resource/aoUrnToRam/metamodel/intermediateWorkflow.ecore")
	end
}