package intermediateWorkflow;

require "platform:/resource/aoUrnToRam/src/iwToJavaInstantiator/_Ref.kmt"

using kermeta::standard
using javaInstantiator
using aoUrnToRam::util //stle:think about this

aspect class IwWorkflow {
	property readonly jiSUBPACKAGE:String 
	getter is do
		//STLE:DRY with other trans
		result:="Instantiators"
	end
	
	property readonly jiWORKFLOW_INSTANTIATOR_BASE_CLASS:String 
	getter is do
		result:="WorkflowInstantiator"
	end

	property readonly jiCustomizedClassSubPackage:String 
	getter is do
		result:=model.name+".Steps."+concern.name
	end
	
	property readonly jiWorkspacePath:String 
	getter is do
		result:=Path.new.combine(jiSUBPACKAGE,Path.new.combine(concern.name,workflowInstantiatorName))
	end
	
	property readonly jiPackageName:String 
	getter is do
		result:=model.name+"."+jiSUBPACKAGE+"."+concern.name
	end

	property readonly workflowInstantiatorName:String 
	getter is do
		result:=name+jiWORKFLOW_INSTANTIATOR_BASE_CLASS
	end

	property readonly workflowInstantiatorFullyQualifiedName:String 
	getter is do
		result:=jiPackageName+"."+workflowInstantiatorName
	end

	operation jiToWorkflowInstantiator():WorkflowInstantiator is do
		result:=WorkflowInstantiator.new.initialize_WorkflowInstantiator(jiWorkspacePath,jiCustomizedClassSubPackage)
		jiAppendContent(result)
	end
	
	operation jiAppendContent(workflowInstantiator:WorkflowInstantiator) is do
		jiAppendPackage(workflowInstantiator)
		jiAppendImports(workflowInstantiator)
		
		jiAppendClassPre(workflowInstantiator)
		
		jiAppendBuildStatements(workflowInstantiator)

		jiAppendLinkMethod(workflowInstantiator)
		jiAppendLinkNodesToNextNodesMethod(workflowInstantiator)
		jiAppendLinkNodesToWorkflowMethod(workflowInstantiator)
		jiAppendLinkStartNodesToWorkflowMethod(workflowInstantiator)

		jiAppendBindMethod(workflowInstantiator)
				
		jiAppendClassPost(workflowInstantiator)
	end
	
	operation jiAppendPackage(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendPackage(jiPackageName)
	end
	
	operation jiAppendImports(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendImport("ram.reactiveworkflow.*")
		workflowInstantiator.appendImport("ram.workflow.*")
		workflowInstantiator.appendNextLine
	end
	
	operation jiAppendClassPre(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.append("public class ")
		workflowInstantiator.append(name)
		workflowInstantiator.append("WorkflowInstantiator extends WorkflowInstantiator{\n")
	end

	operation jiAppendBuildStatements(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.append("private Workflow _workflow=new Workflow();\n")
		nodes.each{node|node.jiAppendBuildStatement(workflowInstantiator)}
	end
	
	operation jiAppendLinkMethod(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendMethod_Pre("public void link(){\n")
		workflowInstantiator.appendMethodInvocation_0Param("linkNodesToNextNodes")
		workflowInstantiator.appendMethodInvocation_0Param("linkNodesToWorkflow")
		workflowInstantiator.appendMethodInvocation_0Param("linkStartNodesToWorkflow")
		workflowInstantiator.appendMethod_Post
	end
	
	operation jiAppendLinkNodesToNextNodesMethod(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendMethod_Pre("public void linkNodesToNextNodes(){\n")
		nodes.each{node|node.jiAppendLinkNodesToNextNodesStatement(workflowInstantiator)}
		workflowInstantiator.appendMethod_Post
	end
	
	operation jiAppendLinkNodesToWorkflowMethod(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendMethod_Pre("public void linkNodesToWorkflow(){\n")
		nodes.each{node|node.jiAppendLinkNodesToWorkflowStatement(workflowInstantiator)}
		workflowInstantiator.appendMethod_Post
	end
	
	operation jiAppendLinkStartNodesToWorkflowMethod(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendMethod_Pre("public void linkStartNodesToWorkflow(){\n")
		nodes.each{node|node.jiAppendLinkStartNodesToWorkflowStatement(workflowInstantiator)}
		workflowInstantiator.appendMethod_Post
	end
	
	operation jiAppendBindMethod(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendMethod_Pre("public void bind(")
		workflowInstantiator.appendWithDelimiter(plugins,",\n                     ",
			function{plugin:IwWorkflow|plugin.jiBindMethodParam}
		) 
		workflowInstantiator.append("){\n")
		stubs.each{stub|stub.staticPluginBinding.jiAppendBindStatement(workflowInstantiator)}
		workflowInstantiator.appendMethod_Post	
	end

	operation jiBindMethodParam():String is do
		result:=workflowInstantiatorFullyQualifiedName+" "+jiBindMethod_PluginParamName
	end
	
	operation jiAppendClassPost(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.append("}\n")	
	end

	operation jiBindMethod_PluginParamName():String is do
		result:="p_"+name
	end
}