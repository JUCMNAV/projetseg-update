package intermediateWorkflow;

require "platform:/resource/aoUrnToRam/src/iwToJavaInstantiator/_Ref.kmt"

using kermeta::standard
using javaInstantiator

aspect class IwNode {
	operation jiAppendBuildStatement(workflowInstantiator:WorkflowInstantiator) is do
		//stle: temp do nothing
		//throw exception in this case because abstract in aspect produces meaningless excpetion msg
	end
	
	operation jiAppendWorkflowNodeMember(workflowInstantiator:WorkflowInstantiator,workflowNodeType:String) is do
		workflowInstantiator.appendPublicMemberDefaultConstructor(workflowNodeType,jiMemberName)
	end
	
	operation jiAppendCustomizableNodeMember(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendPublicMember(
			"CustomizableNode",
			jiMemberName,
			jiGetCustomizableNodeMemberInitialization(workflowInstantiator)
		)
	end
	
	operation jiGetCustomizableNodeMemberInitialization(workflowInstantiator:WorkflowInstantiator):String is do
		var customizableNodeFullyQualifiedName:String 
		init workflowInstantiator.customizableClassSubPackage+"."+step.name+"."+name
		
		result:="createCustomizableNode(\""+customizableNodeFullyQualifiedName+"\")"
	end
	
	operation jiAppendLinkNodesToNextNodesStatement(workflowInstantiator:WorkflowInstantiator) is do
		succs.each{succ|succ.jiAppendAddNextNodeStatements(workflowInstantiator)}
	end
	
	operation jiAppendLinkNodesToWorkflowStatement(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendMethodInvocationOn_1Param(
			workflowInstantiator.workflowMemberName,
			"addNode",
			jiMemberName
		)
	end
	
	operation jiAppendLinkStartNodesToWorkflowStatement(workflowInstantiator:WorkflowInstantiator) is do
		//Default: do nothing
	end
	
	operation jiMemberName():String is do 
		result:="_"+name
	end
}
