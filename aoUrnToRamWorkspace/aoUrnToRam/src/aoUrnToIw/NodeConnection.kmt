package oneurn::ucm::map;
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"

using kermeta::standard
using intermediateWorkflow

aspect class NodeConnection{
	reference iwNodeConnection: IwNodeConnection
	
	operation build() is do
		if (source.isKindOf(Connect)) then
			// nothing to do as Connect is ignored
		else
			iwNodeConnection:=IwNodeConnection.new
			iwNodeConnection.conditionName:=conditionLabel
			iwNodeConnection.trigger:=false
		end
	end
	
	operation link() is do
		if (source.isKindOf(Connect)) then
			// nothing to do as Connect is ignored
		else
			iwNodeConnection.source:=source.asType(PathNode).iwExitNode
			if (target.isKindOf(Connect)) then
				// need to skip the Connect and use the following node as target
				iwNodeConnection.target:=target.succ.first.asType(NodeConnection).iwSingleTarget
				// if Connect precedes a WaitingPlace, then the node connection is a trigger path
				if (iwNodeConnection.target.isKindOf(IwWaitingPlace)) then
					iwNodeConnection.trigger:=true
				end
			else
				iwNodeConnection.target:=iwSingleTarget
			end
		end
	end

//*********************************************************
//AoUrnToRam Extensions
//*********************************************************/
	property readonly iwSingleTarget : IwNode
	getter is do
		if(targetAsPathNode.iwHasNodes) then
			result:=target.asType(PathNode).iwEntryNode
		else
		    //target has no iwNodes implies target has always has a single succ
			//stle: single again
			result:=target.succ.one.asType(NodeConnection).iwSingleTarget
		end
	end
	
	property readonly iwSinglePredNodeConnection : IwNodeConnection
	getter is do
		if(iwNodeConnection.isVoid==false) then
			result:=iwNodeConnection
		else
		    //source has no iwNodeConnection implies a single IwNodeConnection exists before
			//stle: single again
			result:=source.pred.one.asType(NodeConnection).iwSinglePredNodeConnection
		end
	end
	
	property readonly conditionLabel: String
	getter is do
		if(condition.isVoid==false) then
			result:=condition.label
		else
			result:=void
		end
	end
	
	property readonly targetAsPathNode: PathNode
	getter is do
		result:=target.asType(PathNode)
	end

	property readonly sourceAsPathNode: PathNode
	getter is do
		result:=source.asType(PathNode)
	end

}