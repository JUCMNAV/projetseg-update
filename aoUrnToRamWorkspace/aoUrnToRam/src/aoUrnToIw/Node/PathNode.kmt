package oneurn::ucm::map;
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"

using kermeta::standard
using oneurn::urncore
using intermediateWorkflow

aspect class PathNode {
	reference iwOutput: IwOutput
	reference iwInput: 	IwInput
	reference _iwNodes: oset IwNode[0..3] attribute _isIwNodesCached:Boolean
	
//*********************************************************
//Build
//*********************************************************/
	operation build() is do
		buildIwOutputNode
		buildIwInputNode
		invokeBuildOnNodeConnections
	end

	operation buildIwOutputNode() is do
		if(inOutExpression.hasOut) then
			iwOutput:=IwOutput.new
			iwOutput.name:=inOutExpression.out
		end
	end
	
	operation buildIwInputNode() is do
		if(inOutExpression.hasIn) then
			iwInput:=IwInput.new
			iwInput.name:=inOutExpression.in
		end
	end

	//stle:test later
	operation invokeBuildOnNodeConnections() is do
		if(hasIwNodes) then
			succAsNodeConnection.each{nodeConnection|nodeConnection.build}
		end
	end
	
	property readonly hasIwNodes: Boolean
	getter is do
		//Avoid using iwNodes_ReadOnly in build
		result:=iwOutput.isVoid==false or
				iwInput.isVoid==false or
				iwEquivalentNode.isVoid==false
	end

//*********************************************************
//Link
//*********************************************************/
	operation link() is do
		linkUcmMap
		linkSuccs
		linkInternal
	end

	operation linkUcmMap() is do
		iwNodes_ReadOnly.each{iwNode|iwNode.workflow:=ucmMap.iwWorkflow}
	end

	operation linkInternal() is do
		var numOfInternalLinks:Integer init iwNodes_ReadOnly.size-1 //-1 because last internal node has no outcoming internal link
		numOfInternalLinks.times{i|
			var connection:IwNodeConnection init IwNodeConnection.new
			connection.source:=iwNodes_ReadOnly.at(i)
			connection.target:=iwNodes_ReadOnly.at(i+1)
		}
	end
	
	operation linkSuccs() is do
		if(iwNodes_ReadOnly.isEmpty==false) then
			succ.each{nodeConnection|nodeConnection.asType(NodeConnection).link}
		end
	end
	
//*********************************************************
//virtual
//*********************************************************/
	operation IsOutputInputBefore():Boolean is do
		result:=true
	end
	
	operation iwEquivalentNode():IwNode is do
		result:=void
	end

//*********************************************************
//iwNodes
//*********************************************************/
	property readonly iwEntryNode: IwNode
	getter is do
		result:=iwNodes_ReadOnly.first
	end
	
	property readonly iwExitNode: IwNode
	getter is do
		result:=iwNodes_ReadOnly.last
	end

	property readonly iwNodes_ReadOnly: IwNode[0..3]
	getter is do
		if(_isIwNodesCached!=true) then
			initIwNodes
			_isIwNodesCached:=true
		end
		result:=_iwNodes.asOrderedSet //return a copy(enforce read-only)
	end

	operation initIwNodes() is do
		if(IsOutputInputBefore) then
			CollectionExt_AddOptional(_iwNodes,iwOutput)
			CollectionExt_AddOptional(_iwNodes,iwInput)
			CollectionExt_AddOptional(_iwNodes,iwEquivalentNode)
		else
			CollectionExt_AddOptional(_iwNodes,iwEquivalentNode)
			CollectionExt_AddOptional(_iwNodes,iwOutput)
			CollectionExt_AddOptional(_iwNodes,iwInput)
		end
	end
	
	//stle: reuse static
	operation CollectionExt_AddOptional<T>(collection:Collection<T>, element:T) is do
		if(element.isVoid==false) then
			collection.add(element)
		end
	end
	

//*********************************************************
//inOutExpression
//*********************************************************/
	property readonly inOutExpression : InOutExpression
	getter is do
		var ramMetadata:Metadata init getRamMetadata()
		var inOutExpression:InOutExpression init InOutExpression.new
		inOutExpression.construct(if ramMetadata.isVoid then "" else ramMetadata.~value end)
		result:=inOutExpression
	end
	
	operation getRamMetadata():Metadata is do
		result:= metadata.select{n|n.name.toLowerCase()=="ram"}.one()
	end
	
//*********************************************************
//AoUrnToRam Extensions
//*********************************************************/
	property readonly predAsNodeConnection : OrderedSet<NodeConnection>
	getter is do
		//stle:dry
		result:= pred.collect{iurnConnection|iurnConnection.asType(NodeConnection)}.asOrderedSet
	end
	
	property readonly succAsNodeConnection : OrderedSet<NodeConnection>
	getter is do
		//stle:dry
		result:= succ.collect{iurnConnection|iurnConnection.asType(NodeConnection)}.asOrderedSet
	end
	
	property ucmMap: UCMmap
	getter is do
		result:=diagram.asType(UCMmap)
	end
	setter is do
		diagram:=value
	end
}