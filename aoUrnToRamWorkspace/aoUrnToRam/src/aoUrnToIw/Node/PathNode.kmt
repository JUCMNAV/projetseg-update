package oneurn::ucm::map;
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"

using kermeta::standard
using oneurn::urncore
using intermediateWorkflow

aspect class PathNode {
	reference _iwNodes: oset IwNode[0..3]
	reference iwOutput:IwOutput
	reference iwInput:IwInput
	reference iwEquivalentNode:IwNode
	
	
//*********************************************************
//Build
//*********************************************************/
	operation build() is do
		buildIwOutputNode
		buildIwInputNode
		buildIwNodeTemplate
		if(iwHasNodes) then
			invokeBuildOnNodeConnections
		end
	end

	operation buildIwOutputNode() is do
		if(inOutExpression.hasOut) then
			iwOutput:=IwOutput.new
			iwOutput.name:=inOutExpression.out
			_iwNodes.add(iwOutput)
		end
	end
	
	operation buildIwInputNode() is do
		if(inOutExpression.hasIn) then
			iwInput:=IwInput.new
			iwInput.name:=inOutExpression.in
			_iwNodes.add(iwInput)
		end
	end

	//stle:test later
	operation invokeBuildOnNodeConnections() is do
		succAsNodeConnection.each{nodeConnection|nodeConnection.build}
	end
	
//*********************************************************
//Template Method
//*********************************************************/
	//PathNode subclass should override this template method to build
	//the iwNode that is equivalent to the PathNode.
	//PathNode subclass should use addIwEquivalentNodeAfterOutIn or addIwEquivalentNodeBeforeOutIn
	//to declare if the IwNode is the EntryNode or the ExitNode in the case
	//where there is an InOut expression associated with the node.
	operation buildIwNodeTemplate() is do
		//default: do nothing
	end
	
	operation addIwEquivalentNodeAfterOutIn(iwNode:IwNode) is do
		iwEquivalentNode:=iwNode
		_iwNodes.add(iwNode)
	end
	
	operation addIwEquivalentNodeBeforeOutIn(iwNode:IwNode) is do
		self.iwEquivalentNode:=iwNode
		_iwNodes.addAt(0,iwNode)
	end
	
//*********************************************************
//Link
//*********************************************************/
	operation link() is do
		linkUcmMap
		linkInternal
		if(iwHasNodes) then
			invokeLinkOnSuccs
		end
	end

	operation linkUcmMap() is do
		_iwNodes.each{iwNode|iwNode.workflow:=ucmMap.iwWorkflow}
	end

	operation linkInternal() is do
		var numOfInternalLinks:Integer init _iwNodes.size-1 //-1 because last internal node has no outcoming internal link
		numOfInternalLinks.times{i|
			var connection:IwNodeConnection init IwNodeConnection.new
			connection.source:=_iwNodes.at(i)
			connection.target:=_iwNodes.at(i+1)
		}
	end
	
	operation invokeLinkOnSuccs() is do
		succ.each{nodeConnection|nodeConnection.asType(NodeConnection).link}
	end
	
//*********************************************************
// Properties
//*********************************************************/
	property readonly iwHasNodes: Boolean
	getter is do
		result:=_iwNodes.isEmpty==false
	end

	property readonly iwEntryNode: IwNode
	getter is do
		result:=_iwNodes.first
	end
	
	property readonly iwExitNode: IwNode
	getter is do
		result:=_iwNodes.last
	end
	
	property readonly inOutExpression : InOutExpression
	getter is do
		var ramMetadata:Metadata init getRamMetadata()
		var inOutExpression:InOutExpression init InOutExpression.new
		inOutExpression.construct(if ramMetadata.isVoid then "" else ramMetadata.~value end)
		result:=inOutExpression
	end
	
	operation getRamMetadata():Metadata is do
		result:= metadata.select{n|n.name.toLowerCase()=="ram"}.one()
	end
	
//*********************************************************
//AoUrnToRam Extensions
//*********************************************************/
	property readonly predAsNodeConnection : OrderedSet<NodeConnection>
	getter is do
		//stle:dry
		result:= pred.collect{iurnConnection|iurnConnection.asType(NodeConnection)}.asOrderedSet
	end
	
	property readonly succAsNodeConnection : OrderedSet<NodeConnection>
	getter is do
		//stle:dry
		result:= succ.collect{iurnConnection|iurnConnection.asType(NodeConnection)}.asOrderedSet
	end
	
	property ucmMap: UCMmap
	getter is do
		result:=diagram.asType(UCMmap)
	end
	setter is do
		diagram:=value
	end
}