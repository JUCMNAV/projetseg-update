package oneurn::ucm::map;
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"

using kermeta::standard
using kermeta::utils
using intermediateWorkflow

class PointcutStubStrategy inherits StubStrategy {
	reference iwEndPoints:Hashtable<NodeConnection,IwEndPoint>
	reference iwStartPoints:Hashtable<NodeConnection,IwStartPoint>

	method build() is do
		buildIwEndPoints
		buildIwStartPoints
		
		stub.invokeBuildOnNodeConnections //stle: is it common? how to test?
    end
    
    operation buildIwEndPoints() is do
    	iwEndPoints:=Hashtable<NodeConnection,IwEndPoint>.new

    	var index:Integer init 1
		stub.predAsNodeConnection.each{nodeConnection|
			var iwEndPoint:IwEndPoint init IwEndPoint.new
			iwEndPoint.name:=stub.name+"_In"+index.toString
			iwEndPoints.put(nodeConnection,iwEndPoint)
			index:=index+1
		}
    end
    
    operation buildIwStartPoints() is do
    	iwStartPoints:=Hashtable<NodeConnection,IwStartPoint>.new

    	var index:Integer init 1
		stub.succAsNodeConnection.each{nodeConnection|
			var iwStartPoint:IwStartPoint init IwStartPoint.new
			iwStartPoint.name:=stub.name+"_Out"+index.toString
			//stle:need to fix: AspectMap: Should always bind startPoint and endPoint to *, maybe another startType:=aspectBound
			iwStartPoint.startPointType:="bound"
			
			iwStartPoints.put(nodeConnection,iwStartPoint)
			index:=index+1
		}
    end

	method link() is do
		linkIwEndPointsToIwWorkflow
		linkIwStartPointsToIwWorkflow
		stub.invokeLinkOnSuccs //stle: is it common? how to test?
	end
	
	operation linkIwStartPointsToIwWorkflow() is do
		iwStartPoints.values.each{iwStartPoint|
			stub.ucmMap.iwWorkflow.nodes.add(iwStartPoint)
			stub.ucmMap.iwWorkflow.startPoints.add(iwStartPoint)
		}
	end
	
	operation linkIwEndPointsToIwWorkflow() is do
		iwEndPoints.values.each{iwEndPoint|iwEndPoint.workflow:=stub.ucmMap.iwWorkflow}
	end
	

	method hasNodes():Boolean is do
		result:=iwEndPoints.size>0 or iwStartPoints.size>0
    end

	method entryNode(nodeConnection:NodeConnection):IwNode is do
		result:=iwEndPoints.getValue(nodeConnection)
    end

	method exitNode(nodeConnection:NodeConnection):IwNode is do
		result:=iwStartPoints.getValue(nodeConnection)
    end
}

