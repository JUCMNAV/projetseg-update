package oneurn::ucm::map;
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"

using kermeta::standard
using intermediateWorkflow

aspect class Stub {
	reference iwStub: IwStub

//*********************************************************
//Build
//*********************************************************/
	method buildIwNodeTemplate() is do
		iwStub:=IwStub.new
		iwStub.name:=nameOrPrefixId("Stub")
		iwStub.stubType:=iwStubType
		//Will never have OutIn expression for stub, but superclass behaviour is still reused
		addIwEquivalentNodeAfterOutIn(iwStub)
		
		bindings.each{pluginBinding|pluginBinding.build}
	end
	
//*********************************************************
//Link
//*********************************************************/
	method link() is do
		super
		initStubEntryIndexes
		initStubExitIndexes
		
		bindings.each{pluginBinding|pluginBinding.link}
	end

	operation initStubEntryIndexes() is do
		var nextIndex:Integer init 1
		predAsNodeConnection.each{nodeConnection|
			nodeConnection.iwSinglePredNodeConnection.stubEntryIndex:=nextIndex
			nextIndex:=nextIndex+1
		}
	end
	
	operation initStubExitIndexes() is do
		var nextIndex:Integer init 1
		succAsNodeConnection.each{nodeConnection|
			nodeConnection.iwNodeConnection.stubExitIndex:=nextIndex
			nextIndex:=nextIndex+1
		}
	end
	
	operation addIwPluginBinding(iwPluginBinding:IwPluginBinding) is do
		iwStub.pluginBindings.add(iwPluginBinding)
	end
	
	property readonly iwStubType:String
	getter is do
		if(~aspect.isVoid) then
			result:="static"
		else
			result:="aspectMarker"
		end
	end
}

