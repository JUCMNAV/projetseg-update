package oneurn::ucm::map;
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"

using kermeta::standard
using intermediateWorkflow

aspect class Stub {
	reference iwStub: IwStub
	
	method build() is do
		bindings.each{pluginBinding|pluginBinding.build}

		//Ignore ram expression on stubs
		//Stubs can have many in-paths and out-paths; thus, no obvious place to insert the outNode/inNode
		//Moreover, it complicates the plugin bindings since inBinding and outBinding has reference
		//to the NodeConnection. Inserting outNode/inNod on stubs will prevent these NodeConnection from
		//being directly connected to the stub  
		buildIwStub
		super()
	end

	operation buildIwStub() is do
		iwStub:=IwStub.new
		iwStub.name:=nameOrPrefixId("Stub")
	end
	
	method link() is do
		super
		initStubEntryIndexes
		initStubExitIndexes
		
		bindings.each{pluginBinding|pluginBinding.link}
	end

	operation initStubEntryIndexes() is do
		var nextIndex:Integer init 1
		predAsNodeConnection.each{nodeConnection|
			nodeConnection.iwSinglePredNodeConnection.stubEntryIndex:=nextIndex
			nextIndex:=nextIndex+1
		}
	end
	
	operation initStubExitIndexes() is do
		var nextIndex:Integer init 1
		succAsNodeConnection.each{nodeConnection|
			nodeConnection.iwNodeConnection.stubExitIndex:=nextIndex
			nextIndex:=nextIndex+1
		}
	end
	
	operation addIwPluginBinding(iwPluginBinding:IwPluginBinding) is do
		iwStub.pluginBindings.add(iwPluginBinding)
	end

	method iwEquivalentNode():IwNode is do
		result:=iwStub
	end
}

