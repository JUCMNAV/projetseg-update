package oneurn::ucm::map;
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"

using kermeta::standard
using intermediateWorkflow

aspect class Stub {
	attribute _strategy:StubStrategy
	
	//LazyLoad because the creation of Stub is not under our control
	property readonly strategy:StubStrategy 
	getter is do
		if(_strategy.isVoid) then
			if(isPointcutStub) then
				_strategy:=PointcutStubStrategy.new.initialize(self)
			else
				_strategy:=RegularStubStrategy.new.initialize(self)
			end 
		end
		result:=_strategy
	end
	
	method build() is do
		strategy.build
	end
	
	method link() is do
		strategy.link
	end
	
	method iwHasNodes():Boolean is do 
		result:=strategy.hasNodes 
	end
	
	method iwGetEntryNode(nodeConnection:NodeConnection):IwNode is do
		result:=strategy.entryNode(nodeConnection)
	end
	
	method iwGetExitNode(nodeConnection:NodeConnection):IwNode is do
		result:=strategy.exitNode(nodeConnection)
	end
	
	operation addIwPluginBinding(iwPluginBinding:IwPluginBinding) is do
		//PreCondition: isPointcutStub==false
		var iwStub:IwStub init iwGetEntryNode(void).asType(IwStub)
		iwStub.pluginBindings.add(iwPluginBinding)
	end
	
	property readonly isPointcutStub:Boolean
	getter is do
		result:=false
		if(aopointcut.isVoid==false) then
			if(aopointcut!=PointcutKind.None) then
				result:=true
			end
		end
	end
}

