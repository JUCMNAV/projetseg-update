package oneurn::ucm::map;
require "platform:/resource/aoUrnToRam/src/aoUrnToIw/_Ref.kmt"

using kermeta::standard
using intermediateWorkflow

class RegularStubStrategy inherits StubStrategy {
	reference iwStub: IwStub

	method build() is do
		iwStub:=IwStub.new
		iwStub.stubType:=iwStubType
		if(iwStubType=="aspectMarker") then
			iwStub.name:="aspectMarker"+stub.id
		else
			iwStub.name:=stub.nameOrPrefixId("Stub")
		end
		
		stub.bindings.each{pluginBinding|pluginBinding.build}
    end

	method link() is do
		iwStub.workflow:=stub.ucmMap.iwWorkflow
		initStubEntryIndexes
		initStubExitIndexes
		
		stub.bindings.each{pluginBinding|pluginBinding.link}
	end

	operation initStubEntryIndexes() is do
		var nextIndex:Integer init 1
		stub.predAsNodeConnection.each{nodeConnection|
			nodeConnection.iwSinglePredNodeConnection.stubEntryIndex:=nextIndex
			nextIndex:=nextIndex+1
		}
	end
	
	operation initStubExitIndexes() is do
		var nextIndex:Integer init 1
		stub.succAsNodeConnection.each{nodeConnection|
			nodeConnection.iwNodeConnection.stubExitIndex:=nextIndex
			nextIndex:=nextIndex+1
		}
	end

	method hasNodes():Boolean is do
		result:=true
    end

	method entryNode(nodeConnection:NodeConnection):IwNode is do
		result:=iwStub
    end

	method exitNode(nodeConnection:NodeConnection):IwNode is do
		result:=iwStub
    end
    
    property readonly iwStubType:String
	getter is do
		result:="static"
		if(stub.~aspect.isVoid==false) then
			if(stub.~aspect!=AspectKind.None) then
				result:="aspectMarker"
			end
		end
	end
}

