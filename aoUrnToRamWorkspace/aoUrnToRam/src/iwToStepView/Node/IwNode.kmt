package intermediateWorkflow;


require "platform:/resource/aoUrnToRam/src/iwToStepView/_Ref.kmt"

using kermeta::standard

aspect class IwNode {
	//virtual
	operation appendVertex(stepView:StepView) is do
		stepView.appendLine("")
		stepView.append("        ")  appendId(stepView) stepView.appendLine("[")
		if(getIsCustomizable) then
			stepView.appendLine("            style=filled,")
			stepView.appendLine("            fillcolor="+stepView.customizableClassColor+",")
		end
		appendVertexContent(stepView)
		stepView.appendLine("        ]")
	end

	operation appendVertexContent(stepView:StepView) is do
		stepView.appendLine("")
		stepView.appendLine("            label=")
		stepView.appendLine("            <<table border=\"0\" cellborder=\"0\" cellpadding=\"0\" cellspacing=\"0\">")
		appendNodeTitleRow(stepView)
		stepView.appendLine("            </table>>")
	end
	
	operation appendNodeTitleRow(stepView:StepView) is do
		stepView.appendLine("                <tr>")
		stepView.append("                    <td cellpadding=\"3\">") stepView.appendImg(getImageName) stepView.appendLine("</td>")
		stepView.append("                    <td align=\"center\" width=\"") stepView.append(getMinWidth.toString) stepView.append("\">") stepView.append(name) stepView.appendLine("</td>")
		stepView.appendLine("                </tr>")
	end
	
	operation appendVertex_OtherStep(stepView:StepView) is do
		stepView.appendLine("")
		stepView.append("        ")  
		appendId(stepView) //stle: append step name as a prefix in order to be unique
		stepView.append("[label=")
		stepView.append("\""+step.name+"\\n"+name+"\"") //stle:escpate
		stepView.appendLine(",style=dashed]")
	end
	
	operation appendEdges(stepView:StepView) is do
		succs.each{nodeConnection|
			nodeConnection.appendNodeConnection(stepView)
			stepView.appendLine("")
		}
	end
	
	operation appendFirstVerticesFromNextStep(stepView:StepView) is do
		succs.each{nodeConnection|
			if(nodeConnection.target.step!=step) then
				nodeConnection.target.appendVertex_OtherStep(stepView)
			end
		}
	end

	operation appendId(stepView:StepView) is do
		stepView.append(name)
	end
	
	//virtual
	operation appendBindings(stepView:StepView) is do
		//default: do nothing
	end
	
	//virtual
	operation appendPluginFromDifferentConcern(stepView:StepView) is do
		//default: do nothing		
	end
	
	//stle: must be applied everywhere, except in html-like label where html escaping must be applied
	operation dotEscape(toEscape:String):String is do
		result:=toEscape.replace("\\","\\\\")
		result:=result.replace("\"","\\\"")
		result:="\""+result+"\""
	end
	
	//virtual
	operation getMinWidth():Integer is do
		result:=0//default
	end
	
	//virtual
	operation getIsCustomizable():Boolean is do
		result:=false//default
	end
	
	//virtual
	operation getImageName():String is do
		result:=""
	end
	
	
	
}
