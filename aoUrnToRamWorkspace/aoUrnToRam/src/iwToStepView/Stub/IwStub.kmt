package intermediateWorkflow;


require "platform:/resource/aoUrnToRam/src/iwToStepView/_Ref.kmt"

using kermeta::standard


aspect class IwStub {
	method getImageName():String is do
		result:="Stub24.gif"
	end
	
	method appendVertex(stepView:StepView) is do
		if(isAspectMarker==false) then
			super(stepView)
		end
	end
	
	method appendEdges(stepView:StepView) is do
		if(isAspectMarker==false) then
			super(stepView)
		end
	end
	
	method appendVertexContent(stepView:StepView) is do
		stepView.appendLine("            shape=plaintext,")
		stepView.appendLine("            label=")
		stepView.appendLine("            <<table border=\"0\" cellborder=\"1\" cellpadding=\"0\" cellspacing=\"0\" >")
		appendStubEntry(stepView)
		appendStub(stepView)
		appendStubExit(stepView)
		stepView.appendLine("            </table>>")
	end
	
	operation appendStubEntry(stepView:StepView) is do
		stepView.appendLine("                <tr><td>")
		stepView.appendLine("                    <table border=\"0\" cellborder=\"1\" cellpadding=\"0\" cellspacing=\"0\" >")
		stepView.appendLine("                        <tr>")
		appendStubPorts(stepView,"in",numOfStubEntries)
		stepView.appendLine("                        </tr>")
		stepView.appendLine("                    </table>")
		stepView.appendLine("                </td></tr>")
	end
	
	operation appendStub(stepView:StepView) is do
		stepView.appendLine("                <tr><td>")
		stepView.appendLine("                    <table border=\"1\" cellborder=\"0\" cellpadding=\"0\" cellspacing=\"0\" >")
		appendNodeTitleRow(stepView)		
		stepView.appendLine("                    </table>")
		stepView.appendLine("                </td></tr>")
	end
	
	operation appendStubExit(stepView:StepView) is do
		if(numOfStubExits>0) then
			stepView.appendLine("                <tr><td>")
			stepView.appendLine("                    <table border=\"0\" cellborder=\"1\" cellpadding=\"0\" cellspacing=\"0\" >")
			stepView.appendLine("                        <tr>")
			appendStubPorts(stepView,"out",numOfStubExits)	
			stepView.appendLine("                        </tr>")
			stepView.appendLine("                    </table>")
			stepView.appendLine("                </td></tr>")
		end
	end
	
	//virtual
	method getMinWidth():Integer is do
		var maxOf:Set<Integer> init Set<Integer>.new
		maxOf.add(numOfStubEntries)
    	maxOf.add(numOfStubExits)
		var maxNumOfPorts:Integer init max(maxOf) 
		result:=maxNumOfPorts*15
	end

    property numOfStubEntries:Integer getter is do
		result:= max(preds.collect{nodeConnection|nodeConnection.stubEntryIndex})
	end

    property numOfStubExits:Integer getter is do
		result:= max(succs.collect{nodeConnection|nodeConnection.stubExitIndex})
	end
	
	operation appendStubPorts(stepView:StepView,prefix:String,maxIndex:Integer) is do
		maxIndex.times{i|
			stepView.append("                            <td port=\"") stepView.append(prefix) stepView.append((i+1).toString) stepView.appendLine("\" height=\"10\"></td>")
		}
	end
	
	
	//stle:max should be an extension of Collection
	operation max(col:Collection<Integer>):Integer is do
		result:=0
		col.each{element|
			if(result.isVoid) then
				result:=element
			else
				if(result<element) then
					result:=element
				end
			end
		}
	end
	
	operation appendAccrosConcernBindings(stepView:StepView) is do
		if(isExplicitlyBoundAccrosConcerns) then
			staticPluginBinding.inBindings.each{inBinding|inBinding.appendBinding(stepView)}
			staticPluginBinding.outBindings.each{outBinding|outBinding.appendBinding(stepView)}
		end
	end
	
	property readonly isExplicitlyBoundAccrosConcerns:Boolean 
	getter is do
		result:=isAspectMarker==false and staticPlugin.concern!=concern
	end
}