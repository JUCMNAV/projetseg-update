package intermediateWorkflow;


require "platform:/resource/aoUrnToRam/src/iwToRam/_Ref.kmt"

using kermeta::standard
using ramstructural
using kermeta::utils

aspect class IwStep {
	reference ramAspect:Aspect
	reference ramReactiveWorkflowInstantiation:Instantiation
	reference ramCustomizableNodeClasses:Hashtable<String,Class>
	
	property readonly ramStructuralView : ClassDiagram
	getter is do
		result := ramAspect.structuralView
	end
	
	operation buildConcern(concern:IwConcern) is do
		ramAspect.workspaceDirectory:=concern.name
	end

	operation build() is do
		ramAspect:=Aspect.new
		ramAspect.name:=self.name
		ramAspect.structuralView:=ClassDiagram.new
		ramAspect.interface:=AspectInterface.new
		
		ramReactiveWorkflowInstantiation:=Instantiation.new
		ramReactiveWorkflowInstantiation.externalAspect:="ReactiveWorkflow"
		
		nodes.each{node|node.build()}
		buildCustomizableNodeClasses
	end

	//CustomizableNodeClasses are built by IwStep because many IwCustomizableNodes may share the same RamClass  	
	operation buildCustomizableNodeClasses() is do
		ramCustomizableNodeClasses:=Hashtable<String,Class>.new
		customizableNodes.each{customizableNode|
			var toAdd:Class init customizableNode.createRamClass
			if(ramCustomizableNodeClasses.containsKey(toAdd.name)==false) then
				ramCustomizableNodeClasses.put(toAdd.name,toAdd)
			end
		}
	end
	
	operation link() is do
		addClasses
		addInstantiations
		nodes.each{node|node.link}
		linkCustomizableNodeClasses
	end
	
	operation linkCustomizableNodeClasses() is do
		ramCustomizableNodeClasses.values.each{ramClass|
			ramStructuralView.classes.add(ramClass)
		}
	end

	operation addClasses() is do
		nodes.each{node|
			node.ramClasses_PerSourceModelElement.values.each{ramClass|
				ramStructuralView.classes.add(ramClass)
			}
		}
	end
	
	operation addInstantiations() is do
		ramStructuralView.instantiations.add(ramReactiveWorkflowInstantiation)
		addReactiveWorkflowMappings
	end
	
	operation addReactiveWorkflowMappings() is do
		var mappings: Hashtable<String, Mapping> init Hashtable<String, Mapping>.new 
		
		nodes.each{node|
			node.ramClasses_PerSourceModelElement.keys.each{sourceModelElement|
				var ramClass:Class init node.ramClasses_PerSourceModelElement.getValue(sourceModelElement) 
				getMapping(mappings,sourceModelElement).maps.add(ramClass)
			}
		}
	end
	
	operation getMapping(mappings: Hashtable<String, Mapping>,sourceModelElement:String):Mapping is do
		if(mappings.containsKey(sourceModelElement)==false) then
			var mapping:Mapping init Mapping.new
			mapping.sourceModelElement:=sourceModelElement
			mappings.put(sourceModelElement,mapping)
			ramReactiveWorkflowInstantiation.mappings.add(mapping)
		end
		result:=mappings.getValue(sourceModelElement)
	end
	
	operation addRamClass(ramClass:Class) is do
		ramStructuralView.classes.add(ramClass)
	end
	
	operation mapRamClass(sourceModelElement:String,ramClass:Class) is do
		if(ramMappingsContainsKey(sourceModelElement)==false) then
			var mapping:Mapping init Mapping.new
			mapping.sourceModelElement:=sourceModelElement
			ramReactiveWorkflowInstantiation.mappings.add(mapping)
		end
		ramMappingsGetValue(sourceModelElement).maps.add(ramClass)
	end

	operation ramMappingsContainsKey(sourceModelElement:String):Boolean is do
		result:=ramReactiveWorkflowInstantiation.mappings.exists
								{mapping|mapping.sourceModelElement==sourceModelElement}  
	end
	
	operation ramMappingsGetValue(sourceModelElement:String):Mapping is do
		//stle:single again
		result:=ramReactiveWorkflowInstantiation.mappings.select
								{mapping|mapping.sourceModelElement==sourceModelElement}.one  
	end
	
	property readonly customizableNodes: IwCustomizableNode[0..*]
	getter is do
		//stle: DRY
		//stle: refactor for reuse
		result:=nodes.select{node|node.isInstanceOf(IwCustomizableNode)}
			 .collect{node|node.asType(IwCustomizableNode)}.asOrderedSet
	end
}
