package intermediateWorkflow;

require "platform:/lookup/aoUrnToRam/kermeta/iwToStepClassDiagram/_Ref.kmt"

using kermeta::standard
using ram
using kermeta::utils
using aoUrnToRam::util

aspect class IwStep {
	reference ramAspect:Aspect
	reference ramReactiveSystemWorkflowInstantiation:Instantiation
	reference ramWorkflowInstantiation:Instantiation
	reference ramCustomizableNodeClasses:Hashtable<String,Class>

	property readonly ramStructuralView : ClassDiagram
	getter is do
		result := ramAspect.structuralView
	end
	
	property readonly customizableNodes: IwCustomizableNode[0..*]
	getter is do
		//stle: DRY
		//stle: refactor for reuse
		result:=nodes.select{node|node.isInstanceOf(IwCustomizableNode)}
			 .collect{node|node.asType(IwCustomizableNode)}.asOrderedSet
	end

/*********************************************************
Build
*********************************************************/
	operation build() is do
		buildRamAspect
		buildExternalAspects
		buildCustomizableNodeClasses
		nodes.each{node|node.build}
	end
	
	operation buildRamAspect() is do
		ramAspect:=Aspect.new
		ramAspect.name:=name
		ramAspect.structuralView:=ClassDiagram.new
	end
	
	operation buildExternalAspects() is do
		ramReactiveSystemWorkflowInstantiation:=Instantiation.new
		ramWorkflowInstantiation:=Instantiation.new
	end

	//For rational see @RamCustomizableNodeClassBuildByIwStep  	
	operation buildCustomizableNodeClasses() is do
		ramCustomizableNodeClasses:=Hashtable<String,Class>.new
		customizableNodes.each{customizableNode|
			if(ramCustomizableNodeClasses.containsKey(customizableNode.name)==false) then
				ramCustomizableNodeClasses.put(customizableNode.name,customizableNode.createRamClass(customizableNode.name))
			end
		}
	end
	
/*********************************************************
Link
*********************************************************/
	
	operation link(ramWorkspace:RamWorkspace) is do
		linkInstantiations
		linkCustomizableNodeClasses
		nodes.each{node|node.link}
		
		addAspectToRamWorkspace(ramWorkspace)
	end
	
	operation addAspectToRamWorkspace(ramWorkspace:RamWorkspace) is do
		//Filter out empty aspect
		if(ramStructuralView.classes.size>0) then
			var workspacePath:String init Path.new.combine("Steps",Path.new.combine(concern.name,name))
			ramWorkspace.aspectPerWorkspacePath.put(workspacePath,ramAspect) 
		end
	end

	operation linkInstantiations() is do
		ramAspect.instantiations.add(ramReactiveSystemWorkflowInstantiation)
		ramAspect.instantiations.add(ramWorkflowInstantiation)
	end
	
	operation linkCustomizableNodeClasses() is do
		ramCustomizableNodeClasses.values.each{ramClass|
			addMappedRamClass(REACTIVE_WORKFLOW_CUSTOMIZABLE_NODE,ramClass)
		}
	end

/*********************************************************
Add Ram Class API
*********************************************************/
	property REACTIVE_WORKFLOW_INPUT_DATA : String getter is do result := "InputData" end
	property REACTIVE_WORKFLOW_CUSTOMIZABLE_NODE : String getter is do result := "|CustomizableNode" end
	property REACTIVE_WORKFLOW_OUTPUT_DATA : String getter is do result := "OutputData" end
	property REACTIVE_WORKFLOW_CONDITION : String getter is do result := "Condition" end
	
	operation addMappedRamClass(sourceModelElement:String,ramClass:Class) is do
		addNotMappedRamClass(ramClass)
//stle:		mapRamClass(sourceModelElement,ramClass)
	end
	
	operation addNotMappedRamClass(ramClass:Class) is do
		ramStructuralView.classes.add(ramClass)
	end
	
	// operation mapRamClass(sourceModelElement:String,ramClass:Class) is do
	// 	if(ramMappingsContainsKey(sourceModelElement)==false) then
	// 		var mapping:Mapping init Mapping.new
	// 		mapping.sourceModelElement:=sourceModelElement
	// 		ramReactiveWorkflowInstantiation.mappings.add(mapping)
	// 	end
	// 	ramMappingsGetValue(sourceModelElement).maps.add(ramClass)
	// end

	// operation ramMappingsContainsKey(sourceModelElement:String):Boolean is do
	// 	result:=ramReactiveWorkflowInstantiation.mappings.exists
	// 							{mapping|mapping.sourceModelElement==sourceModelElement}  
	// end
	
	// operation ramMappingsGetValue(sourceModelElement:String):Mapping is do
	// 	//stle:single again
	// 	result:=ramReactiveWorkflowInstantiation.mappings.select
	// 							{mapping|mapping.sourceModelElement==sourceModelElement}.one  
	// end

}
