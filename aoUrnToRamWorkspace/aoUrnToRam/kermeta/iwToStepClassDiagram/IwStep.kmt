package intermediateWorkflow;

require "platform:/lookup/aoUrnToRam/kermeta/iwToStepClassDiagram/_Ref.kmt"

using kermeta::standard
using ram
using kermeta::utils
using aoUrnToRam::util

aspect class IwStep {
	reference ramAspect:Aspect
	reference ramReactiveSystemWorkflowInstantiation:Instantiation
	reference ramWorkflowInstantiation:Instantiation
	reference ramCustomizableNodeClasses:Hashtable<String,Class>
	//base classes	
	reference ramCustomizableNodeBaseClass:Class
	reference ramCustomizableNodeBaseClassMapping:Mapping
	reference ramInputDataBaseClass:Class
	reference ramInputDataBaseClassMapping:Mapping
	reference ramOutputDataBaseClass:Class
	reference ramOutputDataBaseClassMapping:Mapping

	property readonly ramStructuralView : ClassDiagram
	getter is do
		result := ramAspect.structuralView
	end
	
	property readonly customizableNodes: IwCustomizableNode[0..*]
	getter is do
		//stle: DRY
		//stle: refactor for reuse
		result:=nodes.select{node|node.isInstanceOf(IwCustomizableNode)}
			 .collect{node|node.asType(IwCustomizableNode)}.asOrderedSet
	end

/*********************************************************
Build
*********************************************************/
	operation build() is do
		buildRamAspect
		buildExternalAspects
		buildBaseClasses
		buildCustomizableNodeClasses
		nodes.each{node|node.build}
	end
	
	operation buildRamAspect() is do
		ramAspect:=Aspect.new
		ramAspect.name:=name
		ramAspect.structuralView:=ClassDiagram.new
	end
	
	operation buildExternalAspects() is do
		ramReactiveSystemWorkflowInstantiation:=Instantiation.new
		ramWorkflowInstantiation:=Instantiation.new
	end
	
	operation buildBaseClasses() is do
		ramCustomizableNodeBaseClass:=createRamClass("CustomizableNode")
		ramInputDataBaseClass:=createRamClass("InputData")
		ramOutputDataBaseClass:=createRamClass("OutputData")
	end

	//For rational see @RamCustomizableNodeClassBuildByIwStep  	
	operation buildCustomizableNodeClasses() is do
		ramCustomizableNodeClasses:=Hashtable<String,Class>.new
		customizableNodes.each{customizableNode|
			if(ramCustomizableNodeClasses.containsKey(customizableNode.name)==false) then
				ramCustomizableNodeClasses.put(customizableNode.name,createRamClass(customizableNode.name))
			end
		}
	end

	operation createRamClass(name:String):Class is do
		result:=Class.new
		result.name:=name
	end
	
/*********************************************************
Link
*********************************************************/
	
	operation link(ramWorkspace:RamWorkspace) is do
		linkInstantiations
		linkCustomizableNodeClasses
		linkBaseClasses(ramWorkspace)
		nodes.each{node|node.link}
		addAspectToRamWorkspace(ramWorkspace)
	end
	
	operation linkInstantiations() is do
		ramAspect.instantiations.add(ramReactiveSystemWorkflowInstantiation)
		ramAspect.instantiations.add(ramWorkflowInstantiation)
	end
	
	operation linkCustomizableNodeClasses() is do
		ramCustomizableNodeClasses.values.each{ramClass|
			addCustomizableNodeSubtype(ramClass)
		}
	end
	
	operation linkBaseClasses(ramWorkspace:RamWorkspace) is do
		linkRamInputDataBaseClass(ramWorkspace)
		linkRamOutputDataBaseClass(ramWorkspace)
		linkCustomizableNodeBaseClass(ramWorkspace)
	end

	operation addAspectToRamWorkspace(ramWorkspace:RamWorkspace) is do
		//Filter out empty aspect
		if(isEmtpyStepClassDiagram==false) then
			var workspacePath:String init Path.new.combine("Steps",Path.new.combine(concern.name,name))
			ramWorkspace.aspectPerWorkspacePath.put(workspacePath,ramAspect) 
		end
	end
	
	property isEmtpyStepClassDiagram:Boolean
	getter is do
		result:=ramStructuralView.classes.size<=1
	end
	
	operation linkRamInputDataBaseClass(ramWorkspace:RamWorkspace) is do
		if(hasAtLeastOneInputClass) then
			linkClassToClassDiagram(ramInputDataBaseClass)
			ramInputDataBaseClassMapping:=mapExternalClass(
				ramInputDataBaseClass,
				ramWorkspace.inputData,
				ramReactiveSystemWorkflowInstantiation
			)
		end
	end
	
	property hasAtLeastOneInputClass:Boolean
	getter is do
		result:=nodes.exists{node|node.isInstanceOf(IwInput)}
	end
	
	operation linkRamOutputDataBaseClass(ramWorkspace:RamWorkspace) is do
		if(hasAtLeastOneOutputClass) then
			linkClassToClassDiagram(ramOutputDataBaseClass)
			ramOutputDataBaseClassMapping:=mapExternalClass(
				ramOutputDataBaseClass,
				ramWorkspace.outputData,
				ramReactiveSystemWorkflowInstantiation
			)
		end
	end
	
	operation linkCustomizableNodeBaseClass(ramWorkspace:RamWorkspace) is do
		linkClassToClassDiagram(ramCustomizableNodeBaseClass)
		ramCustomizableNodeBaseClassMapping:=mapExternalClass(
			ramCustomizableNodeBaseClass,
			ramWorkspace.customizableNode,
			ramWorkflowInstantiation
		)
	end
	
	operation mapExternalClass(ramClass:Class,externalRamClass:Class,instantiation:Instantiation):Mapping is do
		result:=Mapping.new
		result.sourceModelElement:=externalRamClass
		result.maps.add(ramClass)
		instantiation.mappings.add(result)
	end
	
	property hasAtLeastOneOutputClass:Boolean
	getter is do
		result:=nodes.exists{node|node.isInstanceOf(IwOutput)}
	end
	

/*********************************************************
Add Ram Class API
*********************************************************/
	operation addInputDataSubtype(subtype:Class) is do
		linkClassToClassDiagram(subtype)
		subtype.superTypes.add(ramInputDataBaseClass)
	end
	
	operation addOutputDataSubtype(subtype:Class) is do
		linkClassToClassDiagram(subtype)
		subtype.superTypes.add(ramOutputDataBaseClass)
	end
	
	operation addCustomizableNodeSubtype(subtype:Class) is do
		linkClassToClassDiagram(subtype)
		subtype.superTypes.add(ramCustomizableNodeBaseClass)
	end

	operation linkClassToClassDiagram(ramClass:Class) is do
		ramStructuralView.classes.add(ramClass)
	end
}
