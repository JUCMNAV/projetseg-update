package intermediateWorkflow;

require "platform:/lookup/aoUrnToRam/kermeta/iwToStepClassDiagram/_Ref.kmt"

using kermeta::standard
using ram
using kermeta::utils

aspect class IwStep inherits CollectionExt{
	reference ramAspect:Aspect
	reference ramCustomizableNodeClasses:Hashtable<String,Class>
	reference ramCustomizableNodeMapping:Mapping
	reference ramCustomizableInputDataMapping:Mapping
	reference ramCustomizableOutputDataMapping:Mapping
	reference ramInputInstantiation:Instantiation
	reference ramOutputInstantiation:Instantiation	
	reference ramWorkflowInstantiation:Instantiation
	
	property readonly ramStructuralView : StructuralView
	getter is do
		result := ramAspect.structuralView
	end
	
	property readonly customizableNodes: IwCustomizableNode[0..*]
	getter is do
		result:=OrderedSet<IwCustomizableNode>.new
		colExtSelectOfType(nodes,result)
	end

/*********************************************************
Build
*********************************************************/
	operation build() is do
		buildRamAspect
		buildInstantiations
		buildMappings
		buildCustomizableNodeClasses
		nodes.each{node|node.build}
	end
	
	operation buildRamAspect() is do
		ramAspect:=Aspect.new
		ramAspect.name:=name
		ramAspect.structuralView:=StructuralView.new
	end
	
	operation buildInstantiations() is do
		ramInputInstantiation:=createInstantiation_Extends
		ramOutputInstantiation:=createInstantiation_Extends
		ramWorkflowInstantiation:=createInstantiation_Extends
	end
	
	operation createInstantiation_Extends():Instantiation is do
		result:=Instantiation.new
		result.type:=instantiationTypes.Extends
	end
	
	operation buildMappings() is do
		ramCustomizableNodeMapping:=Mapping.new
		ramCustomizableInputDataMapping:=Mapping.new
		ramCustomizableOutputDataMapping:=Mapping.new
	end	

	//For rational see @RamCustomizableNodeClassBuildByIwStep  	
	operation buildCustomizableNodeClasses() is do
		ramCustomizableNodeClasses:=Hashtable<String,Class>.new
		customizableNodes.each{customizableNode|
			if(ramCustomizableNodeClasses.containsKey(customizableNode.name)==false) then
				ramCustomizableNodeClasses.put(customizableNode.name,createRamClass(customizableNode.name))
			end
		}
	end

	operation createRamClass(name:String):Class is do
		result:=Class.new
		result.name:=name
	end
	
/*********************************************************
Link
*********************************************************/
	
	operation link(ramWorkspace:RamWorkspace) is do
		linkCustomizableNodeClasses
		nodes.each{node|node.link}
		linkInstantiations(ramWorkspace)
		addAspectToRamWorkspace(ramWorkspace)
	end

	operation linkCustomizableNodeClasses() is do
		ramCustomizableNodeClasses.values.each{ramClass|
			linkCustomizableNode(ramClass)
		}
	end

	operation addAspectToRamWorkspace(ramWorkspace:RamWorkspace) is do
		//Filter out empty aspect
		if(isEmtpyStepClassDiagram==false) then
			var workspacePath:String init "Steps".uriAppend(concern.name).uriAppend(name)
			ramWorkspace.aspectPerWorkspacePath.put(workspacePath,ramAspect) 
		end
	end
	
	property isEmtpyStepClassDiagram:Boolean
	getter is do
		result:=ramStructuralView.classes.size==0
	end
	
	operation linkInstantiations(ramWorkspace:RamWorkspace) is do
		linkWorkflowInstantiation(ramWorkspace)
		linkInputInstantiation(ramWorkspace)
		linkOutputInstantiation(ramWorkspace)
	end
	
	operation linkWorkflowInstantiation(ramWorkspace:RamWorkspace) is do
		linkInstantiationWithOneMapping(
			ramWorkflowInstantiation,
			ramWorkspace.workflow,
			ramCustomizableNodeMapping,
			ramWorkspace.customizableNode
		)
	end
	
	operation linkInputInstantiation(ramWorkspace:RamWorkspace) is do
		if(hasAtLeastOneInputClass) then
			linkInstantiationWithOneMapping(
				ramInputInstantiation,
				ramWorkspace.inputAspect,
				ramCustomizableInputDataMapping,
				ramWorkspace.customizableInputData
			)
		end
	end
	
	operation linkOutputInstantiation(ramWorkspace:RamWorkspace) is do
		if(hasAtLeastOneOutputClass) then
			linkInstantiationWithOneMapping(
				ramOutputInstantiation,
				ramWorkspace.outputAspect,
				ramCustomizableOutputDataMapping,
				ramWorkspace.customizableOutputData
			)
		end
	end
	
	operation linkInstantiationWithOneMapping(instantiation:Instantiation,externalAspect:Aspect,mapping:Mapping,sourceModelElement:Class) is do
		instantiation.externalAspect:=externalAspect
		ramAspect.instantiations.add(instantiation)
		
		mapping.sourceModelElement:=sourceModelElement
		instantiation.mappings.add(mapping)
	end

	property hasAtLeastOneInputClass:Boolean
	getter is do
		result:=nodes.exists{node|node.isInstanceOf(IwInput)}
	end
	
	property hasAtLeastOneOutputClass:Boolean
	getter is do
		result:=nodes.exists{node|node.isInstanceOf(IwOutput)}
	end
	
	operation mapExternalClass(ramClass:Class,externalRamClass:Class,instantiation:Instantiation):Mapping is do
		result:=Mapping.new
		result.sourceModelElement:=externalRamClass
		result.maps.add(ramClass)
		instantiation.mappings.add(result)
	end

/*********************************************************
Add Ram Class API
*********************************************************/
	operation linkInputData(inputData:Class) is do
		linkClassToClassDiagram(inputData)
		ramCustomizableInputDataMapping.maps.add(inputData)
	end
	
	operation linkOutputData(outputData:Class) is do
		linkClassToClassDiagram(outputData)
		ramCustomizableOutputDataMapping.maps.add(outputData)
	end
	
	operation linkCustomizableNode(customizableNode:Class) is do
		linkClassToClassDiagram(customizableNode)
		ramCustomizableNodeMapping.maps.add(customizableNode)
	end

	operation linkClassToClassDiagram(ramClass:Class) is do
		ramStructuralView.classes.add(ramClass)
	end
}
