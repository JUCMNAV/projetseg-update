package intermediateWorkflow;

require "platform:/lookup/aoUrnToRam/src/iwToRam/_Ref.kmt"

using kermeta::standard
using ramstructural
using kermeta::utils
using aoUrnToRam::util

aspect class IwStep {
	reference ramAspect:Aspect
	reference ramReactiveWorkflowInstantiation:Instantiation
	reference ramCustomizableNodeClasses:Hashtable<String,Class>

	property readonly ramStructuralView : ClassDiagram
	getter is do
		result := ramAspect.structuralView
	end
	
	property readonly customizableNodes: IwCustomizableNode[0..*]
	getter is do
		//stle: DRY
		//stle: refactor for reuse
		result:=nodes.select{node|node.isInstanceOf(IwCustomizableNode)}
			 .collect{node|node.asType(IwCustomizableNode)}.asOrderedSet
	end
	

/*********************************************************
Build
*********************************************************/

	operation build() is do
		buildRamAspect
		buildRamReactiveWorkflowInstantiation
		buildCustomizableNodeClasses
		nodes.each{node|node.build}
	end
	
	operation buildRamAspect() is do
		ramAspect:=Aspect.new
		ramAspect.name:=name
		ramAspect.structuralView:=ClassDiagram.new
		ramAspect.interface:=AspectInterface.new
	end
	
	operation buildRamReactiveWorkflowInstantiation() is do
		ramReactiveWorkflowInstantiation:=Instantiation.new
		ramReactiveWorkflowInstantiation.externalAspect:="ReactiveWorkflow"
	end

	//For rational see @RamCustomizableNodeClassBuildByIwStep  	
	operation buildCustomizableNodeClasses() is do
		ramCustomizableNodeClasses:=Hashtable<String,Class>.new
		customizableNodes.each{customizableNode|
			if(ramCustomizableNodeClasses.containsKey(customizableNode.name)==false) then
				ramCustomizableNodeClasses.put(customizableNode.name,customizableNode.createRamClass(customizableNode.name))
			end
		}
	end
	
/*********************************************************
Link
*********************************************************/
	
	operation link() is do
		linkRamReactiveWorkflowInstantiation
		linkCustomizableNodeClasses
		nodes.each{node|node.link}
		
		if(ramStructuralView.classes.size>0) then
			linkConcern
		end
	end
	
	operation linkConcern() is do
		ramAspect.workspacePath:=Path.new.combine("Steps",Path.new.combine(concern.name,name))
		concern.addRamAspect(ramAspect)
	end

	operation linkRamReactiveWorkflowInstantiation() is do
		ramStructuralView.instantiations.add(ramReactiveWorkflowInstantiation)
	end
	
	operation linkCustomizableNodeClasses() is do
		ramCustomizableNodeClasses.values.each{ramClass|
			addMappedRamClass(REACTIVE_WORKFLOW_CUSTOMIZABLE_NODE,ramClass)
		}
	end

/*********************************************************
Add Ram Class API
*********************************************************/
	property REACTIVE_WORKFLOW_INPUT_DATA : String getter is do result := "InputData" end
	property REACTIVE_WORKFLOW_CUSTOMIZABLE_NODE : String getter is do result := "|CustomizableNode" end
	property REACTIVE_WORKFLOW_OUTPUT_DATA : String getter is do result := "OutputData" end
	property REACTIVE_WORKFLOW_CONDITION : String getter is do result := "Condition" end
	
	operation addMappedRamClass(sourceModelElement:String,ramClass:Class) is do
		addNotMappedRamClass(ramClass)
		mapRamClass(sourceModelElement,ramClass)
	end
	
	operation addNotMappedRamClass(ramClass:Class) is do
		ramStructuralView.classes.add(ramClass)
	end
	
	operation mapRamClass(sourceModelElement:String,ramClass:Class) is do
		if(ramMappingsContainsKey(sourceModelElement)==false) then
			var mapping:Mapping init Mapping.new
			mapping.sourceModelElement:=sourceModelElement
			ramReactiveWorkflowInstantiation.mappings.add(mapping)
		end
		ramMappingsGetValue(sourceModelElement).maps.add(ramClass)
	end

	operation ramMappingsContainsKey(sourceModelElement:String):Boolean is do
		result:=ramReactiveWorkflowInstantiation.mappings.exists
								{mapping|mapping.sourceModelElement==sourceModelElement}  
	end
	
	operation ramMappingsGetValue(sourceModelElement:String):Mapping is do
		//stle:single again
		result:=ramReactiveWorkflowInstantiation.mappings.select
								{mapping|mapping.sourceModelElement==sourceModelElement}.one  
	end
}
