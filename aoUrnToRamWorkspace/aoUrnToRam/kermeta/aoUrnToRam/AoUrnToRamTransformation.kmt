package aoUrnToRam;

require kermeta
require "platform:/lookup/aoUrnToRam/kermeta/aoUrnToIw/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToIwInsertInputProcessingNodes/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToIwLinkSteps/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToStepClassDiagram/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToStepView/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToJavaInstantiator/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToJavaProgram/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/aoUrnToRam/ModelRepository.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/textView/TextView.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/util/Uri.kmt"

using kermeta::persistence
using kermeta::standard
using kermeta::io
using jucm_OneFileWorkaround::urn
using intermediateWorkflow
using ram

class AoUrnToRamTransformation
{
	attribute source:String
	attribute destination:String
	
	attribute dotExe:String
	attribute isIwFileOutputEnabled:Boolean
	attribute isRamStepViewAsDotOutputEnabled:Boolean
	attribute imgDir:String
	attribute oneUrnMetamodel:String
	attribute intermediateWorkflowMetamodel:String
	attribute ramMetamodel:String
	attribute ramLibSourceDir:String
	attribute ramLibDestinationDir:String
	
//*********************************************************
//Transform
//*********************************************************/
	operation transform(
		source:String,
		destination:String,
		isRamStepViewAsDotOutputEnabled:String,
		isIwFileOutputEnabled:String, 
		aoUrnToRamPlateformUrl:String
	) is do
		initAttributes(
			source,
			destination,
			isRamStepViewAsDotOutputEnabled,
			isIwFileOutputEnabled,
			aoUrnToRamPlateformUrl
		)
		
		//until FeaMergeGeneratedWorkflowsWithManuallyWrittenRam is implemented
		deleteDestinationFolder
			
		var urnSpec:URNspec init loadUrnSpec()
		var iwModel:IwModel init aoUrnToIw(urnSpec)
		outputIwFile(iwModel)

		outputRamStepClassDiagram(iwModel)
		outputRamStepView(iwModel)
		ouptutRamJavaInstantiator(iwModel)
		ouptutRamJavaProgram(iwModel)

	end
	
	operation initAttributes(
		source:String,
		destination:String,
		isRamStepViewAsDotOutputEnabled:String,
		isIwFileOutputEnabled:String, 
		aoUrnToRamPlateformUrl:String
	) is do
		var aoUrnToRamDir:String init aoUrnToRamPlateformUrl.uriResolvePlateformUrl
	
		self.source:=source
		self.destination:=destination
		
		self.dotExe:=aoUrnToRamDir.uriAppend("thirdParty/Graphviz2.26.3/bin/dot.exe")
		self.imgDir:=aoUrnToRamDir.uriAppend("img")
		self.ramLibSourceDir:=aoUrnToRamDir.uriAppend("ramLib")
		self.ramLibDestinationDir:=self.destination.uriAppend("reusable_model_library")

		self.isRamStepViewAsDotOutputEnabled:=isRamStepViewAsDotOutputEnabled.toBoolean
		self.isIwFileOutputEnabled:=isIwFileOutputEnabled.toBoolean
		
		var metamodel:String init aoUrnToRamPlateformUrl.uriAppend("metamodel")
		self.oneUrnMetamodel:=metamodel.uriAppend("jucm_OneFileWorkaround.ecore")
		self.intermediateWorkflowMetamodel:=metamodel.uriAppend("intermediateWorkflow.ecore")
		self.ramMetamodel:=metamodel.uriAppend("RAM.ecore")
	end
	
//*********************************************************
//AoUrnToIw
//*********************************************************/
	operation loadUrnSpec():URNspec is do
		var repository:ModelRepository init ModelRepository.new.initialize
		result?=repository.load(source,oneUrnMetamodel)
		//see @UrnSpecNameWorkAround
		result.urnSpecName:=iwModelName
	end
	
	operation aoUrnToIw(urnSpec:URNspec):IwModel is do
		result:=urnSpec.toIw
		result.insertInputProcessingNodes
		result.linkSteps
	end
	
	operation outputIwFile(iwModel:IwModel) is do
		if(isIwFileOutputEnabled) then
			var repository:ModelRepository init ModelRepository.new.initialize
			var uri:String init destination.uriAppend("Iw.xmi")
			repository.save(iwModel,uri,intermediateWorkflowMetamodel)
		end
	end

//*********************************************************
//IwToJava
//*********************************************************/
	operation ouptutRamJavaInstantiator(iwModel:IwModel) is do
		iwModel.jiToJavaInstantiator.each{workflowInstantiator|
			outputTextView(workflowInstantiator,".java")
		}
	end
	
	operation ouptutRamJavaProgram(iwModel:IwModel) is do
		outputTextView(iwModel.jpToJavaProgram,".java")
	end

//*********************************************************
//IwToStepView
//*********************************************************/
	operation outputRamStepView(iwModel:IwModel) is do
		var stepViews:OrderedSet<StepView> init iwModel.toStepView(imgDir.uriToWindowsPath)
		outputRamStepViewAsDot(stepViews)
		outputRamStepViewAsImg(stepViews)
	end

	operation outputRamStepViewAsDot(stepViews:OrderedSet<StepView>) is do
		if(isRamStepViewAsDotOutputEnabled) then
			stepViews.each{stepView|
				var uri:String init destination.uriAppend(stepView.workspacePath+".dot") 
				FileIO.new.writeTextFile(uri,stepView.dot)
			} 
	    end
	end

	operation outputRamStepViewAsImg(stepViews:OrderedSet<StepView>) is do
		stepViews.each{stepView|
			var uri:String init destination.uriAppend(stepView.workspacePath+".png")
			executeDot(uri,stepView.dot)
	    }
	end
	
	operation executeDot(dest:String,dotInput:String) is do
		//Ensure dest directory exists; otherwise, dot.exe wont work properly
		ensureParentDirExists(dest)
	
		//dot.exe (Only windows is supported for now)
		extern aoUrnToRam::javaExternalCall::CommandLine.exe(dotExe.uriToWindowsPath+" -Tpng -o\""+dest.uriToWindowsPath+"\"",dotInput)
	end
	
	operation ensureParentDirExists(uri:String) is do
		extern aoUrnToRam::javaExternalCall::FileSystem.createDirectory(uri.uriParent)
	end 
	
//*********************************************************
//IwToStepClassDiagram
//*********************************************************/
	operation outputRamStepClassDiagram(iwModel:IwModel) is do
		registerRamResourceFactoryIfNotAlreadyRegistered
	
		//In order to resolve external aspect, 
		//it is important to load/save from the same repository
		var repository:ModelRepository init ModelRepository.new.initialize
		
		copyRamLibFolder //External aspect must be loaded from destination folder
		var ramWorkspace:RamWorkspace init createRamWorkspace(repository)
		iwModel.toStepClassDiagram(ramWorkspace)
		
		ramWorkspace.aspectPerWorkspacePath.keys.each{workspacePath|
			saveRamAspect(
				repository,
				workspacePath,
				ramWorkspace.aspectPerWorkspacePath.getValue(workspacePath)
			)
		}
	end
	
	operation createRamWorkspace(repository:ModelRepository):RamWorkspace is do
		result:=RamWorkspace.new.initialize(
			loadRamModelFromLib(repository,"workflow/Workflow.ram"),
			loadRamModelFromLib(repository,"workflow/Input.ram"),
			loadRamModelFromLib(repository,"workflow/Output.ram")
		)
	end

	operation saveRamAspect(repository:ModelRepository,workspacePath:String,theAspect:Aspect) is do
		repository.save(
			theAspect,
			destination.uriAppend(workspacePath+".ram"),
			ramMetamodel
		)
	end
	
	operation loadRamModelFromLib(repository:ModelRepository,ramModelName:String):Aspect is do
		result?=repository.load(
			ramLibDestinationDir.uriAppend(ramModelName),
			ramMetamodel
		)
	end
	
	operation registerRamResourceFactoryIfNotAlreadyRegistered() is do
	    extern aoUrnToRam::javaExternalCall::RamResourceFactoryRegistrar.registerRamResourceFactoryIfNotAlreadyRegistered("ram")
	end
	
	
//*********************************************************
//Properties
//*********************************************************/
	property readonly iwModelName:String 
	getter is do
		result:=destination.split("/").last
	end
	
//*********************************************************
//Misc
//*********************************************************/
	operation outputTextView(textView:TextView,extension:String) is do
		FileIO.new.writeTextFile(
			destination.uriAppend(textView.workspacePath+extension),
			textView.content
		)
	end

	operation deleteDestinationFolder() is do
		extern aoUrnToRam::javaExternalCall::FileSystem.removeDirectory(destination)
	end
	
	operation copyRamLibFolder() is do
		extern aoUrnToRam::javaExternalCall::FileSystem.copy(
			ramLibSourceDir,
			ramLibDestinationDir
		)
	end
}