package aoUrnToRam;

require kermeta
require "platform:/lookup/aoUrnToRam/kermeta/aoUrnToIw/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToIwInsertInputProcessingNodes/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToIwLinkSteps/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToStepClassDiagram/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToStepView/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToJavaInstantiator/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iwToJavaProgram/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/aoUrnToRam/ModelRepository.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/textView/TextView.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/PlateformResolver.kmt"

using kermeta::persistence
using kermeta::standard
using kermeta::io
using jucm_OneFileWorkaround::urn
using intermediateWorkflow
using ram
using aoUrnToRam::util

class AoUrnToRamTransformation inherits PlateformResolver
{
	attribute sourceAbsoluteFileUri:String
	attribute destinationAbsoluteFolderUri:String
	
	attribute dotAbsoluteFileUri:String
	attribute isIwFileOutputEnabled:Boolean
	attribute isRamStepViewAsDotOutputEnabled:Boolean
	attribute imgFolderAbsoluteFileUri:String
	attribute oneUrnMetamodel:String
	attribute intermediateWorkflowMetamodel:String
	attribute ramMetamodel:String
	attribute ramLibFolderSrcAbsoluteFileUri:String
	attribute ramLibFolderDestAbsoluteFileUri:String
	
//*********************************************************
//Transform
//*********************************************************/
	operation transform(
		sourceAbsoluteFileUri:String,
		destinationAbsoluteFolderUri:String,
		isRamStepViewAsDotOutputEnabled:String,
		isIwFileOutputEnabled:String, 
		aoUrnToRamPlateformUrl:String
	) is do
		initAttributes(
			sourceAbsoluteFileUri,
			destinationAbsoluteFolderUri,
			isRamStepViewAsDotOutputEnabled,
			isIwFileOutputEnabled,
			aoUrnToRamPlateformUrl
		)
		
		//until FeaMergeGeneratedWorkflowsWithManuallyWrittenRam is implemented
		deleteDestinationFolder
	
		var urnSpec:URNspec init loadUrnSpec()
		var iwModel:IwModel init aoUrnToIw(urnSpec)
		outputIwFile(iwModel)

		outputRamStepClassDiagram(iwModel)
		outputRamStepView(iwModel)
		ouptutRamJavaInstantiator(iwModel)
		ouptutRamJavaProgram(iwModel)
	end
	
	operation initAttributes(
		sourceAbsoluteFileUri:String,
		destinationAbsoluteFolderUri:String,
		isRamStepViewAsDotOutputEnabled:String,
		isIwFileOutputEnabled:String, 
		aoUrnToRamPlateformUrl:String
	) is do
		self.sourceAbsoluteFileUri:=sourceAbsoluteFileUri
		self.destinationAbsoluteFolderUri:=destinationAbsoluteFolderUri
		self.dotAbsoluteFileUri:=resolvePlateformUrl(Path.new.combine(aoUrnToRamPlateformUrl,"thirdParty/Graphviz2.26.3/bin/dot.exe"))
		self.imgFolderAbsoluteFileUri:=resolvePlateformUrl(Path.new.combine(aoUrnToRamPlateformUrl,"img"))
		self.ramLibFolderSrcAbsoluteFileUri:=resolvePlateformUrl(Path.new.combine(aoUrnToRamPlateformUrl,"ramLib"))
		self.ramLibFolderDestAbsoluteFileUri:=Path.new.combine(destinationAbsoluteFolderUri,"Lib")

		self.isRamStepViewAsDotOutputEnabled:=isRamStepViewAsDotOutputEnabled.toBoolean
		self.isIwFileOutputEnabled:=isIwFileOutputEnabled.toBoolean
		
		self.oneUrnMetamodel:=Path.new.combine(aoUrnToRamPlateformUrl,"metamodel/jucm_OneFileWorkaround.ecore")
		self.intermediateWorkflowMetamodel:=Path.new.combine(aoUrnToRamPlateformUrl,"metamodel/intermediateWorkflow.ecore")
		self.ramMetamodel:=Path.new.combine(aoUrnToRamPlateformUrl,"metamodel/RAM.ecore")
	end
	
//*********************************************************
//AoUrnToIw
//*********************************************************/
	operation loadUrnSpec():URNspec is do
		var repository:ModelRepository init ModelRepository.new.initialize
		result?=repository.load(sourceAbsoluteFileUri,oneUrnMetamodel)
		//see @UrnSpecNameWorkAround
		result.urnSpecName:=iwModelName
	end
	
	operation aoUrnToIw(urnSpec:URNspec):IwModel is do
		result:=urnSpec.toIw
		result.insertInputProcessingNodes
		result.linkSteps
	end
	
	operation outputIwFile(iwModel:IwModel) is do
		if(isIwFileOutputEnabled) then
			var repository:ModelRepository init ModelRepository.new.initialize
			var iwFileAbsoluteFileUri:String init Path.new.combine(destinationAbsoluteFolderUri,"Iw.xmi")
			repository.save(iwModel,iwFileAbsoluteFileUri,intermediateWorkflowMetamodel)
		end
	end

//*********************************************************
//IwToJava
//*********************************************************/
	operation ouptutRamJavaInstantiator(iwModel:IwModel) is do
		iwModel.jiToJavaInstantiator.each{workflowInstantiator|
			ouptutTextView(workflowInstantiator,".java")
		}
	end
	
	operation ouptutRamJavaProgram(iwModel:IwModel) is do
		ouptutTextView(iwModel.jpToJavaProgram,".java")
	end

//*********************************************************
//IwToStepView
//*********************************************************/
	operation outputRamStepView(iwModel:IwModel) is do
		var stepViews:OrderedSet<StepView> init iwModel.toStepView(absoluteFileUriToWindowsPath(imgFolderAbsoluteFileUri))
		outputRamStepViewAsDot(stepViews)
		outputRamStepViewAsImg(stepViews)
	end

	operation outputRamStepViewAsDot(stepViews:OrderedSet<StepView>) is do
		if(isRamStepViewAsDotOutputEnabled) then
			stepViews.each{stepView|
				var stepViewAsDotAbsoluteFileUri:String init Path.new.combine(destinationAbsoluteFolderUri,stepView.workspacePath)+".dot" 
				FileIO.new.writeTextFile(stepViewAsDotAbsoluteFileUri,stepView.dot)
			} 
	    end
	end

	operation outputRamStepViewAsImg(stepViews:OrderedSet<StepView>) is do
		stepViews.each{stepView|
			var stepViewAsImgAbsoluteFileUri:String init Path.new.combine(destinationAbsoluteFolderUri,stepView.workspacePath)+".png"
			executeDot(
				dotAbsoluteFileUri,
				stepViewAsImgAbsoluteFileUri,
				stepView.dot
			)
	    }
	end
	
	operation executeDot(dotExeAbsoluteFileUri:String,destAbsoluteFileUri:String,dotInput:String) is do
		//Ensure dest directory exists; otherwise, dot.exe wont work properly
		ensureParentDirectoryExists(destAbsoluteFileUri)
	
		//dot.exe (Only windows is supported for now)
		var dotExeFilePath:String init absoluteFileUriToWindowsPath(dotExeAbsoluteFileUri)
		var destFilePath:String init absoluteFileUriToWindowsPath(destAbsoluteFileUri)
		extern aoUrnToRam::javaExternalCall::CommandLine.exe(dotExeFilePath+" -Tpng -o\""+destFilePath+"\"",dotInput)
	end
	
	//Only Windows is supported at this point
	operation absoluteFileUriToWindowsPath(absoluteFileUri:String):String is do
		result:=absoluteFileUri.replace("file:/","")
		result:=result.replace("/","\\")
	end
	
	operation ensureParentDirectoryExists(absoluteFileUri:String) is do
		var parentDirectoryAbsoluteFileUri:String init Path.new.getParent(absoluteFileUri)
		extern aoUrnToRam::javaExternalCall::FileSystem.createDirectory(parentDirectoryAbsoluteFileUri)
	end 
	
//*********************************************************
//IwToStepClassDiagram
//*********************************************************/
	operation outputRamStepClassDiagram(iwModel:IwModel) is do
		//In order to resolve external aspect, 
		//it is important to load/save from the same repository
		var repository:ModelRepository init ModelRepository.new.initialize
		
		var ramWorkspace:RamWorkspace init createRamWorkspace(repository)
		iwModel.toStepClassDiagram(ramWorkspace)

		ramWorkspace.aspectPerWorkspacePath.keys.each{workspacePath|
			saveRamAspect(
				repository,
				workspacePath,
				ramWorkspace.aspectPerWorkspacePath.getValue(workspacePath)
			)
		}
	end
	
	operation createRamWorkspace(repository:ModelRepository):RamWorkspace is do
		copyRamLibFolder //External aspect must be loaded from destination folder
	
		result:=RamWorkspace.new.initialize(
			loadWorkflowFromLib(repository),
			loadReactiveSystemWorkflowFromLib(repository)
		)
	end

// @RamResourceFactoryWorkaround
// The RAM models use UUID for references instead of indexes which 
// is the EMF default behaviour. Thus, a custom factory need to be 
// registred to the EMF registry in order specify how RAM models 
// should be serialized (using UUID for references).

// Unfortunately, the EMF repository is shared by all Eclipse plugins
// and the factory registration is based on file extension. In order
// to prevent side effects between the RAM tool and AoUrnToRam, the 
// RamResourceFactoryImpl of AoUrnToRam is registred for the extension
// ".ram_AoUrnToRamWorkaround". The extensions of Ram models are changed to 
// ".ram" after serialization. 

// This is annoying, but it is the price to pay to be able to deploy
// AoUrnToRAm independently from the RAM tool and to prevent side 
// effects between the RAM tool and AoUrnToRam.   
	operation saveRamAspect(repository:ModelRepository,workspacePath:String,theAspect:Aspect) is do
		var workaroundAbsoluteFileUri:String 
		init Path.new.combine(destinationAbsoluteFolderUri,workspacePath)+"."+ramWorkaroundExtension
		var normalAbsoluteFileUri:String
		init Path.new.combine(destinationAbsoluteFolderUri,workspacePath)+".ram"
		
		repository.save(
			theAspect,
			workaroundAbsoluteFileUri,
			ramMetamodel
		)
		
		rename(workaroundAbsoluteFileUri,normalAbsoluteFileUri)
	end

	operation loadWorkflowFromLib(repository:ModelRepository):Aspect is do
		result:=loadRamModelFromLib(repository,"Workflow.ram")
	end

	operation loadReactiveSystemWorkflowFromLib(repository:ModelRepository):Aspect is do
		result:=loadRamModelFromLib(repository,"ReactiveSystemWorkflow.ram")
	end
	
	operation loadRamModelFromLib(repository:ModelRepository,ramModelName:String):Aspect is do
		result?=repository.load(
			Path.new.combine(ramLibFolderDestAbsoluteFileUri,ramModelName),
			ramMetamodel
		)
	end
	
//*********************************************************
//Properties
//*********************************************************/
	property readonly iwModelName:String 
	getter is do
		result:=destinationAbsoluteFolderUri.split("/").last
	end
	
	property ramWorkaroundExtension:String
	getter is do
		result:="ram_AoUrnToRamWorkaround"
	end
	
//*********************************************************
//Misc
//*********************************************************/
	operation ouptutTextView(textView:TextView,extension:String) is do
		var absoluteFileUri:String init Path.new.combine(destinationAbsoluteFolderUri,textView.workspacePath)+extension
		FileIO.new.writeTextFile(absoluteFileUri,textView.content)
	end

	operation deleteDestinationFolder() is do
		extern aoUrnToRam::javaExternalCall::FileSystem.removeDirectory(destinationAbsoluteFolderUri)
	end
	
	operation copyRamLibFolder() is do
		extern aoUrnToRam::javaExternalCall::FileSystem.copy(
			ramLibFolderSrcAbsoluteFileUri,
			ramLibFolderDestAbsoluteFileUri
		)
	end
	
	operation rename(srcUri:String,destUri:String) is do
		extern aoUrnToRam::javaExternalCall::FileSystem.rename(srcUri,destUri)
	end
}