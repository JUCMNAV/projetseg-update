package kermeta::standard;

require kermeta

using kermeta::standard

class CollectionExt{
	operation colExtMax(col:Collection<Integer>):Integer is do
		result:=0
		col.each{element|
			if(result.isVoid) then
				result:=element
			else
				if(result<element) then
					result:=element
				end
			end
		}
	end

	operation colExtSelectOfType<ORI_TYPE,CAST_TYPE>(source:Collection<ORI_TYPE>,dest:Collection<CAST_TYPE>) is do
		var filtredOut:Collection<ORI_TYPE> init source.select{element|element.isInstanceOf(CAST_TYPE)}
		colExtCast(filtredOut,dest)
	end

	operation colExtCast<ORI_TYPE,CAST_TYPE>(source:Collection<ORI_TYPE>,dest:Collection<CAST_TYPE>) is do
		dest.addAll(source.collect{element|element.asType(CAST_TYPE)})
	end
	
	operation colExtSingle<G>(col:Collection<G>):G
	is do
	    result:=colExtSelectSingle(col,function {notUsed:G|true})
	end

	operation colExtSelectSingle<G>(col:Collection<G>,selector:<G->Boolean>):G
	is do
		result:=_colExtSelectSequenceOfOne(col,selector).one
	end

	operation _colExtSelectSequenceOfOne<G>(col:Collection<G>,selector:<G->Boolean>):Sequence<G>
	post MustBeSingle_FoundEmpty is do
	    result.size>0
	end
	post MustBeSingle_FoundMany is do
	    result.size<2
	end
	is do
	    result:=col.select(selector)
	end
}
