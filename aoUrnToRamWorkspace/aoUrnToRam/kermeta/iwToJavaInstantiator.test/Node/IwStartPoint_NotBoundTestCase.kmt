package aoUrnToRam::test;

require "platform:/lookup/aoUrnToRam/kermeta/iwToJavaInstantiator.test/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow
using javaInstantiator

class IwToJavaInstantiator_IwStartPoint_NotBoundTestCase inherits TestCase,IwToJavaInstantiator_TestHelper
{
	reference sut:IwStartPoint
	reference workflowInstantiator:WorkflowInstantiator

	method setUp() is do
		sut:=createIwStartPoint
		workflowInstantiator:=createWorkflowInstantiator
	end

	@feature "FeaWorkflowInstantiationWithoutStubs"
	operation testAppendBuildStatement_ShouldNotDeclareAndInitializeWorkflowNode() is do
		sut.jiAppendBuildStatement(workflowInstantiator)
		
		assertStringContains("    public StartupNode _theStartPoint=new StartupNode();\n",workflowInstantiator.content)
	end

	@feature "FeaWorkflowInstantiationWithStubs"
	operation testAppendLinkNodesToNextNodesStatement_ShouldInvokeAppendLinkStatementOnNodeConnection() is do
		sut.connect(createIwInput)
		
		sut.jiAppendLinkNodesToNextNodesStatement(workflowInstantiator)
		
		assertStringContainsNTime(1,".addNextNode",workflowInstantiator.content)
	end

	@feature "FeaWorkflowInstantiationWithStubs"
	operation testAppendLinkNodesToWorkflowStatement_ShouldLinkSutToWorkflowAsNode() is do
		sut.withWorkflow(createIwWorkflow)
		sut.jiAppendLinkNodesToWorkflowStatement(workflowInstantiator)
		
		assertStringContains("workflow.addNode",workflowInstantiator.content)
	end

	@feature "FeaWorkflowInstantiationWithStubs"
	operation testAppendLinkStartNodesToWorkflowStatement_Local_ShouldLinkSutToWorkflowAsStartupNode() is do
		sut.withWorkflow(createIwWorkflow)
		sut.withStartPointType("local")
	
		sut.jiAppendLinkStartNodesToWorkflowStatement(workflowInstantiator)
		
		assertEquals("        workflow.addStartupNode(_theStartPoint,true);\n",workflowInstantiator.content)
	end
}
