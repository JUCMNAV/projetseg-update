package intermediateWorkflow;

require "platform:/lookup/aoUrnToRam/kermeta/iwToJavaInstantiator/_Ref.kmt"

using kermeta::standard
using javaInstantiator
using aoUrnToRam::util //stle:think about this

aspect class IwWorkflow {

//*********************************************************
//Properties
//*********************************************************/
	property readonly jiCustomizedClassSubPackage:String 
	getter is do
		result:=model.name+".Steps."+concern.name
	end
	
	property readonly jiBindMethodParam:String 
	getter is do
		result:=workflowInstantiatorFullyQualifiedName+" "+jiBindMethod_PluginParamName
	end
	
	property readonly jiBindMethod_PluginParamName:String 
	getter is do
		result:="p_"+name
	end
	
	property readonly jiWorkspacePath:String 
	getter is do
		result:=Path.new.combine(jiSUBPACKAGE,Path.new.combine(concern.name,workflowInstantiatorName))
	end

//*********************************************************
//jiToWorkflowInstantiator
//*********************************************************/
	operation jiToWorkflowInstantiator():WorkflowInstantiator is do
		result:=WorkflowInstantiator.new.initialize_WorkflowInstantiator(jiWorkspacePath,jiCustomizedClassSubPackage)
		jiAppendContent(result)
	end
	
	operation jiAppendContent(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendPackage(jiPackageName)
		jiAppendImports(workflowInstantiator)
		
		workflowInstantiator.appendClass_Pre("public class "+name+"WorkflowInstantiator extends WorkflowInstantiator")
		
		jiAppendBuildStatements(workflowInstantiator)

		jiAppendLinkMethod(workflowInstantiator)
		jiAppendLinkNodesToNextNodesMethod(workflowInstantiator)
		jiAppendLinkNodesToWorkflowMethod(workflowInstantiator)
		jiAppendLinkStartNodesToWorkflowMethod(workflowInstantiator)

		jiAppendBindMethod(workflowInstantiator)
				
		workflowInstantiator.appendClass_Post()
	end
	
	operation jiAppendImports(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendImport("ram.reactiveworkflow.*")
		workflowInstantiator.appendImport("ram.workflow.*")
	end

	operation jiAppendBuildStatements(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendPublicMemberDefaultConstructor("Workflow",workflowInstantiator.workflowMemberName)
		nodes.each{node|node.jiAppendBuildStatement(workflowInstantiator)}
	end
	
	operation jiAppendLinkMethod(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendMethod_Pre("public void link()")
		workflowInstantiator.appendMethodInvocation_0Param("linkNodesToNextNodes")
		workflowInstantiator.appendMethodInvocation_0Param("linkNodesToWorkflow")
		workflowInstantiator.appendMethodInvocation_0Param("linkStartNodesToWorkflow")
		workflowInstantiator.appendMethod_Post
	end
	
	operation jiAppendLinkNodesToNextNodesMethod(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendMethod_Pre("public void linkNodesToNextNodes()")
		nodes.each{node|node.jiAppendLinkNodesToNextNodesStatement(workflowInstantiator)}
		workflowInstantiator.appendMethod_Post
	end
	
	operation jiAppendLinkNodesToWorkflowMethod(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendMethod_Pre("public void linkNodesToWorkflow()")
		nodes.each{node|node.jiAppendLinkNodesToWorkflowStatement(workflowInstantiator)}
		workflowInstantiator.appendMethod_Post
	end
	
	operation jiAppendLinkStartNodesToWorkflowMethod(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendMethod_Pre("public void linkStartNodesToWorkflow()")
		nodes.each{node|node.jiAppendLinkStartNodesToWorkflowStatement(workflowInstantiator)}
		workflowInstantiator.appendMethod_Post
	end
	
	operation jiAppendBindMethod(workflowInstantiator:WorkflowInstantiator) is do
		workflowInstantiator.appendNextLine
		workflowInstantiator.appendIndent(1,"public void bind(")
		workflowInstantiator.appendWithDelimiter(plugins,",\n                     ",
			function{plugin:IwWorkflow|plugin.jiBindMethodParam}
		) 
		workflowInstantiator.append("){\n")
		
		stubs.each{stub|stub.staticPluginBinding.jiAppendBindStatement(workflowInstantiator)}
		workflowInstantiator.appendMethod_Post	
	end
}