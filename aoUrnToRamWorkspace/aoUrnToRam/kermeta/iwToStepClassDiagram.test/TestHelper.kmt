package aoUrnToRam::test;

require kermeta
require "platform:/lookup/aoUrnToRam/kermeta/iwToStepClassDiagram/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/testUtil/CustomAssert.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iw.testUtil/IwTestFactory.kmt"

using kermeta::standard
using kermeta::utils
using intermediateWorkflow
using ram

class IwToStepClassDiagram_TestHelper inherits CustomAssert,IwTestFactory
{
	operation createRamWorkspace():RamWorkspace is do
		result:=RamWorkspace.new
		result.aspectPerWorkspacePath:=Hashtable<String,Aspect>.new
		result.workflow:=createRamAspect("Workflow")
		result.customizableNode:=createRamClass("CustomizableNode")
		result.executeOperation:=createOperation("execute")
		result.inputAspect:=createRamAspect("Input")
		result.outputAspect:=createRamAspect("Output")
		result.customizableInputData:=createRamClass("CustomizableInputData")
		result.customizableOutputData:=createRamClass("CustomizableOutputData")
	end
	
	operation createRamAspect(name:String):Aspect is do
		result:=Aspect.new
		result.name:=name
	end
	
	operation createRamClass(name:String):Class is do
		result:=Class.new
		result.name:=name
	end
	
	operation createOperation(name:String):Operation is do
		result:=Operation.new
		result.name:=name
	end
	

	operation assertNumOfClassesWithoutBaseClasses(expectedNumOfClasses:Integer,actualIwStep:IwStep) is do
		assertEquals(expectedNumOfClasses,actualIwStep.ramAspect.structuralView.classes.select{ramClass|isBaseClass(ramClass)==false}.size)
	end
	
	operation isBaseClass(ramClass:Class):Boolean is do
		result:=ramClass.name=="OutputData" or ramClass.name=="InputData" 
	end
	
	operation setupAndExeLinkOnNode(node:IwNode):IwStep is do
		result:=createIwStep
		node.step:=result
		result.build
		
		node.link
	end
	
	operation assertShouldBuildCustomizableNodeExecuteOperation(executeOperation:Operation) is do
		assertEquals(false,executeOperation.~abstract)
		assertEquals(Visibility.public,executeOperation.visibility)
		assertEquals(false,executeOperation.static)
		assertEquals(false,executeOperation.partial)
		var cParam:Parameter init colExtSingle(executeOperation.parameters)
		assertEquals("c",cParam.name)
	end
	
	operation assertShouldLinkExecuteOperation(step:IwStep,executeOperation:Operation) is do
		var cParam:Parameter init colExtSingle(executeOperation.parameters)
		assertEquals(step.ramLocalContextClass,cParam.type)
		assertEquals(step.ramRVoid,executeOperation.returnType)
		assertCollectionContainsElement(executeOperation,step.ramExecuteOperationMapping.maps)
	end
}