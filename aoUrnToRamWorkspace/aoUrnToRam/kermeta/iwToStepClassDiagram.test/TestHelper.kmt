package aoUrnToRam::test;

require kermeta
//stle: factory is common to IwToIw and IwToRam
require "platform:/lookup/aoUrnToRam/kermeta/iwToStepClassDiagram/_Ref.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/testUtil/CustomAssert.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/iw.testUtil/IwTestFactory.kmt"
require "platform:/lookup/aoUrnToRam/kermeta/Util.kmt"

using kermeta::standard
using intermediateWorkflow
using ram

class IwToStepClassDiagram_TestHelper inherits CustomAssert,IwTestFactory
{
	operation createRamWorkspace():RamWorkspace is do
		result:=RamWorkspace.new.initialize(
			createRamAspect("Workflow"),
			createRamClass("CustomizableNode"),
			createRamAspect("ReactiveSystemWorkflow"),
			createRamClass("InputData"),
			createRamClass("OutputData")
		)
	end
	
	operation createRamAspect(name:String):Aspect is do
		result:=Aspect.new
		result.name:=name
	end
	
	operation createRamClass(name:String):Class is do
		result:=Class.new
		result.name:=name
	end
	

	operation assertRamClassNameEquals(expectedName:String, ramClass:Class) is do
		assertEquals(expectedName,ramClass.name)
	end

	operation assertRamMappingHasSingleElement(expectedRamClass:Class,expectedRamSourceModelElement:String,actualStep:IwStep) is do
//stle		var mapClasses:Collection<MappableElement> init actualStep.ramMappingsGetValue(expectedRamSourceModelElement).maps 
//		assertCollectionHasSingleElement(expectedRamClass,mapClasses)
	end
	
	operation setupAndExeLinkOnNode(node:IwNode):IwStep is do
		result:=createIwStep
		node.step:=result
		result.build
		
		node.link
	end
}