package aoUrnToRam::test;

require kermeta
require "platform:/lookup/aoUrnToRam/kermeta/iwToStepClassDiagram.test/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow
using ram

class IwToStepClassDiagram_IwStep_LinkTestCase inherits TestCase,IwToStepClassDiagram_TestHelper
{
	reference sut:IwStep
	reference ramWorkspace:RamWorkspace
	
	method setUp() is do
		sut:=createIwStep.withConcern(createIwConcern) 
		ramWorkspace:=createRamWorkspace
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testLink_ShouldLinkInstantiationsToAspect() is do
		sut.concern.build

		sut.link(ramWorkspace)
				
		assertCollectionHasTwoElements(
			sut.ramReactiveSystemWorkflowInstantiation,
			sut.ramWorkflowInstantiation,
			sut.ramAspect.instantiations
		)
	end

	@feature "FeaMigrateToLatestRamMetaModel"
	operation testLink_ShouldLinkRamWorkflowInstantiationToExternalAspect() is do
		sut.concern.build

		sut.link(ramWorkspace)
		
		assertEquals(ramWorkspace.workflow,sut.ramWorkflowInstantiation.externalAspect)
	end
	
	@feature "FeaMigrateToLatestRamMetaModel"
	operation testLink_ShouldLinkRamCustomizableNodeMapping() is do
		sut.concern.build

		sut.link(ramWorkspace)
		
		assertCollectionHasSingleElement(sut.ramCustomizableNodeMapping,sut.ramWorkflowInstantiation.mappings)
		assertEquals(ramWorkspace.customizableNode,sut.ramCustomizableNodeMapping.sourceModelElement)
	end
	
	@feature "FeaMigrateToLatestRamMetaModel"
	operation testLink_OneInput_ShouldLinkRamCustomizableInputDataMapping() is do
		createIwInput.withStep(sut)
		sut.concern.build

		sut.link(ramWorkspace)
		
		assertCollectionHasSingleElement(sut.ramCustomizableInputDataMapping,sut.ramReactiveSystemWorkflowInstantiation.mappings)
		assertEquals(ramWorkspace.customizableInputData,sut.ramCustomizableInputDataMapping.sourceModelElement)
	end

	@feature "FeaMigrateToLatestRamMetaModel"
	operation testLink_NoInputNoOutput_ShouldNotLinkCustomizableInputDataMapping() is do
		sut.concern.build

		sut.link(ramWorkspace)
		
		assertEquals(0,sut.ramReactiveSystemWorkflowInstantiation.mappings.size)
		assertVoid(sut.ramCustomizableInputDataMapping.sourceModelElement)
	end











	
	
	
	@feature "FeaMigrateToLatestRamMetaModel"
	operation testLink_ShouldLinkRamReactiveSystemWorkflowInstantiationToExternalAspect() is do
		sut.concern.build

		sut.link(ramWorkspace)
		
		assertEquals(ramWorkspace.reactiveSystemWorkflow,sut.ramReactiveSystemWorkflowInstantiation.externalAspect)
	end
	
	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testLink_EmptyRamAspect_ShouldNotBeAddedToRamWorkspace() is do
		sut.concern.build
		
		sut.link(ramWorkspace)
		
		assertEquals(0,ramWorkspace.aspectPerWorkspacePath.size)
	end
	
	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testLink_NotEmptyRamAspect_ShouldBeAddedToRamWorkspace() is do
		createIwCustomizableNode().withStep(sut)
		sut.concern.build
		
		sut.link(ramWorkspace)
		
		assertEquals(1,ramWorkspace.aspectPerWorkspacePath.size)
	end

	@feature "FeaNamingofRAMConcern"
	operation testLink_NotEmptyRamAspect_ShouldCombineConcernNameAndStepNameAsWorkspacePath() is do
		createIwCustomizableNode().withStep(sut)
		sut.concern.build
		
		sut.link(ramWorkspace)
				
		assertCollectionContainsElement("Steps/theConcern/theStep",ramWorkspace.aspectPerWorkspacePath.keys)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testLink_ShouldInvokeLinkOnNodes() is do
		createIwInput.withStep(sut)
		createIwInput.withStep(sut)
		sut.concern.build
		
		sut.link(ramWorkspace)
	
		assertNumOfClassesWithoutBaseClasses(2,sut)
	end
}