package aoUrnToRam::test;

require kermeta
require "platform:/lookup/aoUrnToRam/kermeta/iwToStepClassDiagram.test/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow
using ram
using aoUrnToRam::util

class IwToStepClassDiagram_IwStepTestCase inherits TestCase,IwToStepClassDiagram_TestHelper
{
	reference sut:IwStep
	
	method setUp() is do
		sut:=createIwStep 
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuild_ShouldBuildAspect() is do
		sut.build
		
		assertNotVoid(sut.ramAspect)
		assertEquals(sut.name,sut.ramAspect.name)
		assertNotVoid(sut.ramAspect.structuralView)
	end

	
	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testBuild_ShouldBuildInstantiations() is do
		sut.build
		
		assertNotVoid(sut.ramWorkflowInstantiation)
		assertNotVoid(sut.ramReactiveSystemWorkflowInstantiation)
	end
	
	operation testBuild_ShouldBuildBaseClasses() is do
		sut.build
		
		assertEquals("CustomizableNode",sut.ramCustomizableNodeBaseClass.name)
		assertEquals("InputData",sut.ramInputDataBaseClass.name)
		assertEquals("OutputData",sut.ramOutputDataBaseClass.name)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testLink_ShouldLinkInstantiationsToAspect() is do
		sut.build

		sut.link(createRamWorkspace)
				
		assertCollectionHasTwoElements(
			sut.ramReactiveSystemWorkflowInstantiation,
			sut.ramWorkflowInstantiation,
			sut.ramAspect.instantiations
		)
	end
	
	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testLink_EmptyRamAspect_ShouldNotBeAddedToRamWorkspace() is do
		var ramWorkspace:RamWorkspace init createRamWorkspace
		sut.build
		
		sut.link(ramWorkspace)
		
		assertEquals(0,ramWorkspace.aspectPerWorkspacePath.size)
	end
	
	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testLink_NotEmptyRamAspect_ShouldBeAddedToRamWorkspace() is do
		var ramWorkspace:RamWorkspace init createRamWorkspace
		createIwInput.withStep(sut.withConcern(createIwConcern))
		sut.concern.build
		
		sut.link(ramWorkspace)
		
		assertEquals(1,ramWorkspace.aspectPerWorkspacePath.size)
	end

	@feature "FeaNamingofRAMConcern"
	operation testLink_NotEmptyRamAspect_ShouldCombineConcernNameAndStepNameAsWorkspacePath() is do
		var ramWorkspace:RamWorkspace init createRamWorkspace
		createIwInput.withStep(sut.withConcern(createIwConcern))
		sut.concern.build
		
		sut.link(ramWorkspace)
				
		assertCollectionContainsElement("Steps/theConcern/theStep",ramWorkspace.aspectPerWorkspacePath.keys)
	end

	@feature "FeaTransformStartPointResponsibilityEndPoint"
	operation testLink_ShouldInvokeLinkOnNodes() is do
		var ramWorkspace:RamWorkspace init createRamWorkspace
		sut.withConcern(createIwConcern)
		createIwInput.withStep(sut)
		createIwInput.withStep(sut)
		sut.concern.build
		
		sut.link(ramWorkspace)
	
		assertNumOfClassesWithoutBaseClasses(2,sut)
	end
	
	operation testLink_WithInput_ShouldLinkInputBaseClassToClassDiagram() is do
		sut.withConcern(createIwConcern)
		createIwInput.withStep(sut)
		sut.concern.build
		
		sut.link(createRamWorkspace)
	
		assertCollectionContainsElement(sut.ramInputDataBaseClass,sut.ramStructuralView.classes)
	end
	
	operation testLink_WithInput_ShouldMapInputDataBaseClass() is do
		var ramWorkspace:RamWorkspace init createRamWorkspace
		sut.withConcern(createIwConcern)
		createIwInput.withStep(sut)
		sut.concern.build
		
		sut.link(ramWorkspace)
	
		assertEquals(ramWorkspace.inputData,sut.ramInputDataBaseClassMapping.sourceModelElement)
		assertCollectionHasSingleElement(sut.ramInputDataBaseClass,sut.ramInputDataBaseClassMapping.maps)
		assertCollectionHasSingleElement(sut.ramInputDataBaseClassMapping, sut.ramReactiveSystemWorkflowInstantiation.mappings)
	end
	
	operation testLink_WithOutput_ShouldLinkOutputDataBaseClassToClassDiagram() is do
		sut.withConcern(createIwConcern)
		createIwOutput.withStep(sut)
		sut.concern.build
		
		sut.link(createRamWorkspace)
	
		assertCollectionContainsElement(sut.ramOutputDataBaseClass,sut.ramStructuralView.classes)
	end
	
	operation testLink_WithOutput_ShouldMapOutputDataBaseClass() is do
		var ramWorkspace:RamWorkspace init createRamWorkspace
		sut.withConcern(createIwConcern)
		createIwOutput.withStep(sut)
		sut.concern.build
		
		sut.link(ramWorkspace)
	
		assertEquals(ramWorkspace.outputData,sut.ramOutputDataBaseClassMapping.sourceModelElement)
		assertCollectionHasSingleElement(sut.ramOutputDataBaseClass,sut.ramOutputDataBaseClassMapping.maps)
		assertCollectionHasSingleElement(sut.ramOutputDataBaseClassMapping,sut.ramReactiveSystemWorkflowInstantiation.mappings)
	end
	
	operation testLink_ShouldLinkCustomizableNodeBaseClassToClassDiagram() is do
		sut.withConcern(createIwConcern)
		sut.concern.build
		
		sut.link(createRamWorkspace)
	
		assertCollectionContainsElement(sut.ramCustomizableNodeBaseClass,sut.ramStructuralView.classes)
	end
	
	operation testLink_ShouldMapCustomizableNodeBaseClass() is do
		var ramWorkspace:RamWorkspace init createRamWorkspace
		sut.withConcern(createIwConcern)
		sut.concern.build
		
		sut.link(ramWorkspace)
	
		assertEquals(ramWorkspace.customizableNode,sut.ramCustomizableNodeBaseClassMapping.sourceModelElement)
		assertCollectionHasSingleElement(sut.ramCustomizableNodeBaseClass,sut.ramCustomizableNodeBaseClassMapping.maps)
		assertCollectionHasSingleElement(sut.ramCustomizableNodeBaseClassMapping,sut.ramWorkflowInstantiation.mappings)
	end
	
	operation testLink_WithoutInputWithoutOutput_ShouldIgnoreBaseClassesWithoutSubtype() is do
		sut.withConcern(createIwConcern)
		sut.concern.build
		
		sut.link(createRamWorkspace)
	
		assertCollectionDoesNotContainsElement(sut.ramInputDataBaseClass,sut.ramStructuralView.classes)
		assertCollectionDoesNotContainsElement(sut.ramOutputDataBaseClass,sut.ramStructuralView.classes)
		assertEquals(0,sut.ramReactiveSystemWorkflowInstantiation.mappings.size)
	end
}