package intermediateWorkflow;


require "platform:/lookup/aoUrnToRam/kermeta/iwToStepView/_Ref.kmt"

using kermeta::standard

aspect class IwNodeConnection {
	operation appendNodeConnection(stepView:StepView) is do
		stepView.append("        ") 
		stepView.append(getSourcePortDotEscaped(stepView)) 
		
		stepView.append("->") 
		stepView.append(getTargetPortDotEscaped(stepView))

		if(hasCondition) then
			appendConnectionLabel(stepView)
		end
	end
	
	operation isFromCurrentStep(stepView:StepView):Boolean is do
		result:=step==stepView.step
	end
	
	operation appendConnectionLabel(stepView:StepView) is do
		stepView.append("[label=<<table border=\"0\" cellborder=\"0\" cellpadding=\"0\" cellspacing=\"0\"")
		stepView.append(" bgcolor=\""+stepView.customizableClassColor+"\">")
		stepView.append("<tr><td>")
		stepView.append(conditionName)
		stepView.append("</td></tr></table>>]")
	end

	operation getSourcePortDotEscaped(stepView:StepView):String is do
		result:=source.getId
		result:=stepView.dotEscape(result)
		
		if(stubExitIndex.isVoid==false) then
			result:=result+":out"+stubExitIndex.toString
		end 
	end
	
	operation getTargetPortDotEscaped(stepView:StepView):String is do
		if(isTargetAnAspectMarker) then
			result:=singleNextNodeConnection.getTargetPortDotEscaped(stepView)
		else
			result:=target.getId
			result:=stepView.dotEscape(result)
			if(stubEntryIndex.isVoid==false and target.isFromCurrentStep(stepView)) then
				result:=result+":in"+stubEntryIndex.toString
			end 
		end
	end
	
	operation isTargetAnAspectMarker():Boolean is do
		result:=false
		
		var targetAsStub:IwStub
		targetAsStub?=target
		if(targetAsStub.isVoid==false) then
			//Kermeta always evaluate all predicate of a conditional expression 
			if(targetAsStub.isAspectMarker) then
				result:=true
			end
		end
	end
	
	property readonly singleNextNodeConnection: IwNodeConnection
	getter is do
		//stle: single again
		result:=target.succs.one
	end
}
