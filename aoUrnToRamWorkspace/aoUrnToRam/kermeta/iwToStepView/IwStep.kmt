package intermediateWorkflow;


require "platform:/lookup/aoUrnToRam/kermeta/iwToStepView/_Ref.kmt"

using kermeta::standard
using kermeta::utils
using aoUrnToRam::util

aspect class IwStep {
	reference _nodesPerWorkflow:Hashtable<IwWorkflow,OrderedSet<IwNode>>
	
	operation toStepView(imgFolderWindowsPath:String):StepView is do
		result:=StepView.new
		result.imgFolderWindowsPath:=imgFolderWindowsPath
		result.step:=self
		
		result.workspacePath:=Path.new.combine("Steps",Path.new.combine(concern.name,name))
		result._dot:=StringBuffer.new
		
		appendStepViewPre(result)
		appendWorkflows(result)
		appendBindings(result)
		appendStepViewPost(result)
	end
	
	operation appendStepViewPre(stepView:StepView) is do
		stepView.append("digraph ") stepView.append(stepView.dotEscape(name)) stepView.appendLine("{")
		stepView.appendLine("    rankdir=TD;")
		stepView.appendLine("    node[")
		stepView.appendLine("        shape=box,")
		stepView.appendLine("        width=0.1,")
		stepView.appendLine("        height=.45,")
		stepView.appendLine("        fontsize=12")
		stepView.appendLine("    ];")
	end
	
	operation appendStepViewPost(stepView:StepView) is do
		stepView.appendLine("}")
	end
	
	operation appendWorkflows(stepView:StepView) is do
		nodesPerWorkflow.keys.each{workflow|
			workflow.appendStepViewPre(stepView)
			appendWorkflowNodes(stepView,nodesPerWorkflow.getValue(workflow))
			workflow.appendStepViewPost(stepView)
		}
	end
	
	operation appendWorkflowNodes(stepView:StepView,workflowNodes:OrderedSet<IwNode>)is do
		appendNodeAfterStartPointFirstThenOtherNodes(stepView,workflowNodes)
		workflowNodes.each{node|node.appendFirstVerticesFromNextStep(stepView)}
		workflowNodes.each{node|node.appendEdges(stepView)}
	end
	
	operation appendNodeAfterStartPointFirstThenOtherNodes(stepView:StepView,workflowNodes:OrderedSet<IwNode>)is do
		var nodesAfterStartPoints:OrderedSet<IwNode> init getNodeAfterStartPoints(stepView,workflowNodes) 
		
		//First startNodes to enforce startNodes to be on top in case of cycle			 
		nodesAfterStartPoints.each{node|node.appendVertex(stepView)}					 
		
		//Then, all other nodes
		workflowNodes.select{node|nodesAfterStartPoints.contains(node)==false}					
					 .each{node|node.appendVertex(stepView)} 
	end

	operation getNodeAfterStartPoints(stepView:StepView,workflowNodes:OrderedSet<IwNode>):OrderedSet<IwNode> is do
		result:=OrderedSet<IwNode>.new 
		workflowNodes.select{node|node.isInstanceOf(IwStartPoint)}
					 .each{startPoint|
					 	var nodeAfterStartPoint:IwNode init startPoint.succs.one.target
					 	if(nodeAfterStartPoint.isFromCurrentStep(stepView)) then
					 		result.add(nodeAfterStartPoint)
					 	end
					 }
	end

	
	operation appendBindings(stepView:StepView) is do
		nodes.each{node|node.appendBindings(stepView)}
		stepView.appendStubFromOtherConcerPlaceholder
		
		pluginsFromDifferentConcern.each{plugin|plugin.appendWorkflow_DifferentConcern(stepView)}
		inBoundStubs.each{inBoundStub|inBoundStub.appendAccrosConcernBindings(stepView)}
	end
	
	property readonly pluginsFromDifferentConcern:IwWorkflow[0..*] 
	getter is do
		result:=OrderedSet<IwWorkflow>.new
		inBoundStubs.each{inBoundStub|
			if(inBoundStub.isExplicitlyBoundAccrosConcerns) then
				result.add(inBoundStub.staticPlugin)
			end
		}
	end

	property readonly inBoundStubs:IwStub[0..*] 
	getter is do
		//stle: dry
		result:=nodes.select{node|node.isInstanceOf(IwStub)}
			         .collect{node|node.asType(IwStub)}.asOrderedSet
	end

	property readonly nodesPerWorkflow : Hashtable<IwWorkflow,OrderedSet<IwNode>>
	getter is do
		buildNodesPerWorkflowOnDemand
		result:=_nodesPerWorkflow
	end
	
	operation buildNodesPerWorkflowOnDemand() is do
		if(_nodesPerWorkflow.isVoid) then
			_nodesPerWorkflow:=Hashtable<IwWorkflow,OrderedSet<IwNode>>.new
			nodes.each{node|addToNodeSetPerWorkflow(node)}
			//Node cannot be added twice to an OrderedSet
			outboundStubs.each{outboundStub|addToNodeSetPerWorkflow(outboundStub)}
		end
	end
	
	operation addToNodeSetPerWorkflow(node:IwNode) is do
		if(_nodesPerWorkflow.containsKey(node.workflow)==false) then
			_nodesPerWorkflow.put(node.workflow,OrderedSet<IwNode>.new)
		end
		var nodes:OrderedSet<IwNode> init nodesPerWorkflow.getValue(node.workflow)
		nodes.add(node) 
	end
}