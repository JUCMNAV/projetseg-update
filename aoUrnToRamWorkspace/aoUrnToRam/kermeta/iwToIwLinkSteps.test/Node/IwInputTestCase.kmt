package aoUrnToRam::test;

require kermeta
require "platform:/lookup/aoUrnToRam/kermeta/iwToIwLinkSteps.test/TestHelper.kmt"

using kermeta::standard
using kermeta::kunit
using intermediateWorkflow

class IwToIwLinkSteps_IwInputTestCase inherits TestCase,IwToIwLinkSteps_TestHelper
{
	reference concern:IwConcern
	reference workflow:IwWorkflow
	reference currentStep:IwStep
	reference sut:IwInput
	
	method setUp() is do
		concern:= createIwConcern
		workflow:=createIwWorkflow.withConcern(concern)
		currentStep:=createIwStep.withConcern(concern)
		sut:=createIwInput.withWorkflow(workflow)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_EmptyStartuptStep_ShouldMergeWithCurrentStep() is do	
		currentStep.isStartupStep:=true
		currentStep.nodes.add(createIwStartPoint)
		currentStep.nodes.add(createIwAspectMarker)
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertEquals(sut.name,sut.step.name)
		assertEquals(false,sut.step.isStartupStep)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_EmptyStartuptStep_ShouldNotAddAnyStepsToConcern() is do
		currentStep.isStartupStep:=true
		currentStep.nodes.add(createIwStartPoint)
		currentStep.nodes.add(createIwAspectMarker)
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertCollectionHasSingleElement(currentStep,concern.steps)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_NotEmptyStartupStep_ShouldCreateNewStep() is do
		currentStep.isStartupStep:=true
		currentStep.nodes.add(createIwCustomizableNode)
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertEquals(sut.name,sut.step.name)
		assertEquals(false,sut.step.isStartupStep)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_NotEmptyStartupStep_ShouldAddNewStepToConcern() is do
		currentStep.isStartupStep:=true
		currentStep.nodes.add(createIwCustomizableNode)
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertCollectionHasTwoElements(currentStep,sut.step,concern.steps)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_ReactiveStep_ShouldCreateNewStep() is do
		currentStep.isStartupStep:=false
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertEquals(sut.name,sut.step.name)
		assertEquals(false,sut.step.isStartupStep)
	end
	
	@feature "FeaNamingOfRAMStep"
	operation testDeepFirstSearch_ReactiveStep_ShouldAddNewStepToConcern() is do
		currentStep.isStartupStep:=false
		
		sut.step_DeepFirstSearch(currentStep)
		
		assertCollectionHasTwoElements(currentStep,sut.step,concern.steps)
	end
	
	
}